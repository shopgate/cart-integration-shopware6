stages:
  - build
  - test
  - deploy

variables:
  PROJECT_ROOT: /var/www/html
  SHOPWARE_PROJECT_ROOT: $PROJECT_ROOT
  WEB_DOCUMENT_ROOT: $PROJECT_ROOT/public
  LOG_STDOUT: $PROJECT_ROOT/var/log/stdout.log
  GIT_STRATEGY: clone
  NPM_CONFIG_CACHE: $PROJECT_ROOT/.cache/npm
  PM2_HOME: $PROJECT_ROOT/.cache/pm2
  COMPOSER_HOME: $PROJECT_ROOT/.cache/composer
  GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/$PLUGIN_NAME
  DOCKWARE_CI: '1'
  APP_ENV: 'prod'
  APP_DEBUG: '0'
  APP_SECRET: 'abZBR1234'
  XDEBUG_ENABLED: '0'
  PHP_VERSION: '8.2'
  PLATFORM_BRANCH: '6.5.2.0'
  # things plugins might want to override
  PLUGIN_NAME: 'SgateShopgatePluginSW6'
  PLUGIN_FOLDER: $PROJECT_ROOT/custom/static-plugins/$PLUGIN_NAME
  PLUGIN_COMPOSER: shopgate/cart-integration-shopware6
  MOCK_SERVER_URL: 'http://127.0.0.1:3000'

.cache: &cache
  key: $PLUGIN_NAME-$PLATFORM_BRANCH
  policy: pull
  paths:
    - .cache

workflow:
  rules:
    # do not run on push unless it has a tag
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG == null'
      when: never
    - when: always

.defaults: &defaults
  image: dockware/dev:$PLATFORM_BRANCH
  cache:
    <<: *cache
  before_script:
    - cd $PROJECT_ROOT
    - '[ -d $CI_PROJECT_DIR/.cache ] && mv $CI_PROJECT_DIR/.cache $PROJECT_ROOT/'
    - ln -fs $CI_PROJECT_DIR $PLUGIN_FOLDER
    - make --quiet -C $PROJECT_ROOT/../ xdebug-off
    - composer require --prefer-source --quiet $PLUGIN_COMPOSER:@dev
    - '[ ! -L "vendor/$PLUGIN_COMPOSER" ] && echo "Not symlinked! Pulled from packagist?" && exit 1'
    - bin/console plugin:refresh --quiet
    - bin/console plugin:install --quiet --activate $PLUGIN_NAME
    - bin/console sales-channel:update:domain "$HOSTNAME"
    - >
      if bin/console debug:container --parameter kernel.plugin_infos --format json | grep -q "$PLUGIN_NAME";
        then echo "$PLUGIN_NAME is active";
        else echo "$PLUGIN_NAME is not active"; exit 1;
      fi

newman:
  <<: *defaults
  stage: test
  cache:
    <<: *cache
    policy: pull-push
  parallel:
    matrix:
      - PLATFORM_BRANCH:
          - 6.5.2.0
          - 6.6.10.4
          - 6.7.0.0
      - PHP_VERSION:
          - '8.1'
  except:
    - tags
  script:
    - bin/console debug:event-dispatcher >/dev/null
    - export APP_URL="http://$HOSTNAME"
    - cd $CI_PROJECT_DIR/tests
    - npm install > /dev/null
    - npm run mockoon-start -- --hostname="$APP_URL";
    - npm run ci -- --env-var="host=$APP_URL"
      --reporter-htmlextra-export="$CI_PROJECT_DIR/postman-report.html"
      --reporter-junit-export="$CI_PROJECT_DIR/newman.junit.xml"
      --global-var="mock_server_merchant_uri=$MOCK_SERVER_URL";
    - mv $PROJECT_ROOT/.cache $CI_PROJECT_DIR/
  artifacts:
    when: on_failure
    expire_in: 7 days
    reports:
      junit: newman.junit.xml
    paths:
      - ./postman-report.html

register package:
  image: curlimages/curl:latest
  services: [ ]
  stage: build
  only:
    - tags
  variables:
    URL: "$CI_SERVER_PROTOCOL://$CI_SERVER_HOST:$CI_SERVER_PORT/api/v4/projects/$CI_PROJECT_ID/packages/composer?job_token=$CI_JOB_TOKEN"
  before_script: [ ]
  script:
    - version=$([[ -z "$CI_COMMIT_TAG" ]] && echo "branch=$CI_COMMIT_REF_NAME" || echo "tag=$CI_COMMIT_TAG")
    - insecure=$([ "$CI_SERVER_PROTOCOL" = "http" ] && echo "--insecure" || echo "")
    - response=$(curl -s -w "\n%{http_code}" $insecure --data $version $URL)
    - code=$(echo "$response" | tail -n 1)
    - body=$(echo "$response" | head -n 1)
    # Output state information
    - if [ $code -eq 201 ]; then
      echo "Package created - Code $code - $body";
      else
      echo "Could not create package - Code $code - $body";
      exit 1;
      fi

build zip:
  <<: *defaults
  stage: build
  only:
    - tags
  script:
    - cd $CI_PROJECT_DIR
    - cp composer.json composer.json_
    - composer remove --update-no-dev -- shopware/core symfony/expression-language
    - mv composer.json_ composer.json
    - rm -f composer.lock
    - shopware-cli extension validate $CI_PROJECT_DIR
    - shopware-cli extension zip $CI_PROJECT_DIR --disable-git --release --verbose --output-directory $PROJECT_ROOT
    - mv $PROJECT_ROOT/$PLUGIN_NAME.zip $CI_PROJECT_DIR/
    - '[[ -r $PLUGIN_NAME.zip ]] || (echo "failed to create $PLUGIN_NAME.zip." && exit 1)'
  artifacts:
    name: '${PLUGIN_NAME}'
    expire_in: 1 year
    paths:
      - '${PLUGIN_NAME}.zip'

publish to marketplace:
  stage: deploy
  image:
    name: ghcr.io/friendsofshopware/shopware-cli
    entrypoint: [ "" ]
  services: [ ]
  variables:
    GIT_STRATEGY: none
  needs:
    - build zip
  rules:
    - if: $CI_COMMIT_TAG != null && $CI_COMMIT_TAG !~ /beta|alpha/i
  before_script: [ ]
  script:
    - shopware-cli account producer extension upload "$(realpath "$PLUGIN_NAME.zip")"

# Disabled downstream runners (all adaptions will need to be updated if requested by merchants)
#
#.downstreamDefaults: &downstreamDefaults
#  except:
#    - tags
#  variables:
#    UPSTREAM_BRANCH: $CI_COMMIT_REF_NAME
#    UPSTREAM_REF: $CI_COMMIT_SHA
#  inherit:
#    variables: false
#
#downstream replyCert:
#  <<: *downstreamDefaults
#  trigger:
#    project: apite/shopgate/shopware6/reply-certificate
#    branch: ver-1.x
#
#downstream acrisSurcharge:
#  <<: *downstreamDefaults
#  trigger:
#    project: apite/shopgate/shopware6/acris-surcharge
#    branch: ver-1.x
#
#downstream dynamicAccess:
#  <<: *downstreamDefaults
#  trigger:
#    project: apite/shopgate/shopware6/shopware-dynamic-access
#    branch: main
#
#downstream vatIdMapping:
#  <<: *downstreamDefaults
#  trigger:
#    project: apite/shopgate/shopware6/shopgate-vat-id-mapping
#    branch: main
