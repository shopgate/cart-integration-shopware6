<?xml version="1.0" ?>

<container xmlns="http://symfony.com/schema/dic/services" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd">
    <parameters>
        <parameter key="shopgate.configurations" type="collection">
            <parameter key="enable_get_settings">true</parameter>
            <parameter key="enable_set_settings">true</parameter>
            <parameter key="enable_get_categories">true</parameter>
            <parameter key="enable_get_customer">true</parameter>
            <parameter key="enable_get_orders">true</parameter>
            <parameter key="enable_get_reviews">true</parameter>
            <parameter key="enable_get_items">true</parameter>
            <parameter key="enable_register_customer">true</parameter>
            <parameter key="enable_check_cart">true</parameter>
            <parameter key="enable_add_order">true</parameter>
            <parameter key="enable_update_order">true</parameter>
            <parameter key="enable_cron">true</parameter>
            <parameter key="plugin_name" type="string">Shopgate Go Plugin for Shopware 6</parameter>
            <parameter key="log_folder_path" type="string">%kernel.logs_dir%/shopgate</parameter>
            <parameter key="cache_folder_path" type="string">%kernel.cache_dir%/shopgate</parameter>
            <parameter key="export_folder_path" type="string">%kernel.cache_dir%/shopgate</parameter>
        </parameter>
        <!-- Note that whitelists control mapping of $sgEntity->custom_fields[]->field to existing $swEntity->field. -->
        <!-- Whatever does not map here goes into the $swEntity->customFields list, it will only save if the field exists. -->
        <parameter key="shopgate.customer.custom_field.whitelist" type="collection">
            <parameter key="title">string</parameter>
            <parameter key="affiliate_code">string</parameter>
            <parameter key="campaign_code">string</parameter>
            <parameter key="vat_ids">array</parameter><!-- Req. account_type=business & billingAddress->company -->
            <parameter key="account_type">string</parameter> <!-- see constants at Shopware\Core\Checkout\Customer -->
        </parameter>
        <parameter key="shopgate.customer.address.custom_field.whitelist" type="collection">
            <parameter key="department">string</parameter>
            <parameter key="phone_number">string</parameter>
        </parameter>
        <parameter key="shopgate.order.custom_field.whitelist" type="collection">
            <parameter key="affiliate_code">string</parameter>
            <parameter key="campaign_code">string</parameter>
            <parameter key="customer_comment">string</parameter>
        </parameter>
        <parameter key="shopgate.custom_field.transformList" type="collection">
            <parameter key="account_type">accountType</parameter>
            <parameter key="affiliate_code">affiliateCode</parameter>
            <parameter key="campaign_code">campaignCode</parameter>
            <parameter key="customer_comment">customerComment</parameter>
            <parameter key="phone_number">phoneNumber</parameter>
            <parameter key="vat_ids">vatIds</parameter>
        </parameter>
        <parameter key="shopgate.go.secondary.log.location" type="string">%kernel.logs_dir%/shopgate/go</parameter>
    </parameters>
    <services>
        <defaults autoconfigure="true" autowire="true"/>
        <service id="shopgate.sdk.shipping_method" class="\ShopgateShippingMethod"/>
        <service id="shopgate.sdk.external_coupon" class="\ShopgateExternalCoupon"/>
        <service id="shopgate.sdk.delivery_note" class="\ShopgateDeliveryNote"/>
        <service id="shopgate.sdk.payment_method" class="\ShopgatePaymentMethod"/>
        <service id="shopgate.sdk.external_order_coupon" class="\ShopgateExternalOrderExternalCoupon"/>
        <service id="shopgate.sdk.external_order" class="\ShopgateExternalOrder"/>
        <service id="shopgate.sdk.external_order_extra_cost" class="\ShopgateExternalOrderExtraCost"/>
        <service id="Shopgate\Shopware\Catalog\Category\CategoryBridge">
            <argument key="$categoryProductMapRepository" type="service" id="shopgate_go_category_product_mapping.repository" />
        </service>
        <service id="Shopgate\Shopware\Catalog\Category\ProductMapBridge">
            <argument type="service" id="Doctrine\DBAL\Connection" />
            <argument key="$logger" type="service" id="shopgate.go.fallback.logger"/>
        </service>
        <service id="Shopgate\Shopware\Catalog\Category\CategoryComposer">
            <argument key="$categoryMapping" type="service" id="Shopgate\Shopware\Catalog\Mapping\CategoryMapping"/>
        </service>
        <service id="Shopgate\Shopware\Catalog\DataAbstractionLayer\CategoryProductMappingIndexer">
            <argument type="service" id="Doctrine\DBAL\Connection" />
            <argument type="service" id="Shopware\Core\Framework\DataAbstractionLayer\Dbal\Common\IteratorFactory"/>
            <argument key="$repository" type="service" id="category.repository"/>
            <argument key="$logger" type="service" id="shopgate.go.fallback.logger" />
            <tag name="shopware.entity_indexer" priority="-10" />
        </service>
        <service id="Shopgate\Shopware\Catalog\Product\ProductBridge">
            <argument key="$productRepository" type="service" id="sales_channel.product.repository"/>
        </service>
        <service id="Shopgate\Shopware\Catalog\Product\ProductComposer"/>
        <service id="Shopgate\Shopware\Catalog\Review\ReviewComposer"/>
        <service id="Shopgate\Shopware\Catalog\Review\ReviewBridge">
            <argument key="$reviewRepository" type="service" id="product_review.repository"/>
        </service>
        <service id="Shopgate\Shopware\Catalog\Review\ReviewMapping"/>
        <service id="Shopgate\Shopware\Catalog\Review\Subscriber\AddChannelFilterSubscriber">
            <argument key="$exportAllChannelReviews" type="expression">service('shopgate.config_bridge').get('exportAllChannelReviews', true)</argument>
            <tag name="kernel.event_subscriber"/>
        </service>
        <service id="Shopgate\Shopware\Catalog\Subscribers\CrossSellPropertySubscriber">
            <tag name="kernel.event_subscriber"/>
        </service>
        <service id="Shopgate\Shopware\Catalog\Subscribers\ManufacturerPropertySubscriber">
            <tag name="kernel.event_subscriber"/>
        </service>
        <service id="Shopgate\Shopware\Customer\CustomerComposer"/>
        <service id="Shopgate\Shopware\Customer\AddressBridge">
            <argument key="$addressRepository" type="service" id="customer_address.repository"/>
        </service>
        <service id="Shopgate\Shopware\Customer\CustomerBridge"/>
        <service id="Shopgate\Shopware\Catalog\Mapping\CategoryMapping"/>
        <service id="Shopgate\Shopware\Catalog\Mapping\ChildProductMapping"/>
        <service id="Shopgate\Shopware\Catalog\Mapping\ConfigProductMapping">
            <argument key="$childProductMapping" type="service" id="Shopgate\Shopware\Catalog\Mapping\ChildProductMapping"/>
        </service>
        <service id="Shopgate\Shopware\Catalog\Mapping\PriceMapping">
            <argument key="$exportNet" type="expression">service('shopgate.config_bridge').get('exportNetPrices', false)</argument>
        </service>
        <service id="Shopgate\Shopware\Catalog\Mapping\ProductMapFactory">
            <argument type="service" id="Shopgate\Shopware\Catalog\Mapping\SimpleProductMapping"/>
            <argument type="service" id="Shopgate\Shopware\Catalog\Mapping\ConfigProductMapping"/>
        </service>
        <service id="Shopgate\Shopware\Catalog\Mapping\SimpleProductMapping"/>
        <service id="Shopgate\Shopware\Catalog\Mapping\TierPriceMapping"/>
        <service id="Shopgate\Shopware\Catalog\Product\Property\CustomFieldBridge">
            <argument type="service" id="custom_field.repository"/>
        </service>
        <service id="Shopgate\Shopware\Catalog\Product\Property\PropertyBridge">
            <argument type="service" id="property_group.repository"/>
        </service>
        <service id="Shopgate\Shopware\Catalog\Product\Sort\SortBridge">
            <argument type="service" id="product_sorting.repository"/>
        </service>
        <service id="Shopgate\Shopware\Catalog\Product\Sort\SortTree">
            <argument key="$productSortingRepository" type="service" id="product_sorting.repository"/>
            <argument key="$logger" type="service" id="shopgate.go.fallback.logger"/>
        </service>
        <service id="Shopgate\Shopware\Customer\Mapping\SalutationMapping">
            <argument key="$swSalutationRepository" type="service" id="salutation.repository"/>
            <argument key="$sgSalutationRepository" type="service" id="shopgate_go_salutations.repository"/>
        </service>
        <service id="Shopgate\Shopware\Customer\Mapping\AddressMapping">
            <argument key="$customFieldMapping" type="service" id="sg.customer.address.custom_field.whitelist"/>
        </service>
        <service id="Shopgate\Shopware\Customer\Mapping\CustomerMapping">
            <argument key="$customFieldMapping" type="service" id="sg.customer.custom_field.whitelist"/>
        </service>
        <service id="Shopgate\Shopware\Order\Quote\OrderMapping">
            <argument key="$customFieldMapping" type="service" id="sg.order.custom_field.whitelist"/>
            <argument key="$sgExternalOrder" type="service" id="Shopgate\Shopware\Shopgate\Extended\ExtendedExternalOrder"/>
        </service>
        <service id="Shopgate\Shopware\Customer\Mapping\GroupMapping"/>
        <service id="Shopgate\Shopware\Customer\Mapping\LocationMapping">
            <argument type="service" id="country.repository"/>
            <argument type="service" id="country_state.repository"/>
        </service>
        <service id="Shopgate\Shopware\ExportService"/>
        <service id="Shopgate\Shopware\ImportService"/>
        <service id="Shopgate\Shopware\Order\Customer\AddressComposer"/>
        <service id="Shopgate\Shopware\Order\Subscriber\AddSgOrderToCriteriaSubscriber">
            <tag name="kernel.event_subscriber"/>
        </service>
        <service id="Shopgate\Shopware\Order\Subscriber\ChangeLanguageSubscriber">
            <argument key="$languageId" type="expression">service('shopgate.config_bridge').get('languageId')</argument>
            <tag name="kernel.event_subscriber"/>
        </service>
        <service id="Shopgate\Shopware\Order\Subscriber\LiveShoppingSubscriber">
            <tag name="kernel.event_subscriber"/>
        </service>
        <service id="Shopgate\Shopware\Order\Subscriber\RoundingOverwriteSubscriber">
            <tag name="kernel.event_subscriber"/>
        </service>
        <service id="Shopgate\Shopware\Order\Subscriber\SaveCartSubscriber">
            <tag name="kernel.event_subscriber"/>
        </service>
        <service id="Shopgate\Shopware\Order\Subscriber\ShopgateCouponSubscriber">
            <tag name="kernel.event_subscriber"/>
        </service>
        <service id="Shopgate\Shopware\Order\Subscriber\SortOutLineItemSubscriber">
            <tag name="kernel.event_subscriber"/>
        </service>
        <service id="Shopgate\Shopware\Order\CartComposer"/>
        <service id="Shopgate\Shopware\Order\Customer\CustomerMapping"/>
        <service id="Shopgate\Shopware\Order\Customer\OrderCustomerComposer"/>
        <service id="Shopgate\Shopware\Order\ContextComposer"/>
        <service id="Shopgate\Shopware\Order\LineItem\LineItemComposer"/>
        <service id="Shopgate\Shopware\Order\LineItem\LineItemProductMapping"/>
        <service id="Shopgate\Shopware\Order\LineItem\LineItemPromoMapping"/>
        <service id="Shopgate\Shopware\Order\Quote\QuoteErrorMapping"/>
        <service id="Shopgate\Shopware\Order\OrderComposer">
            <argument key="$merchantApi" type="service" id="shopgate.core.extended.merchant_api"/>
        </service>
        <service id="Shopgate\Shopware\Order\Payment\PaymentBridge"/>
        <service id="Shopgate\Shopware\Order\Payment\PaymentComposer"/>
        <service id="Shopgate\Shopware\Order\Payment\PaymentMapping"/>
        <service id="Shopgate\Shopware\Order\Shipping\ShippingMapping"/>
        <service id="Shopgate\Shopware\Order\Shipping\ShippingComposer">
            <argument key="$shopwareVersion" type="string">%kernel.shopware_version%</argument>
        </service>
        <service id="Shopgate\Shopware\Order\Shipping\ShippingBridge"/>
        <service id="Shopgate\Shopware\Order\State\StateBridge"/>
        <service id="Shopgate\Shopware\Order\State\StateComposer"/>
        <service id="Shopgate\Shopware\Order\Taxes\TaxMapping"/>
        <service id="Shopgate\Shopware\Order\Quote\QuoteBridge"/>
        <service id="shopgate.plugin" class="Shopgate\Shopware\Plugin">
            <!-- if Flysystem config is enabled we route to the Extended Builder class, otherwise use default -->
            <argument key="$builder" type="expression">
                service('shopgate.config_bridge').get('isFlysystem') === true
                ? service('shopgate.flysystem.extended_builder')
                : service('shopgate.core.extended_builder')
            </argument>
            <call method="dependencyInjector"/>
        </service>
        <service id="shopgate.flysystem.extended_builder" class="Shopgate\Shopware\Shopgate\Extended\Flysystem\ExtendedBuilder">
            <argument key="$privateFileSystem" type="service" id="sgate_shopgate_plugin_s_w6.filesystem.private"/>
            <argument key="$merchantApi" type="service" id="shopgate.core.extended.merchant_api"/>
            <argument key="$authService" type="service" id="shopgate.sdk.shopgate_auth_service"/>
            <call method="initConstruct">
                <argument type="service" id="shopgate.config_mapping"/>
            </call>
        </service>
        <service id="shopgate.core.extended_builder" class="Shopgate\Shopware\Shopgate\Extended\Core\ExtendedBuilder">
            <argument key="$merchantApi" type="service" id="shopgate.core.extended.merchant_api"/>
            <argument key="$authService" type="service" id="shopgate.sdk.shopgate_auth_service"/>
            <call method="initConstruct">
                <argument type="service" id="shopgate.config_mapping"/>
            </call>
        </service>
        <service id="shopgate.sdk.shopgate_auth_service" class="\ShopgateAuthenticationServiceShopgate">
            <argument key="$apiKey" type="expression">service('shopgate.config_mapping').getApiKey()</argument>
            <argument key="$customerNumber" type="expression">service('shopgate.config_mapping').getCustomerNumber()</argument>
            <call method="setup">
                <argument key="$config" type="service" id="shopgate.config_mapping"/>
            </call>
        </service>
        <service id="shopgate.core.extended.merchant_api" class="Shopgate\Shopware\Shopgate\Extended\Core\ExtendedMerchantApi" shared="true">
            <argument key="$authService" type="service" id="shopgate.sdk.shopgate_auth_service"/>
            <argument key="$apiUrl" type="expression">service('shopgate.config_mapping').getApiUrl()</argument>
            <argument key="$shopNumber" type="expression">service('shopgate.config_mapping').getShopNumber()</argument>
        </service>
        <service id="Shopgate\Shopware\Shopgate\NativeOrderExtension">
            <tag name="shopware.entity.extension"/>
        </service>
        <service id="Shopgate\Shopware\Shopgate\SalutationExtension">
            <tag name="shopware.entity.extension"/>
        </service>
        <service id="Shopgate\Shopware\Shopgate\Salutations\ShopgateSalutationDefinition">
            <tag name="shopware.entity.definition" entity="shopgate_go_salutations"/>
        </service>
        <service id="Shopgate\Shopware\Shopgate\ApiCredentials\ShopgateApiCredentialsDefinition">
            <tag name="shopware.entity.definition" entity="shopgate_api_credentials"/>
        </service>
        <service id="Shopgate\Shopware\Shopgate\Catalog\CategoryProductMappingDefinition">
            <tag name="shopware.entity.definition" entity="shopgate_go_category_product_mapping"/>
        </service>
        <service id="Shopgate\Shopware\Shopgate\ExtendedClassFactory">
            <argument key="$cart" type="service" id="Shopgate\Shopware\Shopgate\Extended\ExtendedCart"/>
            <argument key="$cartItem" type="service" id="Shopgate\Shopware\Shopgate\Extended\ExtendedCartItem"/>
            <argument key="$externalCoupon" type="service"
                      id="Shopgate\Shopware\Shopgate\Extended\ExtendedExternalCoupon"/>
            <argument key="$orderExportCoupon" type="service"
                      id="Shopgate\Shopware\Shopgate\Extended\ExtendedExternalOrderExtCoupon"/>
            <argument key="$orderItem" type="service"
                      id="Shopgate\Shopware\Shopgate\Extended\ExtendedExternalOrderItem"/>
            <argument key="$orderTax" type="service" id="Shopgate\Shopware\Shopgate\Extended\ExtendedExternalOrderTax"/>
            <argument key="$order" type="service" id="Shopgate\Shopware\Shopgate\Extended\ExtendedOrder"/>
            <argument key="$property" type="service" id="Shopgate\Shopware\Shopgate\Extended\ExtendedProperty"/>
            <argument key="$shippingMethod" type="service" id="shopgate.sdk.shipping_method"/>
            <argument key="$deliveryNote" type="service" id="shopgate.sdk.delivery_note"/>
            <argument key="$orderExtraCost" type="service" id="shopgate.sdk.external_order_extra_cost"/>
            <argument key="$paymentMethod" type="service" id="shopgate.sdk.payment_method"/>
        </service>
        <service id="Shopgate\Shopware\Shopgate\Extended\ExtendedExternalCoupon"/>
        <service id="Shopgate\Shopware\Shopgate\Extended\ExtendedExternalOrder"/>
        <service id="Shopgate\Shopware\Shopgate\Extended\ExtendedExternalOrderExtCoupon"/>
        <service id="Shopgate\Shopware\Shopgate\Extended\ExtendedExternalOrderItem"/>
        <service id="Shopgate\Shopware\Shopgate\Extended\ExtendedExternalOrderTax"/>
        <service id="Shopgate\Shopware\Shopgate\Extended\ExtendedCart">
            <argument key="$extendedExternalCoupon" type="service" id="Shopgate\Shopware\Shopgate\Extended\ExtendedExternalCoupon"/>
            <argument key="$extendedOrderItem" type="service" id="Shopgate\Shopware\Shopgate\Extended\ExtendedOrderItem"/>
        </service>
        <service id="Shopgate\Shopware\Shopgate\Extended\ExtendedCartItem"/>
        <service id="Shopgate\Shopware\Shopgate\Extended\ExtendedToArrayVisitor"/>
        <service id="Shopgate\Shopware\Shopgate\Extended\ExtendedOrder">
            <argument key="$extendedExternalCoupon" type="service" id="Shopgate\Shopware\Shopgate\Extended\ExtendedExternalCoupon"/>
            <argument key="$extendedOrderItem" type="service" id="Shopgate\Shopware\Shopgate\Extended\ExtendedOrderItem"/>
            <argument key="$visitor" type="service" id="Shopgate\Shopware\Shopgate\Extended\ExtendedToArrayVisitor"/>
        </service>
        <service id="Shopgate\Shopware\Shopgate\Extended\ExtendedOrderItem"/>
        <service id="Shopgate\Shopware\Shopgate\Extended\ExtendedProperty"/>
        <service id="Shopgate\Shopware\Shopgate\Order\ShopgateOrderDefinition">
            <tag name="shopware.entity.definition" entity="shopgate_order"/>
        </service>
        <service id="Shopgate\Shopware\Shopgate\Order\ShopgateOrderMapping"/>
        <service id="Shopgate\Shopware\Shopgate\RequestPersist" shared="true"/>
        <service id="Shopgate\Shopware\Shopgate\ShopgateOrderBridge">
            <argument type="service" id="shopgate_order.repository"/>
        </service>
        <service id="Shopgate\Shopware\System\DomainBridge">
            <argument type="service" id="sales_channel_domain.repository"/>
        </service>
        <service id="Shopgate\Shopware\System\Configuration\ConfigBridge" alias="shopgate.config_bridge"/>
        <service id="shopgate.config_bridge" class="Shopgate\Shopware\System\Configuration\ConfigBridge" shared="true">
            <argument key="$pluginRepository" type="service" id="plugin.repository"/>
            <argument key="$systemConfigRepo" type="service" id="system_config.repository"/>
            <argument key="$shopgateApiRepo" type="service" id="shopgate_api_credentials.repository"/>
            <argument key="$shopwareVersion" type="string">%kernel.shopware_version%</argument>
            <call method="loadByShopNumber">
                <argument type="expression">service('request_stack').getCurrentRequest()?.request.get('shop_number')</argument>
            </call>
        </service>
        <service id="sg.order.custom_field.whitelist" class="Shopgate\Shopware\System\CustomFields\CustomFieldMapping">
            <argument key="$whitelist">%shopgate.order.custom_field.whitelist%</argument>
            <argument key="$transformList">%shopgate.custom_field.transformList%</argument>
        </service>
        <service id="sg.customer.custom_field.whitelist" class="Shopgate\Shopware\System\CustomFields\CustomFieldMapping">
            <argument key="$whitelist">%shopgate.customer.custom_field.whitelist%</argument>
            <argument key="$transformList">%shopgate.custom_field.transformList%</argument>
        </service>
        <service id="sg.customer.address.custom_field.whitelist" class="Shopgate\Shopware\System\CustomFields\CustomFieldMapping">
            <argument key="$whitelist">%shopgate.customer.address.custom_field.whitelist%</argument>
            <argument key="$transformList">%shopgate.custom_field.transformList%</argument>
        </service>
        <service id="Shopgate\Shopware\System\CustomFields\CustomFieldMapping"
                 alias="sg.customer.custom_field.whitelist"/>
        <service id="Shopgate\Shopware\System\Log\EventLogger">
            <argument key="$db" type="service" id="Doctrine\DBAL\Connection" />
            <argument key="$serializer" type="service" id="serializer"/>
        </service>
        <service id="Shopgate\Shopware\System\Log\Logger"/>
        <service id="Shopgate\Shopware\System\File\FileReader"/>
        <service id="shopgate.go.fallback.logger" class="Shopgate\Shopware\System\Log\FallbackLogger" shared="true">
            <argument key="$name" type="string">ShopgateGo</argument>
            <argument key="$handlers" type="collection">
                <argument type="service" id="shopgate.go.file.handler"/>
            </argument>
        </service>
        <service id="shopgate.config_mapping" class="Shopgate\Shopware\System\Configuration\ConfigMapping" shared="true">
            <argument>%shopgate.configurations%</argument>
            <call method="setConfigBridge"/>
            <call method="initShopwareConfig">
                <argument type="expression">
                    {
                    "customer_number": service('shopgate.config_bridge').get('customerNumber'),
                    "shop_number": service('shopgate.config_bridge').get('shopNumber'),
                    "apikey": service('shopgate.config_bridge').get('apiKey'),
                    "server": service('shopgate.config_bridge').get('server', 'live'),
                    "api_url": service('shopgate.config_bridge').get('apiUrl'),
                    "product_types_to_export": service('shopgate.config_bridge').get('productTypesToExport'),
                    }
                </argument>
            </call>
            <call method="initFolderStructure"/>
        </service>
        <service id="Shopgate\Shopware\System\Db\Rule\IsShopgateRuleCondition">
            <tag name="shopware.rule.definition"/>
        </service>
        <service id="shopgate.go.file.handler" class="Shopgate\Shopware\System\File\ExtendedRotatingFileHandler">
            <argument key="$filename" type="string">%shopgate.go.secondary.log.location%/%kernel.environment%.log</argument>
            <argument key="$customDateTime" type="string">Y-m-d</argument>
            <argument key="$maxFiles" type="string">5</argument>
        </service>
        <service id="Shopgate\Shopware\System\Tax\TaxBridge">
            <argument type="service" id="tax.repository"/>
            <argument type="service" id="tax_rule.repository"/>
            <argument type="service" id="tax_rule_type.repository"/>
        </service>
        <service id="Shopgate\Shopware\System\PaymentHandler\GenericHandler">
            <argument type="service" id="Shopware\Core\Checkout\Order\Aggregate\OrderTransaction\OrderTransactionStateHandler"/>
            <tag name="shopware.payment.method.sync"/>
        </service>
        <service id="Shopgate\Shopware\System\CurrencyComposer"/>
        <service id="Shopgate\Shopware\System\Formatter">
            <argument key="$translator" id="translator"/>
        </service>
        <service id="Shopgate\Shopware\System\Tax\TaxComposer"/>
        <service id="Shopgate\Shopware\Storefront\Subscribers\ExceptionCatcherSubscriber">
            <tag name="kernel.event_subscriber"/>
        </service>
        <service id="shopgate.context_manager" class="Shopgate\Shopware\Storefront\ContextManager"/>
        <service id="Shopware\Core\Framework\Validation\DataBag\RequestDataBag"/>
        <service id="Shopgate\Shopware\Storefront\Controller\IndexController" public="true">
            <argument type="service" id="Shopware\Core\Framework\DataAbstractionLayer\Indexing\EntityIndexerRegistry"/>
            <argument key="$logger" type="service" id="shopgate.go.fallback.logger" />
        </service>
        <service id="Shopgate\Shopware\Storefront\Controller\MainController" public="true"/>
        <service id="Shopgate\Shopware\Storefront\Controller\MainApiController" public="true"/>
        <service id="Shopgate\Shopware\Storefront\Controller\LogController" public="true">
            <argument key="$logDirectory">%shopgate.go.secondary.log.location%</argument>
        </service>
        <!-- Interfaces & aliases-->
        <service id="Shopgate\Shopware\Plugin" alias="shopgate.plugin"/>
        <service id="Shopgate\Shopware\Storefront\ContextManager" alias="shopgate.context_manager"/>
        <service id="Shopgate\Shopware\System\Log\LoggerInterface" alias="Shopgate\Shopware\System\Log\Logger"/>
        <service id="Shopware\Core\Content\Product\SalesChannel\CrossSelling\AbstractProductCrossSellingRoute" alias="Shopware\Core\Content\Product\SalesChannel\CrossSelling\CachedProductCrossSellingRoute"/>
        <service id="Shopware\Core\Content\Product\SalesChannel\Listing\AbstractProductListingRoute" alias="Shopware\Core\Content\Product\SalesChannel\Listing\ProductListingRoute"/>
        <service id="Shopware\Core\Content\Product\SalesChannel\AbstractProductListRoute" alias="Shopware\Core\Content\Product\SalesChannel\ProductListRoute"/>
        <service id="Shopware\Core\System\SalesChannel\SalesChannel\AbstractContextSwitchRoute" alias="Shopware\Core\System\SalesChannel\SalesChannel\ContextSwitchRoute"/>
        <service id="Shopware\Core\System\SalesChannel\Context\AbstractSalesChannelContextFactory" alias="Shopware\Core\System\SalesChannel\Context\CachedSalesChannelContextFactory"/>
        <service id="Shopware\Core\System\Language\SalesChannel\AbstractLanguageRoute" alias="Shopware\Core\System\Language\SalesChannel\CachedLanguageRoute"/>
        <service id="Shopware\Core\Checkout\Order\SalesChannel\AbstractOrderRoute" alias="Shopware\Core\Checkout\Order\SalesChannel\OrderRoute"/>
        <service id="Shopware\Core\Checkout\Cart\SalesChannel\AbstractCartLoadRoute" alias="Shopware\Core\Checkout\Cart\SalesChannel\CartLoadRoute"/>
        <service id="Shopware\Core\Checkout\Cart\SalesChannel\AbstractCartItemAddRoute" alias="Shopware\Core\Checkout\Cart\SalesChannel\CartItemAddRoute"/>
        <service id="Shopware\Core\Checkout\Cart\SalesChannel\AbstractCartDeleteRoute" alias="Shopware\Core\Checkout\Cart\SalesChannel\CartDeleteRoute"/>
        <service id="Shopware\Core\Checkout\Cart\SalesChannel\AbstractCartOrderRoute" alias="Shopware\Core\Checkout\Cart\SalesChannel\CartOrderRoute"/>
        <service id="Shopware\Core\Checkout\Shipping\SalesChannel\AbstractShippingMethodRoute" alias="Shopware\Core\Checkout\Shipping\SalesChannel\CachedShippingMethodRoute"/>
        <service id="Shopware\Core\Checkout\Customer\SalesChannel\AbstractCustomerRoute" alias="Shopware\Core\Checkout\Customer\SalesChannel\CustomerRoute"/>
        <service id="Shopware\Core\Checkout\Customer\SalesChannel\AbstractLoginRoute" alias="Shopware\Core\Checkout\Customer\SalesChannel\LoginRoute"/>
        <service id="Shopware\Core\Checkout\Customer\SalesChannel\AbstractRegisterRoute" alias="Shopware\Core\Checkout\Customer\SalesChannel\RegisterRoute"/>
        <service id="Shopware\Core\Checkout\Customer\SalesChannel\AbstractUpsertAddressRoute" alias="Shopware\Core\Checkout\Customer\SalesChannel\UpsertAddressRoute"/>
        <service id="Shopware\Core\Content\Category\SalesChannel\AbstractCategoryListRoute" alias="Shopware\Core\Content\Category\SalesChannel\CategoryListRoute"/>
        <service id="Shopware\Core\Checkout\Payment\SalesChannel\AbstractPaymentMethodRoute" alias="Shopware\Core\Checkout\Payment\SalesChannel\PaymentMethodRoute"/>
        <service id="Shopware\Core\Framework\Adapter\Translation\AbstractTranslator" alias="Shopware\Core\Framework\Adapter\Translation\Translator"/>
    </services>
</container>
