(function(){var e={866:function(){},50:function(){},13:function(){},38:function(){Shopware.Service("privileges").addPrivilegeMappingEntry({category:"permissions",parent:"shopgate",key:"shopgate_go",roles:{viewer:{privileges:["sales_channel:read","language:read","locale:read","shopgate_api_credentials:read","shopgate_go_salutations:read","shopgate_go_category_product_mapping:read","shopgate_order:read"],dependencies:[]},editor:{privileges:["shopgate_api_credentials:update","shopgate_go_salutations:update","shopgate_go_category_product_mapping:update","shopgate_order:update"],dependencies:["shopgate_go.viewer"]},creator:{privileges:["shopgate_api_credentials:create","shopgate_go_salutations:create","shopgate_go_category_product_mapping:create","shopgate_order:create"],dependencies:["shopgate_go.editor","shopgate_go.viewer"]},deleter:{privileges:["shopgate_api_credentials:delete","shopgate_go_salutations:delete","shopgate_go_category_product_mapping:delete","shopgate_order:delete"],dependencies:["shopgate_go.editor","shopgate_go.viewer"]}}})},358:function(){let{Mixin:e}=Shopware;e.register("sg-order-key-value",{methods:{capitalize:e=>"string"!=typeof e?"":e.charAt(0).toUpperCase()+e.slice(1),hasSlotData:function(){return this.$slots.default&&this.$slots.default[0]&&(this.$slots.default[0].text&&this.$slots.default[0].text.length||this.$slots.default[0].children&&this.$slots.default[0].children.length)},isEmptyArray:function(e){return Array.isArray(e)&&0===e.length},isDataEmpty:function(e){return("undefined"===e||""===e||null===e||this.isEmptyArray(e))&&!this.hasSlotData()},normalizeValue:function(e){switch(e){case 0:case"0":case!1:return this.$tc("sg-base.no");case 1:case"1":case!0:return this.$tc("sg-base.yes")}return Array.isArray(e)&&e.length>0?e.join(", "):e},normalizeKey:function(e){return e.split("_").map(e=>this.capitalize(e)).join(" ")}}})},230:function(){let{Component:e,Context:t,Utils:n}=Shopware,{Criteria:a}=Shopware.Data;e.extend("sg-channel-language-single-select","sw-entity-single-select",{props:{salesChannelId:{required:!1,type:String,default:null},criteria:{type:Object,required:!1,default(){let e=new a(1,this.resultLimit);return e.addAssociation("languages"),e}}},watch:{salesChannelId(){this.loadData().then(e=>{e.has(this.value)||this.clearSelection()})}},methods:{loadSelected(){return this.value?(this.isLoading=!0,this.repository.get(this.salesChannelId,{...this.context,inheritance:!0},this.criteria).then(e=>(this.singleSelection=e.languages.get(this.value),this.isLoading=!1,this.singleSelection||this.setValue(e.languages.first()),this.singleSelection))):(this.resetOption&&(this.singleSelection={id:null,name:this.resetOption}),Promise.resolve())},loadData(){return this.isLoading=!0,this.repository.get(this.salesChannelId,{...this.context,inheritance:!0},this.criteria).then(e=>(this.isLoading=!1,this.displaySearch(e.languages),e.languages))},search(){if(this.criteria.term===this.searchTerm)return Promise.resolve();let e=this.loadData().then(()=>{this.resetActiveItem()});return this.$emit("search",e),e}}})},133:function(){let{Component:e,Utils:t}=Shopware;e.extend("sg-api-credentials-create","sg-api-credentials-detail",{template:"",beforeRouteEnter(e,n,a){e.name.includes("sg.api.credentials.create")&&!e.params.id&&(e.params.id=t.createId(),e.params.newItem=!0),a()},methods:{getEntity(){this.item=this.repository.create(Shopware.Context.api)},saveFinish(){this.isSaveSuccessful=!1,this.$router.push({name:"sg.api.credentials.detail",params:{id:this.item.id}})},onClickSave(){this.isLoading=!0,this.repository.save(this.item,Shopware.Context.api).then(()=>{this.handleSaveSuccess(),this.$router.push({name:"sg.api.credentials.detail",params:{id:this.item.id}})}).catch(e=>{this.handleSaveFailure(e)})}}})},414:function(){Shopware.Component.override("sw-order-detail",{computed:{orderCriteria(){let e=this.$super("orderCriteria");return e.addAssociation("shopgateOrder"),e}}})},113:function(e,t,n){var a=n(866);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("a3e34c00",a,!0,{})},634:function(e,t,n){var a=n(50);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("860acefe",a,!0,{})},474:function(e,t,n){var a=n(13);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("3d177341",a,!0,{})},346:function(e,t,n){"use strict";function a(e,t){for(var n=[],a={},i=0;i<t.length;i++){var s=t[i],l=s[0],r={id:e+":"+i,css:s[1],media:s[2],sourceMap:s[3]};a[l]?a[l].parts.push(r):n.push(a[l]={id:l,parts:[r]})}return n}n.d(t,{Z:function(){return h}});var i="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!i)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var s={},l=i&&(document.head||document.getElementsByTagName("head")[0]),r=null,o=0,d=!1,c=function(){},p=null,g="data-vue-ssr-id",u="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function h(e,t,n,i){d=n,p=i||{};var l=a(e,t);return m(l),function(t){for(var n=[],i=0;i<l.length;i++){var r=s[l[i].id];r.refs--,n.push(r)}t?m(l=a(e,t)):l=[];for(var i=0;i<n.length;i++){var r=n[i];if(0===r.refs){for(var o=0;o<r.parts.length;o++)r.parts[o]();delete s[r.id]}}}}function m(e){for(var t=0;t<e.length;t++){var n=e[t],a=s[n.id];if(a){a.refs++;for(var i=0;i<a.parts.length;i++)a.parts[i](n.parts[i]);for(;i<n.parts.length;i++)a.parts.push(b(n.parts[i]));a.parts.length>n.parts.length&&(a.parts.length=n.parts.length)}else{for(var l=[],i=0;i<n.parts.length;i++)l.push(b(n.parts[i]));s[n.id]={id:n.id,refs:1,parts:l}}}}function _(){var e=document.createElement("style");return e.type="text/css",l.appendChild(e),e}function b(e){var t,n,a=document.querySelector("style["+g+'~="'+e.id+'"]');if(a){if(d)return c;a.parentNode.removeChild(a)}if(u){var i=o++;t=f.bind(null,a=r||(r=_()),i,!1),n=f.bind(null,a,i,!0)}else t=y.bind(null,a=_()),n=function(){a.parentNode.removeChild(a)};return t(e),function(a){a?(a.css!==e.css||a.media!==e.media||a.sourceMap!==e.sourceMap)&&t(e=a):n()}}var v=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function f(e,t,n,a){var i=n?"":a.css;if(e.styleSheet)e.styleSheet.cssText=v(t,i);else{var s=document.createTextNode(i),l=e.childNodes;l[t]&&e.removeChild(l[t]),l.length?e.insertBefore(s,l[t]):e.appendChild(s)}}function y(e,t){var n=t.css,a=t.media,i=t.sourceMap;if(a&&e.setAttribute("media",a),p.ssrId&&e.setAttribute(g,t.id),i&&(n+="\n/*# sourceURL="+i.sources[0]+" */\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},t={};function n(a){var i=t[a];if(void 0!==i)return i.exports;var s=t[a]={id:a,exports:{}};return e[a](s,s.exports,n),s.exports}n.d=function(e,t){for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="bundles/sgateshopgatepluginsw6/",window?.__sw__?.assetPath&&(n.p=window.__sw__.assetPath+"/bundles/sgateshopgatepluginsw6/"),function(){"use strict";n(38),n(358),Shopware.Component.extend("is-shopgate","sw-condition-base",{template:'{% block sw_condition_value_content %}\n    \n    <sw-single-select name="is-shopgate"\n                      id="is-shopgate"\n                      size="medium"\n                      :options="selectValues"\n                      v-model:value="isShopgate"\n                      class="field--main"\n                      :disabled="disabled">\n    </sw-single-select>\n{% endblock %}\n',computed:{selectValues(){return[{label:this.$tc("global.sw-condition.condition.yes"),value:!0},{label:this.$tc("global.sw-condition.condition.no"),value:!1}]},isShopgate:{get(){return this.ensureValueExist(),null===this.condition.value.isShopgate&&(this.condition.value.isShopgate=!1),this.condition.value.isShopgate},set(e){this.ensureValueExist(),this.condition.value={...this.condition.value,isShopgate:e}}}}}),Shopware.Application.addServiceProviderDecorator("ruleConditionDataProviderService",e=>(e.addCondition("is_shopgate",{component:"is-shopgate",label:"Is Shopgate Mobile",scopes:["global"],group:"misc"}),e));var e={computed:{getPaymentName(){return this.getOrder().extensions.hasOwnProperty("shopgateOrder")?this.getOrder().extensions.shopgateOrder.receivedData.payment_infos.shopgate_payment_name:null},getShippingName(){return this.getOrder().extensions.hasOwnProperty("shopgateOrder")?this.getOrder().extensions.shopgateOrder.receivedData.shipping_infos.display_name:null}},methods:{getOrder(){return this.currentOrder?this.currentOrder:this.order?this.order:""}}};Shopware.Component.override("sw-order-general-info",{template:"{% block sw_order_detail_base_general_info_summary_sub_description %}\n    <div class=\"sw-order-general-info__summary-sub-description\">\n        {{ $tc('sw-order.generalTab.info.summary.on') }}\n        {{ dateFilter(order.orderDateTime, {\n            hour: '2-digit',\n            minute: '2-digit',\n            day: '2-digit',\n            month: '2-digit',\n            year: 'numeric'\n        }) }}\n\n        {{ $tc('sw-order.generalTab.info.summary.with') }}\n\n        <template v-if=\"getPaymentName\">\n            <dd>{{ getPaymentName }}</dd>\n        </template>\n        <template v-else>\n            {{ order.transactions.last().paymentMethod.translated.distinguishableName }}\n        </template>\n\n        <template v-if=\"getShippingName\">\n            <dt>{{ $tc('sw-order.detailDeliveries.labelShippingMethod') }}</dt>\n            <dd>{{ getShippingName }}</dd>\n        </template>\n        <template v-else>\n            <template v-if=\"order.deliveries.last()\">\n                {{ $tc('sw-order.generalTab.info.summary.and') }}\n                {{ order.deliveries.last().shippingMethod.translated.name }}\n            </template>\n        </template>\n\n    </div>\n{% endblock %}\n",computed:{...e.computed,dateFilter(){return Shopware.Filter.getByName("date")}},methods:{...e.methods}}),Shopware.Component.override("sw-order-detail-details",{template:'{% block sw_order_detail_details_payment_method_select %}\n    <template v-if="getPaymentName">\n        <sw-select-field\n                disabled\n                :label="$tc(\'sw-order.createBase.detailsFooter.labelPaymentMethod\')"\n                :placeholder="getPaymentName"\n        >\n            <option value="no-value">{{ getPaymentName }}</option>\n        </sw-select-field>\n    </template>\n    <template v-else>\n        {% parent %}\n    </template>\n{% endblock %}\n\n {% block sw_order_detail_details_shipping_method_select %}\n     <template v-if="getShippingName">\n         <sw-select-field\n                 disabled\n                 :label="$tc(\'sw-order.createBase.detailsFooter.labelShippingMethod\')"\n                 :placeholder="getShippingName"\n         >\n             <option value="no-value">{{ getShippingName }}</option>\n         </sw-select-field>\n     </template>\n     <template v-else>\n         {% parent %}\n     </template>\n {% endblock %}\n\n{% block sw_order_detail_details_custom_fields %}\n    {% parent %}\n    <sg-order-details v-if="acl.can(\'order.editor\') && order.extensions.shopgateOrder"\n                      :sgOrder="order.extensions.shopgateOrder"\n                      class="sg-order"\n    ></sg-order-details>\n{% endblock %}\n',computed:{...e.computed},methods:{...e.methods}}),n(414),n(474);let{Component:t}=Shopware;t.register("sg-order-details",{template:'{% block sg_order_detail_sections %}\n    <sw-card :title="$tc(\'sg-order.title\')" class="sw-order-delivery-metadata"\n             position-identifier="sg_order_details">\n        <sw-card-section>\n            <sw-container columns="repeat(auto-fit, minmax(180px, 1fr))" gap="0 25px">\n                <sw-description-list>\n                    {% block sg_order_details_order_number %}\n                        <sg-title-content :title="$tc(\'sg-order.number\')"\n                                          :content="sgOrder.shopgateOrderNumber">\n                        </sg-title-content>\n                    {% endblock %}\n                    {% block sg_order_details_shipping_sent %}\n                        <sg-title-content :title="$tc(\'sg-order.shipping.isSent\')"\n                                          :content="sgOrder.receivedData.is_shipping_completed">\n                        </sg-title-content>\n                    {% endblock %}\n                    {% block sg_order_details_shipping_blocked %}\n                        <sg-title-content :title="$tc(\'sg-order.shipping.isBlocked\')"\n                                          :content="sgOrder.receivedData.is_shipping_blocked">\n                        </sg-title-content>\n                    {% endblock %}\n                    {% block sg_order_details_payment_method %}\n                        <sg-title-content :title="$tc(\'sg-order.payment.method\')"\n                                          :content="sgOrder.receivedData.payment_method">\n                        </sg-title-content>\n                    {% endblock %}\n                    {% block sg_order_details_payment_transaction_number %}\n                        <sg-title-content :title="$tc(\'sg-order.payment.transactionNumber\')"\n                                          :content="sgOrder.receivedData.payment_transaction_number">\n                        </sg-title-content>\n                    {% endblock %}\n                    {% block sg_order_details_payment_sent %}\n                        <sg-title-content :title="$tc(\'sg-order.payment.isSent\')" :content="sgOrder.isPaid">\n                        </sg-title-content>\n                    {% endblock %}\n                </sw-description-list>\n                <sw-description-list>\n                    {% block sg_order_details_payment_infos %}\n                        <sg-title-content :title="$tc(\'sg-order.payment.info\')">\n                            <ul class="sg-list">\n                                \n                                <li is="sg-key-value"\n                                    v-for="(value, key) in sgOrder.receivedData.payment_infos"\n                                    v-bind:key="key"\n                                    v-bind:label="key"\n                                    v-bind:content="value"\n                                ></li>\n                            </ul>\n                        </sg-title-content>\n                    {% endblock %}\n                </sw-description-list>\n                <sw-description-list v-if="sgOrder.receivedData.custom_fields"\n                                     v-bind:class="{ \'sg-hidden\': sgOrder.receivedData.custom_fields.length === 0 }">\n                    {% block sg_order_details_custom_fields %}\n                        <sg-title-content :title="$tc(\'sg-order.customFields.title\')">\n                            <ul class="sg-list">\n                                \n                                <li is="sg-key-value"\n                                    v-for="(customField) in sgOrder.receivedData.custom_fields"\n                                    v-bind:key="customField.internal_field_name"\n                                    v-bind:label="customField.label"\n                                    v-bind:content="customField.value"\n                                ></li>\n                            </ul>\n                        </sg-title-content>\n                    {% endblock %}\n                </sw-description-list>\n            </sw-container>\n            <sw-alert variant="warning" v-if="hasShopgateCoupon">\n                <p>{{ $tc(\'sg-order.messages.shopgateCouponNotSupported\') }}</p>\n            </sw-alert>\n        </sw-card-section>\n    </sw-card>\n{% endblock %}\n',props:{sgOrder:{type:Object,required:!0,default(){return{}}}},computed:{hasShopgateCoupon:function(){let e=this.sgOrder?.receivedData?.items;return e&&e.filter(e=>"sg_coupon"===e.type).length}}});let{Component:a,Mixin:i}=Shopware;a.register("sg-title-content",{mixins:[i.getByName("sg-order-key-value")],template:'{% block sg_order_title_content %}\n    <div v-if="!isEmpty">\n        <dt>{{ normalizeTitle }}</dt>\n        <dd>{{ normalizeContent }}<slot></slot></dd>\n    </div>\n{% endblock %}\n\n',props:{title:{type:String,required:!0},content:{type:[String,Number,Boolean,Array],required:!1,default:null}},computed:{normalizeTitle:function(){let e=this.title;return this.normalizeKey(e)},normalizeContent:function(){let e=this.content;return this.normalizeValue(e)},isEmpty:function(){return this.isDataEmpty(this.content)}}}),n(634);let{Component:s,Mixin:l}=Shopware;s.register("sg-key-value",{mixins:[l.getByName("sg-order-key-value")],template:'<li v-if="!isEmpty"><span class="emphasize">{{ normalizeLabel }}</span>: {{ normalizeContent }}</li>',props:{label:{type:String,required:!0},content:{type:[String,Number,Boolean,Array],required:!0}},computed:{normalizeLabel:function(){let e=this.label;return this.normalizeKey(e)},normalizeContent:function(){let e=this.content;return this.normalizeValue(e)},isEmpty:function(){return this.isDataEmpty(this.content)}}});let{Component:r,Mixin:o}=Shopware,{Criteria:d}=Shopware.Data;r.register("sg-api-credentials-list",{template:'{% block sg_api_credentials_list %}\n    \n    <sw-page class="sg-api-credentials-list">\n        {% block sg_api_credentials_list_smart_bar_header %}\n            <template #smart-bar-header>\n                {% block sg_api_credentials_list_smart_bar_header_title %}\n                    <h2>\n                        {% block sg_api_credentials_list_smart_bar_header_title_text %}\n                            {{ $tc(\'sg-api-credentials.list.title\') }}\n                        {% endblock %}\n\n                        {% block sg_api_credentials_list_smart_bar_header_amount %}\n                            <span v-if="!isLoading" class="sw-page__smart-bar-amount">\n                        ({{ total }})\n                        </span>\n                        {% endblock %}\n                    </h2>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        {% block sg_api_credentials_list_smart_bar_actions %}\n            <template #smart-bar-actions>\n                {% block sg_api_credentials_list_smart_bar_actions_add %}\n                    <sw-button\n                            class="sg-api-credentials-list__button-create"\n                            variant="primary"\n                            :routerLink="{ name: \'sg.api.credentials.create\' }"\n                            :disabled="!acl.can(\'shopgate_go.creator\')"\n                            v-tooltip="{\n                                message: $tc(\'sw-privileges.tooltip.warning\'),\n                                disabled: acl.can(\'shopgate_go.creator\'),\n                                showOnDisabledElements: true\n                            }"\n                    >\n                        {{ $tc(\'sg-api-credentials.list.buttonAdd\') }}\n                    </sw-button>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        {% block sg_api_credentials_list_cardview %}\n            <template #content>\n                <div class="sg-api-credentials-list__content">\n                    {% block sg_api_credentials_list_content %}\n                        <sw-entity-listing\n                                class="sg-api-credentials-list-grid"\n                                v-if="items && total > 0"\n                                :items="items"\n                                :repository="credentialRepository"\n                                detail-route="sg.api.credentials.detail"\n                                :showSeleciton="true"\n                                :is-loading="isLoading"\n                                :columns="credentialColumns"\n                                :allow-view="acl.can(\'shopgate_go.viewer\')"\n                                :allow-edit="acl.can(\'shopgate_go.editor\')"\n                                :allow-delete="acl.can(\'shopgate_go.deleter\')"\n                                :show-selection="acl.can(\'shopgate_go.deleter\')"\n                        >\n\n                            {% block sg_api_credentials_list_grid_columns_active %}\n                                <template #column-active="{ item, isInlineEdit }">\n                                    {% block sg_api_credentials_list_grid_columns_active_inline_edit %}\n                                        <template v-if="isInlineEdit">\n                                            <sw-checkbox-field v-model="item.active"></sw-checkbox-field>\n                                        </template>\n                                    {% endblock %}\n\n                                    {% block sg_api_credentials_list_grid_columns_active_content %}\n                                        <template v-else>\n                                            <sw-icon v-if="item.active" name="regular-checkmark-xs" small\n                                                     class="is--active" color="#1abc9c"></sw-icon>\n                                            <sw-icon v-else name="regular-times-xs" small\n                                                     class="is--inactive" color="#fc427b" size="13"></sw-icon>\n                                        </template>\n                                    {% endblock %}\n                                </template>\n                            {% endblock %}\n\n                            <template #pagination>\n                                {% block sw_order_list_grid_pagination %}\n                                    <sw-pagination :page="page"\n                                                   :limit="limit"\n                                                   :total="total"\n                                                   :total-visible="7"\n                                                   @page-change="onPageChange">\n                                    </sw-pagination>\n                                {% endblock %}\n                            </template>\n\n                        </sw-entity-listing>\n                    {% endblock %}\n\n                    {% block sg_api_credentials_list_empty_state %}\n                        <sw-empty-state v-if="!isLoading && total === 0"\n                                        :title="$tc(\'sg-api-credentials.list.contentEmpty\')"></sw-empty-state>\n                    {% endblock %}\n\n                </div>\n            </template>\n        {% endblock %}\n\n        {% block sg_api_credentials_list_sidebar %}\n            <template #sidebar>\n                <sw-sidebar class="sg-api-credentials-list__sidebar">\n                    {% block sg_api_credentials_list_sidebar_item %}\n                        <sw-sidebar-item\n                                icon="solid-sync"\n                                :title="$tc(\'sg-api-credentials.list.titleSidebarItemRefresh\')"\n                                @click="onRefresh">\n                        </sw-sidebar-item>\n                    {% endblock %}\n                </sw-sidebar>\n            </template>\n        {% endblock %}\n\n    </sw-page>\n{% endblock %}\n',inject:["repositoryFactory","acl"],mixins:[o.getByName("listing"),o.getByName("notification")],data(){return{items:null,isLoading:!1,showDeleteModal:!1,repository:null,total:0}},metaInfo(){return{title:this.$createTitle()}},computed:{credentialRepository(){return this.repositoryFactory.create("shopgate_api_credentials")},credentialColumns(){return this.getColumns()}},methods:{getList(){this.isLoading=!0;let e=new d(this.page,this.limit);e.setTerm(this.term),e.addAssociation("language"),e.addAssociation("salesChannel"),this.credentialRepository.search(e,Shopware.Context.api).then(e=>(this.total=e.total,this.items=e,this.isLoading=!1,e)).catch(()=>{this.isLoading=!1})},onDelete(e){this.showDeleteModal=e},onCloseDeleteModal(){this.showDeleteModal=!1},getColumns(){return[{property:"active",label:"sg-api-credentials.general.active",allowResize:!0,align:"center"},{property:"salesChannel.name",label:"sg-api-credentials.general.salesChannel",routerLink:"sg.api.credentials.detail",allowResize:!0,primary:!0},{property:"language.name",label:"sg-api-credentials.general.language",routerLink:"sg.api.credentials.detail",allowResize:!0},{property:"customerNumber",label:"sg-api-credentials.general.customerNumber",routerLink:"sg.api.credentials.detail",allowResize:!0},{property:"shopNumber",label:"sg-api-credentials.general.shopNumber",routerLink:"sg.api.credentials.detail",allowResize:!0},{property:"apiKey",label:"sg-api-credentials.general.apiKey",routerLink:"sg.api.credentials.detail",allowResize:!0}]}}}),n(133);let{Component:c,Mixin:p}=Shopware,{Criteria:g}=Shopware.Data;c.register("sg-api-credentials-detail",{template:'{% block sg_api_credentials_detail %}\n    \n    <sw-page class="sg-api-credentials-detail" v-if="item">\n\n        {% block sg_api_credentials_detail_smart_bar_header %}\n            <template #smart-bar-header>\n                {% block sg_api_credentials_detail_smart_bar_header_title %}\n                    <h2>{{ $tc(\'sg-api-credentials.detail.title\') }}</h2>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        {% block sg_api_credentials_detail_smart_bar_actions %}\n            <template #smart-bar-actions>\n                {% block sg_api_credentials_detail_smart_bar_actions_cancel %}\n                    <sw-button :disabled="item.isLoading" :routerLink="{ name: \'sg.api.credentials.index\' }">\n                        {{ $tc(\'sg-api-credentials.detail.buttonCancel\') }}\n                    </sw-button>\n                {% endblock %}\n\n                {% block sg_api_credentials_detail_smart_bar_actions_save %}\n                    <sw-button-process\n                            v-tooltip.bottom="tooltipSave"\n                            class="sg-api-credentials-detail__save-action"\n                            :isLoading="isLoading"\n                            :processSuccess="processSuccess"\n                            variant="primary"\n                            :disabled="!allowSaving || isLoading || !item.salesChannelId || !item.languageId || !item.shopNumber || !item.customerNumber || !item.apiKey"\n                            {% if VUE3 %}\n                            @update:process-success="saveFinish"\n                            {% else %}\n                            @process-finish="saveFinish"\n                            {% endif %}\n                            @click="onClickSave">\n                        {{ $tc(\'sg-api-credentials.detail.buttonSave\') }}\n                    </sw-button-process>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        {% block sg_api_credentials_detail_content %}\n            <template #content>\n                <sw-card-view>\n                    {% block sg_api_credentials_detail_content_partner_card %}\n                        <sw-card :is-loading="isLoading" v-if="item"\n                                 :title="$tc(\'sg-api-credentials.detail.cardTitle\')"\n                                 position-identifier="sg_api_credentials_detail_content">\n\n                            {% block sg_api_credentials_detail_content_active %}\n                                <sw-switch-field v-model:value="item.active"\n                                                 class="sg-api-credentials-detail__item_active"\n                                                 :label="$tc(\'sg-api-credentials.general.active\')"\n                                                 :help-text="$tc(\'sg-api-credentials.detail.fieldTitleHelpTextActive\')">\n                                </sw-switch-field>\n                            {% endblock %}\n\n                            {% block sg_api_credentials_detail_content_salesChannels %}\n                                <sw-entity-single-select v-model:value="item.salesChannelId"\n                                                         name="sg-field--api-credentials-salesChannelId"\n                                                         required\n                                                         entity="sales_channel"\n                                                         class="sg-api-credentials-detail__item_sales_channels"\n                                                         :label="$tc(\'sg-api-credentials.general.salesChannel\')">\n                                </sw-entity-single-select>\n                            {% endblock %}\n\n                            {% block sg_api_credentials_detail_content_language %}\n                                <sg-channel-language-single-select v-model:value="item.languageId"\n                                                                   name="sg-field--api-credentials-languageId"\n                                                                   required\n                                                                   :disabled="!item.salesChannelId"\n                                                                   entity="sales_channel"\n                                                                   class="sg-api-credentials-detail__item_language"\n                                                                   :salesChannelId="item.salesChannelId"\n                                                                   :label="$tc(\'sg-api-credentials.general.language\')">\n                                </sg-channel-language-single-select>\n                            {% endblock %}\n\n                            {% block sg_api_credentials_detail_content_customerNumber %}\n                                <sw-text-field v-model:value.number="item.customerNumber"\n                                               name="sg-field--api-credentials-customerNumber"\n                                               type="number"\n                                               required\n                                               class="sg-api-credentials-detail__item_customerNumber"\n                                               :label="$tc(\'sg-api-credentials.general.customerNumber\')"\n                                               :placeholder="$tc(\'sg-api-credentials.detail.fieldTitlePlaceholderCustomerNumber\')">\n                                </sw-text-field>\n                            {% endblock %}\n\n                            {% block sg_api_credentials_detail_content_shopNumber %}\n                                <sw-text-field v-model:value.number="item.shopNumber"\n                                               name="sg-field--api-credentials-shopNumber"\n                                               type="number"\n                                               required\n                                               class="sg-api-credentials-detail__item_shop_number"\n                                               :label="$tc(\'sg-api-credentials.general.shopNumber\')"\n                                               :placeholder="$tc(\'sg-api-credentials.detail.fieldTitlePlaceholderShopNumber\')">\n                                </sw-text-field>\n                            {% endblock %}\n\n                            {% block sg_api_credentials_detail_content_apiKey %}\n                                <sw-text-field v-model:value="item.apiKey"\n                                               name="sg-field--api-credentials-apiKey"\n                                               required\n                                               class="sg-api-credentials-detail__item_api_key"\n                                               :label="$tc(\'sg-api-credentials.general.apiKey\')"\n                                               :placeholder="$tc(\'sg-api-credentials.detail.fieldTitlePlaceholderApiKey\')">\n                                </sw-text-field>\n                            {% endblock %}\n\n                        </sw-card>\n                    {% endblock %}\n                </sw-card-view>\n            </template>\n        {% endblock %}\n\n    </sw-page>\n{% endblock %}\n',inject:["repositoryFactory","acl"],mixins:[p.getByName("notification")],data(){return{item:null,repository:null,isLoading:!1,processSuccess:!1,isSaveSuccessful:!1,channelRepository:null,languageOptions:[{id:null,name:this.$tc("sg-api-credentials.detail.noLanguages")}],channelLanguageMap:null}},metaInfo(){return{title:this.$createTitle()}},created(){this.createdComponent()},watch:{"item.salesChannelId":function(e){this.channelLanguageMap&&(this.languageOptions=this.channelLanguageMap[e])}},computed:{tooltipSave(){if(!this.allowSaving)return{message:this.$tc("sw-privileges.tooltip.warning"),disabled:this.allowSaving,showOnDisabledElements:!0};let e=this.$device.getSystemKey();return{message:`${e} + S`,appearance:"light"}},allowSaving(){return this.acl.can("shopgate_go.editor")}},methods:{createdComponent(){this.repository=this.repositoryFactory.create("shopgate_api_credentials"),this.channelResository=this.repositoryFactory.create("sales_channel"),this.createChannelLanguageMap(),this.getEntity()},createChannelLanguageMap(){let e=new g;e.addAssociation("languages"),this.channelResository.search(e,Shopware.Context.api).then(e=>{this.channelLanguageMap=this.languagesToMap(e)})},getEntity(){let e=new g;e.addAssociation("salesChannel.languages"),this.repository.get(this.$route.params.id,Shopware.Context.api,e).then(e=>{this.item=e,this.languageOptions=e.salesChannel.languages})},languagesToMap(e){let t=[];return e.forEach(({id:e,languages:n})=>t[e]=n),t},onClickSave(){this.isLoading=!0,this.isSaveSuccessful=!1,this.repository.save(this.item,Shopware.Context.api).then(()=>{this.getEntity(),this.processSuccess=!0,this.handleSaveSuccess()}).catch(e=>{this.handleSaveFailure(e)})},handleSaveSuccess(){this.isLoading=!1,this.createNotificationSuccess({title:this.$tc("sg-api-credentials.detail.titleNotificationSuccess"),message:this.$tc("sg-api-credentials.detail.messageSaveSuccess")})},handleSaveFailure(e){this.isLoading=!1,500===e.response.status?this.createNotificationError({title:this.$tc("sg-api-credentials.detail.titleNotificationError"),message:this.$tc("sg-api-credentials.detail.messageSaveUniqueError")}):this.createNotificationError({title:this.$tc("sg-api-credentials.detail.titleNotificationError"),message:this.$tc("sg-api-credentials.detail.messageSaveError")})},saveFinish(){this.processSuccess=!1}}}),n(230);var u=JSON.parse('{"sg-api-credentials":{"general":{"mainMenuItemGeneral":"Shopgate API","description":"Konfigurieren Sie Ihre API Zugangsdaten","active":"Aktiv","salesChannel":"Verkaufskanal (Sales Channel)","language":"Sprache","customerNumber":"Kundennummer","shopNumber":"Shopnummer","apiKey":"API Key"},"list":{"fieldProcessNotRun":"Not erstellt","fieldProcessSucceed":"Erfolgreich erstellt","fieldProcessFailed":"Fehlerhaft","fieldProcessQueued":"In Warteschalnge","title":"Shopgate API Credentials","buttonDelete":"L\xf6schen","modalTitleDelete":"L\xf6schen","contentEmpty":"Es wurden keine API Zugangsdaten eingef\xfcgt","textDeleteConfirm":"M\xf6chten Sie die API Zugangsdaten l\xf6schen?","buttonCancel":"Abbrechen","buttonAdd":"Hinzuf\xfcgen","contextMenuEdit":"Bearbeiten","textHeadline":"API Zugangsdaten gespeichert","titleSidebarItemRefresh":"Aktualisieren"},"detail":{"title":"API Zugangsdaten gespeichert","buttonCancel":"Abbrechen","buttonSave":"Speichern","cardTitle":"Einstellungen","fieldTitleHelpTextActive":"Aktive API Verbindung mit diesen Zugangsdaten","fieldTitlePlaceholderCustomerNumber":"123456","fieldTitlePlaceholderShopNumber":"123456","fieldTitlePlaceholderApiKey":"11111111111111111111111","titleNotificationError":"Fehler","titleNotificationSuccess":"Erfolgreich","messageSaveError":"Zugangsdaten k\xf6nnen nicht gespeichert werden.","messageSaveUniqueError":"Bitte hinterlegen Sie eine eindeutige Shop-Nummer!","messageSaveSuccess":"Zugangsdaten wurden gespeichert.","noLanguages":"Keine Sprache ausgew\xe4hlt, bitte Verkaufskanal (Sales Channel) ausw\xe4hlen."}},"sw-privileges":{"permissions":{"parents":{"shopgate":"Shopgate"},"shopgate_go":{"label":"Modul (Go)"}}}}'),h=JSON.parse('{"sg-api-credentials":{"general":{"mainMenuItemGeneral":"Shopgate API","description":"Configure your API credential sets","active":"Active","salesChannel":"SalesChannel","language":"Language","customerNumber":"Customer Number","shopNumber":"Shop Number","apiKey":"API Key"},"list":{"fieldProcessNotRun":"Not created","fieldProcessSucceed":"Successfully created","fieldProcessFailed":"Failed","fieldProcessQueued":"Queued","title":"Shopgate API Credentials","buttonDelete":"Delete","modalTitleDelete":"Delete","contentEmpty":"No API credentials exist","textDeleteConfirm":"Do you want to delete the API credential set?","buttonCancel":"Cancel","buttonAdd":"Add","contextMenuEdit":"Edit","textHeadline":"API credential set","titleSidebarItemRefresh":"Refresh"},"detail":{"title":"API Credentials Set","buttonCancel":"Cancel","buttonSave":"Save","cardTitle":"Settings","fieldTitleHelpTextActive":"Activate API connection using these credentials","fieldTitlePlaceholderCustomerNumber":"123456","fieldTitlePlaceholderShopNumber":"123456","fieldTitlePlaceholderApiKey":"11111111111111111111111","titleNotificationError":"Error","titleNotificationSuccess":"Success","messageSaveError":"Credentials could not be saved.","messageSaveUniqueError":"Please make sure your Shop Number is unique!","messageSaveSuccess":"Credentials have been saved.","noLanguages":"No languages are defined, please select a Sales Channel"}},"sw-privileges":{"permissions":{"parents":{"shopgate":"Shopgate"},"shopgate_go":{"label":"Module (Go)"}}}}');let{Module:m}=Shopware;m.register("sg-api-credentials",{type:"plugin",name:"sg-api-credentials",title:"sg-api-credentials.general.mainMenuItemGeneral",description:"sg-api-credentials.general.description",color:"#9AA8B5",icon:"regular-shopping-bag",snippets:{"de-DE":u,"en-GB":h},routes:{index:{component:"sg-api-credentials-list",path:"index",meta:{parentPath:"sw.settings.index",privilege:"shopgate_go.viewer"}},detail:{component:"sg-api-credentials-detail",path:"detail/:id",meta:{parentPath:"sg.api.credentials.index",privilege:"shopgate_go.viewer"}},create:{component:"sg-api-credentials-create",path:"create",meta:{parentPath:"sg.api.credentials.index",privilege:"shopgate_go.creator"}}},settingsItem:{name:"sg-api-credentials",to:"sg.api.credentials.index",label:"sg-api-credentials.general.mainMenuItemGeneral",group:"plugins",icon:"regular-shopping-bag",privilege:"shopgate_go.viewer"}}),Shopware.Component.override("sw-settings-salutation-detail",{template:"\n{% block sw_settings_salutation_detail_content_card_letter_name %}\n    {% parent %}\n    <sw-form-field-renderer\n            v-model:value=\"sgValue\"\n            class=\"sw-settings-salutation-detail__shopgateSalutation\"\n            type=\"single-select\"\n            :config=\"{\n                label: $tc('sg-salutations.detail.genderLabel'),\n                options: [\n                    { value: null, label: $tc('sg-salutations.detail.genderUndefined') },\n                    { value: 'm', label: $tc('sg-salutations.detail.genderMale') },\n                    { value: 'f', label: $tc('sg-salutations.detail.genderFemale') },\n                    { value: 'd', label: $tc('sg-salutations.detail.genderDiverse') }\n                ]\n            }\"\n            :disabled=\"!acl.can('shopgate_go.editor')\"\n            :help-text=\"$tc('sg-salutations.detail.genderTooltip')\">\n    </sw-form-field-renderer>\n{% endblock %}\n",computed:{sgValue:{get(){return this.salutation.extensions.shopgateSalutation?this.salutation.extensions.shopgateSalutation.value:null},set(e){if(this.salutation.extensions.shopgateSalutation)this.salutation.extensions.shopgateSalutation.value=e;else{let t=this.repositoryFactory.create("shopgate_go_salutations").create(Shopware.Context.api);t.shopwareSalutationId=this.salutationId,t.value=e,this.salutation.extensions={shopgateSalutation:t}}}}}}),n(113),Shopware.Component.register("sg-custom-field-type-select",{template:'{% block sg_custom_field_type_select %}\n<sw-container class="sg-custom-field-type-select">\n\n    {% block sg_custom_field_type_select_multi_select %}\n        \n        <sw-multi-select\n            :value="selectedRelationEntityNames"\n            :options="relationEntityNames"\n            @item-add="onAddRelation"\n            @item-remove="onRemoveRelation"\n        />\n    {% endblock %}\n\n</sw-container>\n{% endblock %}\n',compatConfig:Shopware.compatConfig,inject:["customFieldDataProviderService"],props:{value:{type:Array,required:!0,default(){return[]}}},data(){return{currentValue:this.value.filter(e=>null!==e)}},computed:{currentValue:{get(){return this.value},set(e){this.$emit("update:value",e)}},selectedRelationEntityNames(){return this.currentValue?this.currentValue.map(e=>e.value).filter(e=>null!==e):[]},relationEntityNames(){return this.value?this.customFieldDataProviderService.getEntityNames().map(e=>{let t={};return t.value=e,this.$te(`global.entities.${e}`)?t.label=this.$tc(`global.entities.${e}`,2,this.$i18n.locale):t.label=e,t}):[]}},watch:{currentValue:{deep:!0,handler(e){this.$emit("update:value",e)}}},methods:{onAddRelation(e){this.currentValue.push(e)},onRemoveRelation(e){let t=this.currentValue.findIndex(t=>t.value===e.value);-1!==t&&this.currentValue.splice(t,1)}}})}()})();