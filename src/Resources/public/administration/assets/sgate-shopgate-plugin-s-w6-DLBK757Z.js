Shopware.Service("privileges").addPrivilegeMappingEntry({category:"permissions",parent:"shopgate",key:"shopgate_go",roles:{viewer:{privileges:["sales_channel:read","language:read","locale:read","shopgate_api_credentials:read","shopgate_go_salutations:read","shopgate_go_category_product_mapping:read","shopgate_order:read"],dependencies:[]},editor:{privileges:["shopgate_api_credentials:update","shopgate_go_salutations:update","shopgate_go_category_product_mapping:update","shopgate_order:update"],dependencies:["shopgate_go.viewer"]},creator:{privileges:["shopgate_api_credentials:create","shopgate_go_salutations:create","shopgate_go_category_product_mapping:create","shopgate_order:create"],dependencies:["shopgate_go.editor","shopgate_go.viewer"]},deleter:{privileges:["shopgate_api_credentials:delete","shopgate_go_salutations:delete","shopgate_go_category_product_mapping:delete","shopgate_order:delete"],dependencies:["shopgate_go.editor","shopgate_go.viewer"]}}});const{Mixin:r}=Shopware;r.register("sg-order-key-value",{methods:{capitalize:e=>typeof e!="string"?"":e.charAt(0).toUpperCase()+e.slice(1),hasSlotData:function(){return this.$slots.default&&this.$slots.default[0]&&(this.$slots.default[0].text&&this.$slots.default[0].text.length||this.$slots.default[0].children&&this.$slots.default[0].children.length)},isEmptyArray:function(e){return Array.isArray(e)&&e.length===0},isDataEmpty:function(e){return(e==="undefined"||e===""||e===null||this.isEmptyArray(e))&&!this.hasSlotData()},normalizeValue:function(e){switch(e){case 0:case"0":case!1:return this.$tc("sg-base.no");case 1:case"1":case!0:return this.$tc("sg-base.yes")}return Array.isArray(e)&&e.length>0?e.join(", "):e},normalizeKey:function(e){return e.split("_").map(t=>this.capitalize(t)).join(" ")}}});const o='{% block sw_condition_value_content %} <sw-single-select name="is-shopgate" id="is-shopgate" size="medium" :options="selectValues" v-model:value="isShopgate" class="field--main" :disabled="disabled"> </sw-single-select> {% endblock %}';Shopware.Component.extend("is-shopgate","sw-condition-base",{template:o,computed:{selectValues(){return[{label:this.$tc("global.default.yes"),value:!0},{label:this.$tc("global.default.no"),value:!1}]},isShopgate:{get(){return this.ensureValueExist(),this.condition.value.isShopgate===null&&(this.condition.value.isShopgate=!1),this.condition.value.isShopgate},set(e){this.ensureValueExist(),this.condition.value={...this.condition.value,isShopgate:e}}}}});Shopware.Application.addServiceProviderDecorator("ruleConditionDataProviderService",e=>(e.addCondition("is_shopgate",{component:"is-shopgate",label:"sg.condition.is-shopgate",scopes:["global"],group:"misc"}),e));const c=`{% block sw_order_detail_base_general_info_summary_sub_description %} <div class="sw-order-general-info__summary-sub-description"> {{ $tc('sw-order.generalTab.info.summary.on') }} {{ dateFilter(order.orderDateTime, { hour: '2-digit', minute: '2-digit', day: '2-digit', month: '2-digit', year: 'numeric' }) }} {{ $tc('sw-order.generalTab.info.summary.with') }} <template v-if="getPaymentName"> <dd>{{ getPaymentName }}</dd> </template> <template v-else> {{ order.transactions.last().paymentMethod.translated.distinguishableName }} </template> <template v-if="getShippingName"> <dt>{{ $tc('sw-order.detailDeliveries.labelShippingMethod') }}</dt> <dd>{{ getShippingName }}</dd> </template> <template v-else> <template v-if="order.deliveries.last()"> {{ $tc('sw-order.generalTab.info.summary.and') }} {{ order.deliveries.last().shippingMethod.translated.name }} </template> </template> </div> {% endblock %}`,i={computed:{getPaymentName(){return this.getOrder().extensions.hasOwnProperty("shopgateOrder")?this.getOrder().extensions.shopgateOrder.receivedData.payment_infos.shopgate_payment_name:null},getShippingName(){return this.getOrder().extensions.hasOwnProperty("shopgateOrder")?this.getOrder().extensions.shopgateOrder.receivedData.shipping_infos.display_name:null}},methods:{getOrder(){return this.currentOrder?this.currentOrder:this.order?this.order:""}}};Shopware.Component.override("sw-order-general-info",{template:c,computed:{...i.computed,dateFilter(){return Shopware.Filter.getByName("date")}},methods:{...i.methods}});const d=`{% block sw_order_detail_details_payment_method_select %} <template v-if="getPaymentName"> <sw-select-field disabled :label="$tc('sw-order.createBase.detailsFooter.labelPaymentMethod')" :placeholder="getPaymentName" > <option value="no-value">{{ getPaymentName }}</option> </sw-select-field> </template> <template v-else> {% parent %} </template> {% endblock %} {% block sw_order_detail_details_shipping_method_select %} <template v-if="getShippingName"> <sw-select-field disabled :label="$tc('sw-order.createBase.detailsFooter.labelShippingMethod')" :placeholder="getShippingName" > <option value="no-value">{{ getShippingName }}</option> </sw-select-field> </template> <template v-else> {% parent %} </template> {% endblock %} {% block sw_order_detail_details_custom_fields %} {% parent %} <sg-order-details v-if="acl.can('order.editor') && order.extensions.shopgateOrder" :sgOrder="order.extensions.shopgateOrder" class="sg-order" ></sg-order-details> {% endblock %}`;Shopware.Component.override("sw-order-detail-details",{template:d,computed:{...i.computed},methods:{...i.methods}});Shopware.Component.override("sw-order-detail",{computed:{orderCriteria(){const e=this.$super("orderCriteria");return e.addAssociation("shopgateOrder"),e}}});const p=`{% block sg_order_detail_sections %} <sw-card :title="$tc('sg-order.title')" class="sw-order-delivery-metadata" position-identifier="sg_order_details"> <sw-card-section> <sw-container columns="repeat(auto-fit, minmax(180px, 1fr))" gap="0 25px"> <sw-description-list> {% block sg_order_details_order_number %} <sg-title-content :title="$tc('sg-order.number')" :content="sgOrder.shopgateOrderNumber"> </sg-title-content> {% endblock %} {% block sg_order_details_shipping_sent %} <sg-title-content :title="$tc('sg-order.shipping.isSent')" :content="sgOrder.receivedData.is_shipping_completed"> </sg-title-content> {% endblock %} {% block sg_order_details_shipping_blocked %} <sg-title-content :title="$tc('sg-order.shipping.isBlocked')" :content="sgOrder.receivedData.is_shipping_blocked"> </sg-title-content> {% endblock %} {% block sg_order_details_payment_method %} <sg-title-content :title="$tc('sg-order.payment.method')" :content="sgOrder.receivedData.payment_method"> </sg-title-content> {% endblock %} {% block sg_order_details_payment_transaction_number %} <sg-title-content :title="$tc('sg-order.payment.transactionNumber')" :content="sgOrder.receivedData.payment_transaction_number"> </sg-title-content> {% endblock %} {% block sg_order_details_payment_sent %} <sg-title-content :title="$tc('sg-order.payment.isSent')" :content="sgOrder.isPaid"> </sg-title-content> {% endblock %} </sw-description-list> <sw-description-list> {% block sg_order_details_payment_infos %} <sg-title-content :title="$tc('sg-order.payment.info')"> <ul class="sg-list"> <li is="sg-key-value" v-for="(value, key) in sgOrder.receivedData.payment_infos" v-bind:key="key" v-bind:label="key" v-bind:content="value" ></li> </ul> </sg-title-content> {% endblock %} </sw-description-list> <sw-description-list v-if="sgOrder.receivedData.custom_fields" v-bind:class="{ 'sg-hidden': sgOrder.receivedData.custom_fields.length === 0 }"> {% block sg_order_details_custom_fields %} <sg-title-content :title="$tc('sg-order.customFields.title')"> <ul class="sg-list"> <li is="sg-key-value" v-for="(customField) in sgOrder.receivedData.custom_fields" v-bind:key="customField.internal_field_name" v-bind:label="customField.label" v-bind:content="customField.value" ></li> </ul> </sg-title-content> {% endblock %} </sw-description-list> </sw-container> <sw-alert variant="warning" v-if="hasShopgateCoupon"> <p>{{ $tc('sg-order.messages.shopgateCouponNotSupported') }}</p> </sw-alert> </sw-card-section> </sw-card> {% endblock %}`,{Component:g}=Shopware;g.register("sg-order-details",{template:p,props:{sgOrder:{type:Object,required:!0,default(){return{}}}},computed:{hasShopgateCoupon:function(){var t,a;const e=(a=(t=this.sgOrder)==null?void 0:t.receivedData)==null?void 0:a.items;return e&&e.filter(s=>s.type==="sg_coupon").length}}});const u='{% block sg_order_title_content %} <div v-if="!isEmpty"> <dt>{{ normalizeTitle }}</dt> <dd>{{ normalizeContent }}<slot></slot></dd> </div> {% endblock %}',{Component:h,Mixin:m}=Shopware;h.register("sg-title-content",{mixins:[m.getByName("sg-order-key-value")],template:u,props:{title:{type:String,required:!0},content:{type:[String,Number,Boolean,Array],required:!1,default:null}},computed:{normalizeTitle:function(){const e=this.title;return this.normalizeKey(e)},normalizeContent:function(){const e=this.content;return this.normalizeValue(e)},isEmpty:function(){return this.isDataEmpty(this.content)}}});const{Component:_,Mixin:b}=Shopware;_.register("sg-key-value",{mixins:[b.getByName("sg-order-key-value")],template:'<li v-if="!isEmpty"><span class="emphasize">{{ normalizeLabel }}</span>: {{ normalizeContent }}</li>',props:{label:{type:String,required:!0},content:{type:[String,Number,Boolean,Array],required:!0}},computed:{normalizeLabel:function(){const e=this.label;return this.normalizeKey(e)},normalizeContent:function(){const e=this.content;return this.normalizeValue(e)},isEmpty:function(){return this.isDataEmpty(this.content)}}});const v=`{% block sg_api_credentials_list %} <sw-page class="sg-api-credentials-list"> {% block sg_api_credentials_list_smart_bar_header %} <template #smart-bar-header> {% block sg_api_credentials_list_smart_bar_header_title %} <h2> {% block sg_api_credentials_list_smart_bar_header_title_text %} {{ $tc('sg-api-credentials.list.title') }} {% endblock %} {% block sg_api_credentials_list_smart_bar_header_amount %} <span v-if="!isLoading" class="sw-page__smart-bar-amount"> ({{ total }}) </span> {% endblock %} </h2> {% endblock %} </template> {% endblock %} {% block sg_api_credentials_list_smart_bar_actions %} <template #smart-bar-actions> {% block sg_api_credentials_list_smart_bar_actions_add %} <sw-button class="sg-api-credentials-list__button-create" variant="primary" :routerLink="{ name: 'sg.api.credentials.create' }" :disabled="!acl.can('shopgate_go.creator')" v-tooltip="{ message: $tc('sw-privileges.tooltip.warning'), disabled: acl.can('shopgate_go.creator'), showOnDisabledElements: true }" > {{ $tc('sg-api-credentials.list.buttonAdd') }} </sw-button> {% endblock %} </template> {% endblock %} {% block sg_api_credentials_list_cardview %} <template #content> <div class="sg-api-credentials-list__content"> {% block sg_api_credentials_list_content %} <sw-entity-listing class="sg-api-credentials-list-grid" v-if="items && total > 0" :items="items" :repository="credentialRepository" detail-route="sg.api.credentials.detail" :showSeleciton="true" :is-loading="isLoading" :columns="credentialColumns" :allow-view="acl.can('shopgate_go.viewer')" :allow-edit="acl.can('shopgate_go.editor')" :allow-delete="acl.can('shopgate_go.deleter')" :show-selection="acl.can('shopgate_go.deleter')" > {% block sg_api_credentials_list_grid_columns_active %} <template #column-active="{ item, isInlineEdit }"> {% block sg_api_credentials_list_grid_columns_active_inline_edit %} <template v-if="isInlineEdit"> <sw-checkbox-field v-model="item.active"></sw-checkbox-field> </template> {% endblock %} {% block sg_api_credentials_list_grid_columns_active_content %} <template v-else> <sw-icon v-if="item.active" name="regular-checkmark-xs" small class="is--active" color="#1abc9c"></sw-icon> <sw-icon v-else name="regular-times-xs" small class="is--inactive" color="#fc427b" size="13"></sw-icon> </template> {% endblock %} </template> {% endblock %} <template #pagination> {% block sw_order_list_grid_pagination %} <sw-pagination :page="page" :limit="limit" :total="total" :total-visible="7" @page-change="onPageChange"> </sw-pagination> {% endblock %} </template> </sw-entity-listing> {% endblock %} {% block sg_api_credentials_list_empty_state %} <sw-empty-state v-if="!isLoading && total === 0" :title="$tc('sg-api-credentials.list.contentEmpty')"></sw-empty-state> {% endblock %} </div> </template> {% endblock %} {% block sg_api_credentials_list_sidebar %} <template #sidebar> <sw-sidebar class="sg-api-credentials-list__sidebar"> {% block sg_api_credentials_list_sidebar_item %} <sw-sidebar-item icon="solid-sync" :title="$tc('sg-api-credentials.list.titleSidebarItemRefresh')" @click="onRefresh"> </sw-sidebar-item> {% endblock %} </sw-sidebar> </template> {% endblock %} </sw-page> {% endblock %}`,{Component:f,Mixin:l}=Shopware,{Criteria:y}=Shopware.Data;f.register("sg-api-credentials-list",{template:v,inject:["repositoryFactory","acl"],mixins:[l.getByName("listing"),l.getByName("notification")],data(){return{items:null,isLoading:!1,showDeleteModal:!1,repository:null,total:0}},metaInfo(){return{title:this.$createTitle()}},computed:{credentialRepository(){return this.repositoryFactory.create("shopgate_api_credentials")},credentialColumns(){return this.getColumns()}},methods:{getList(){this.isLoading=!0;const e=new y(this.page,this.limit);e.setTerm(this.term),e.addAssociation("language"),e.addAssociation("salesChannel"),this.credentialRepository.search(e,Shopware.Context.api).then(t=>(this.total=t.total,this.items=t,this.isLoading=!1,t)).catch(()=>{this.isLoading=!1})},onDelete(e){this.showDeleteModal=e},onCloseDeleteModal(){this.showDeleteModal=!1},getColumns(){return[{property:"active",label:"sg-api-credentials.general.active",allowResize:!0,align:"center"},{property:"salesChannel.name",label:"sg-api-credentials.general.salesChannel",routerLink:"sg.api.credentials.detail",allowResize:!0,primary:!0},{property:"language.name",label:"sg-api-credentials.general.language",routerLink:"sg.api.credentials.detail",allowResize:!0},{property:"customerNumber",label:"sg-api-credentials.general.customerNumber",routerLink:"sg.api.credentials.detail",allowResize:!0},{property:"shopNumber",label:"sg-api-credentials.general.shopNumber",routerLink:"sg.api.credentials.detail",allowResize:!0},{property:"apiKey",label:"sg-api-credentials.general.apiKey",routerLink:"sg.api.credentials.detail",allowResize:!0}]}}});const{Component:w,Utils:S}=Shopware;w.extend("sg-api-credentials-create","sg-api-credentials-detail",{template:"",beforeRouteEnter(e,t,a){e.name.includes("sg.api.credentials.create")&&!e.params.id&&(e.params.id=S.createId(),e.params.newItem=!0),a()},methods:{getEntity(){this.item=this.repository.create(Shopware.Context.api)},saveFinish(){this.isSaveSuccessful=!1,this.$router.push({name:"sg.api.credentials.detail",params:{id:this.item.id}})},onClickSave(){this.isLoading=!0,this.repository.save(this.item,Shopware.Context.api).then(()=>{this.handleSaveSuccess(),this.$router.push({name:"sg.api.credentials.detail",params:{id:this.item.id}})}).catch(e=>{this.handleSaveFailure(e)})}}});const k=`{% block sg_api_credentials_detail %} <sw-page class="sg-api-credentials-detail" v-if="item"> {% block sg_api_credentials_detail_smart_bar_header %} <template #smart-bar-header> {% block sg_api_credentials_detail_smart_bar_header_title %} <h2>{{ $tc('sg-api-credentials.detail.title') }}</h2> {% endblock %} </template> {% endblock %} {% block sg_api_credentials_detail_smart_bar_actions %} <template #smart-bar-actions> {% block sg_api_credentials_detail_smart_bar_actions_cancel %} <sw-button :disabled="item.isLoading" :routerLink="{ name: 'sg.api.credentials.index' }"> {{ $tc('sg-api-credentials.detail.buttonCancel') }} </sw-button> {% endblock %} {% block sg_api_credentials_detail_smart_bar_actions_save %} <sw-button-process v-tooltip.bottom="tooltipSave" class="sg-api-credentials-detail__save-action" :isLoading="isLoading" :processSuccess="processSuccess" variant="primary" :disabled="!allowSaving || isLoading || !item.salesChannelId || !item.languageId || !item.shopNumber || !item.customerNumber || !item.apiKey" {% if VUE3 %} @update:process-success="saveFinish" {% else %} @process-finish="saveFinish" {% endif %} @click="onClickSave"> {{ $tc('sg-api-credentials.detail.buttonSave') }} </sw-button-process> {% endblock %} </template> {% endblock %} {% block sg_api_credentials_detail_content %} <template #content> <sw-card-view> {% block sg_api_credentials_detail_content_partner_card %} <sw-card :is-loading="isLoading" v-if="item" :title="$tc('sg-api-credentials.detail.cardTitle')" position-identifier="sg_api_credentials_detail_content"> {% block sg_api_credentials_detail_content_active %} <sw-switch-field v-model:value="item.active" class="sg-api-credentials-detail__item_active" :label="$tc('sg-api-credentials.general.active')" :help-text="$tc('sg-api-credentials.detail.fieldTitleHelpTextActive')"> </sw-switch-field> {% endblock %} {% block sg_api_credentials_detail_content_salesChannels %} <sw-entity-single-select v-model:value="item.salesChannelId" name="sg-field--api-credentials-salesChannelId" required entity="sales_channel" class="sg-api-credentials-detail__item_sales_channels" :label="$tc('sg-api-credentials.general.salesChannel')"> </sw-entity-single-select> {% endblock %} {% block sg_api_credentials_detail_content_language %} <sg-channel-language-single-select v-model:value="item.languageId" name="sg-field--api-credentials-languageId" required :disabled="!item.salesChannelId" entity="sales_channel" class="sg-api-credentials-detail__item_language" :salesChannelId="item.salesChannelId" :label="$tc('sg-api-credentials.general.language')"> </sg-channel-language-single-select> {% endblock %} {% block sg_api_credentials_detail_content_customerNumber %} <sw-text-field v-model:value.number="item.customerNumber" name="sg-field--api-credentials-customerNumber" type="number" required class="sg-api-credentials-detail__item_customerNumber" :label="$tc('sg-api-credentials.general.customerNumber')" :placeholder="$tc('sg-api-credentials.detail.fieldTitlePlaceholderCustomerNumber')"> </sw-text-field> {% endblock %} {% block sg_api_credentials_detail_content_shopNumber %} <sw-text-field v-model:value.number="item.shopNumber" name="sg-field--api-credentials-shopNumber" type="number" required class="sg-api-credentials-detail__item_shop_number" :label="$tc('sg-api-credentials.general.shopNumber')" :placeholder="$tc('sg-api-credentials.detail.fieldTitlePlaceholderShopNumber')"> </sw-text-field> {% endblock %} {% block sg_api_credentials_detail_content_apiKey %} <sw-text-field v-model:value="item.apiKey" name="sg-field--api-credentials-apiKey" required class="sg-api-credentials-detail__item_api_key" :label="$tc('sg-api-credentials.general.apiKey')" :placeholder="$tc('sg-api-credentials.detail.fieldTitlePlaceholderApiKey')"> </sw-text-field> {% endblock %} </sw-card> {% endblock %} </sw-card-view> </template> {% endblock %} </sw-page> {% endblock %}`,{Component:C,Mixin:$}=Shopware,{Criteria:n}=Shopware.Data;C.register("sg-api-credentials-detail",{template:k,inject:["repositoryFactory","acl"],mixins:[$.getByName("notification")],data(){return{item:null,repository:null,isLoading:!1,processSuccess:!1,isSaveSuccessful:!1,channelRepository:null,languageOptions:[{id:null,name:this.$tc("sg-api-credentials.detail.noLanguages")}],channelLanguageMap:null}},metaInfo(){return{title:this.$createTitle()}},created(){this.createdComponent()},watch:{"item.salesChannelId":function(e){this.channelLanguageMap&&(this.languageOptions=this.channelLanguageMap[e])}},computed:{tooltipSave(){return this.allowSaving?{message:`${this.$device.getSystemKey()} + S`,appearance:"light"}:{message:this.$tc("sw-privileges.tooltip.warning"),disabled:this.allowSaving,showOnDisabledElements:!0}},allowSaving(){return this.acl.can("shopgate_go.editor")}},methods:{createdComponent(){this.repository=this.repositoryFactory.create("shopgate_api_credentials"),this.channelResository=this.repositoryFactory.create("sales_channel"),this.createChannelLanguageMap(),this.getEntity()},createChannelLanguageMap(){const e=new n;e.addAssociation("languages"),this.channelResository.search(e,Shopware.Context.api).then(t=>{this.channelLanguageMap=this.languagesToMap(t)})},getEntity(){const e=new n;e.addAssociation("salesChannel.languages"),this.repository.get(this.$route.params.id,Shopware.Context.api,e).then(t=>{this.item=t,this.languageOptions=t.salesChannel.languages})},languagesToMap(e){let t=[];return e.forEach(({id:a,languages:s})=>t[a]=s),t},onClickSave(){this.isLoading=!0,this.isSaveSuccessful=!1,this.repository.save(this.item,Shopware.Context.api).then(()=>{this.getEntity(),this.processSuccess=!0,this.handleSaveSuccess()}).catch(e=>{this.handleSaveFailure(e)})},handleSaveSuccess(){this.isLoading=!1,this.createNotificationSuccess({title:this.$tc("sg-api-credentials.detail.titleNotificationSuccess"),message:this.$tc("sg-api-credentials.detail.messageSaveSuccess")})},handleSaveFailure(e){this.isLoading=!1,e.response.status===500?this.createNotificationError({title:this.$tc("sg-api-credentials.detail.titleNotificationError"),message:this.$tc("sg-api-credentials.detail.messageSaveUniqueError")}):this.createNotificationError({title:this.$tc("sg-api-credentials.detail.titleNotificationError"),message:this.$tc("sg-api-credentials.detail.messageSaveError")})},saveFinish(){this.processSuccess=!1}}});const{Component:x,Context:D,Utils:L}=Shopware,{Criteria:M}=Shopware.Data;x.extend("sg-channel-language-single-select","sw-entity-single-select",{props:{salesChannelId:{required:!1,type:String,default:null}},watch:{salesChannelId(){this.loadData().then(e=>{e.has(this.value)||this.clearSelection()})}},methods:{loadSelected(){if(!this.value)return this.resetOption&&(this.singleSelection={id:null,name:this.resetOption}),Promise.resolve();this.isLoading=!0;const e=this.criteria;return e.addAssociation("languages"),this.repository.get(this.salesChannelId,{...this.context,inheritance:!0},e).then(t=>(this.singleSelection=t.languages.get(this.value),this.isLoading=!1,this.singleSelection||this.setValue(t.languages.first()),this.singleSelection))},loadData(){this.isLoading=!0;const e=this.criteria;return e.addAssociation("languages"),this.repository.get(this.salesChannelId,{...this.context,inheritance:!0},e).then(t=>(this.isLoading=!1,this.displaySearch(t.languages),t.languages))},search(){if(this.criteria.term===this.searchTerm)return Promise.resolve();const e=this.loadData().then(()=>{this.resetActiveItem()});return this.$emit("search",e),e}}});const N={"sg-api-credentials":{general:{mainMenuItemGeneral:"Shopgate API",description:"Konfigurieren Sie Ihre API Zugangsdaten",active:"Aktiv",salesChannel:"Verkaufskanal (Sales Channel)",language:"Sprache",customerNumber:"Kundennummer",shopNumber:"Shopnummer",apiKey:"API Key"},list:{fieldProcessNotRun:"Not erstellt",fieldProcessSucceed:"Erfolgreich erstellt",fieldProcessFailed:"Fehlerhaft",fieldProcessQueued:"In Warteschalnge",title:"Shopgate API Credentials",buttonDelete:"Löschen",modalTitleDelete:"Löschen",contentEmpty:"Es wurden keine API Zugangsdaten eingefügt",textDeleteConfirm:"Möchten Sie die API Zugangsdaten löschen?",buttonCancel:"Abbrechen",buttonAdd:"Hinzufügen",contextMenuEdit:"Bearbeiten",textHeadline:"API Zugangsdaten gespeichert",titleSidebarItemRefresh:"Aktualisieren"},detail:{title:"API Zugangsdaten gespeichert",buttonCancel:"Abbrechen",buttonSave:"Speichern",cardTitle:"Einstellungen",fieldTitleHelpTextActive:"Aktive API Verbindung mit diesen Zugangsdaten",fieldTitlePlaceholderCustomerNumber:"123456",fieldTitlePlaceholderShopNumber:"123456",fieldTitlePlaceholderApiKey:"11111111111111111111111",titleNotificationError:"Fehler",titleNotificationSuccess:"Erfolgreich",messageSaveError:"Zugangsdaten können nicht gespeichert werden.",messageSaveUniqueError:"Bitte hinterlegen Sie eine eindeutige Shop-Nummer!",messageSaveSuccess:"Zugangsdaten wurden gespeichert.",noLanguages:"Keine Sprache ausgewählt, bitte Verkaufskanal (Sales Channel) auswählen."}},"sw-privileges":{permissions:{parents:{shopgate:"Shopgate"},shopgate_go:{label:"Modul (Go)"}}}},A={"sg-api-credentials":{general:{mainMenuItemGeneral:"Shopgate API",description:"Configure your API credential sets",active:"Active",salesChannel:"SalesChannel",language:"Language",customerNumber:"Customer Number",shopNumber:"Shop Number",apiKey:"API Key"},list:{fieldProcessNotRun:"Not created",fieldProcessSucceed:"Successfully created",fieldProcessFailed:"Failed",fieldProcessQueued:"Queued",title:"Shopgate API Credentials",buttonDelete:"Delete",modalTitleDelete:"Delete",contentEmpty:"No API credentials exist",textDeleteConfirm:"Do you want to delete the API credential set?",buttonCancel:"Cancel",buttonAdd:"Add",contextMenuEdit:"Edit",textHeadline:"API credential set",titleSidebarItemRefresh:"Refresh"},detail:{title:"API Credentials Set",buttonCancel:"Cancel",buttonSave:"Save",cardTitle:"Settings",fieldTitleHelpTextActive:"Activate API connection using these credentials",fieldTitlePlaceholderCustomerNumber:"123456",fieldTitlePlaceholderShopNumber:"123456",fieldTitlePlaceholderApiKey:"11111111111111111111111",titleNotificationError:"Error",titleNotificationSuccess:"Success",messageSaveError:"Credentials could not be saved.",messageSaveUniqueError:"Please make sure your Shop Number is unique!",messageSaveSuccess:"Credentials have been saved.",noLanguages:"No languages are defined, please select a Sales Channel"}},"sw-privileges":{permissions:{parents:{shopgate:"Shopgate"},shopgate_go:{label:"Module (Go)"}}}},{Module:P}=Shopware;P.register("sg-api-credentials",{type:"plugin",name:"sg-api-credentials",title:"sg-api-credentials.general.mainMenuItemGeneral",description:"sg-api-credentials.general.description",color:"#9AA8B5",icon:"regular-shopping-bag",snippets:{"de-DE":N,"en-GB":A},routes:{index:{component:"sg-api-credentials-list",path:"index",meta:{parentPath:"sw.settings.index",privilege:"shopgate_go.viewer"}},detail:{component:"sg-api-credentials-detail",path:"detail/:id",meta:{parentPath:"sg.api.credentials.index",privilege:"shopgate_go.viewer"}},create:{component:"sg-api-credentials-create",path:"create",meta:{parentPath:"sg.api.credentials.index",privilege:"shopgate_go.creator"}}},settingsItem:{name:"sg-api-credentials",to:"sg.api.credentials.index",label:"sg-api-credentials.general.mainMenuItemGeneral",group:"plugins",icon:"regular-shopping-bag",privilege:"shopgate_go.viewer"}});const E=`{% block sw_settings_salutation_detail_content_card_letter_name %} {% parent %} <sw-form-field-renderer v-model:value="sgValue" class="sw-settings-salutation-detail__shopgateSalutation" type="single-select" :config="{ label: $tc('sg-salutations.detail.genderLabel'), options: [ { value: null, label: $tc('sg-salutations.detail.genderUndefined') }, { value: 'm', label: $tc('sg-salutations.detail.genderMale') }, { value: 'f', label: $tc('sg-salutations.detail.genderFemale') }, { value: 'd', label: $tc('sg-salutations.detail.genderDiverse') } ] }" :disabled="!acl.can('shopgate_go.editor')" :help-text="$tc('sg-salutations.detail.genderTooltip')"> </sw-form-field-renderer> {% endblock %}`;Shopware.Component.override("sw-settings-salutation-detail",{template:E,computed:{sgValue:{get(){return this.salutation.extensions.shopgateSalutation?this.salutation.extensions.shopgateSalutation.value:null},set(e){if(this.salutation.extensions.shopgateSalutation)this.salutation.extensions.shopgateSalutation.value=e;else{const a=this.repositoryFactory.create("shopgate_go_salutations").create(Shopware.Context.api);a.shopwareSalutationId=this.salutationId,a.value=e,this.salutation.extensions={shopgateSalutation:a}}}}}});const I='{% block sg_custom_field_type_select %} <sw-container class="sg-custom-field-type-select"> {% block sg_custom_field_type_select_multi_select %} <sw-multi-select :value="selectedRelationEntityNames" :options="relationEntityNames" @item-add="onAddRelation" @item-remove="onRemoveRelation" /> {% endblock %} </sw-container> {% endblock %}';Shopware.Component.register("sg-custom-field-type-select",{template:I,compatConfig:Shopware.compatConfig,inject:["customFieldDataProviderService"],props:{value:{type:Array,required:!0,default(){return[]}}},data(){return{currentValue:this.value.filter(e=>e!==null)}},computed:{currentValue:{get(){return this.value},set(e){this.$emit("update:value",e)}},selectedRelationEntityNames(){return this.currentValue?this.currentValue.map(e=>e.value).filter(e=>e!==null):[]},relationEntityNames(){return this.value?this.customFieldDataProviderService.getEntityNames().map(t=>{const a={};return a.value=t,this.$te(`global.entities.${t}`)?a.label=this.$tc(`global.entities.${t}`,2,this.$i18n.locale):a.label=t,a}):[]}},watch:{currentValue:{deep:!0,handler(e){this.$emit("update:value",e)}}},methods:{onAddRelation(e){this.currentValue.push(e)},onRemoveRelation(e){const t=this.currentValue.findIndex(a=>a.value===e.value);t!==-1&&this.currentValue.splice(t,1)}}});
//# sourceMappingURL=sgate-shopgate-plugin-s-w6-DLBK757Z.js.map
