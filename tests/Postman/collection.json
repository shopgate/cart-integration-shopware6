{
	"info": {
		"_postman_id": "44e8cd9f-33b1-4566-af7b-8da63e877220",
		"name": "SW6 CI Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5289226"
	},
	"item": [
		{
			"name": "Init",
			"item": [
				{
					"name": "System",
					"item": [
						{
							"name": "Custom Fields",
							"item": [
								{
									"name": "SW: create customFieldSets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created all custom field sets\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"write-custom-field-sets\": {\r\n        \"entity\": \"custom_field_set\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{created_order_customFieldSet_id}}\",\r\n                \"name\": \"test_api_custom_fieltset_order\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"label\": {\r\n                        \"en-GB\": \"Test Order API Custom Field Set\"\r\n                    }\r\n                },\r\n                \"relations\": [\r\n                    {\r\n                        \"entityName\": \"order\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"id\": \"{{created_address_customFieldSet_id}}\",\r\n                \"name\": \"test_api_custom_fieltset_address\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"label\": {\r\n                        \"en-GB\": \"Test Address API Custom Field Set\"\r\n                    }\r\n                },\r\n                \"relations\": [\r\n                    {\r\n                        \"entityName\": \"customer_address\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"id\": \"{{created_customer_customFieldSet_id}}\",\r\n                \"name\": \"test_api_custom_fieltset_customer\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"label\": {\r\n                        \"en-GB\": \"Test Customer API Custom Field Set\"\r\n                    }\r\n                },\r\n                \"relations\": [\r\n                    {\r\n                        \"entityName\": \"customer\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"id\": \"{{created_product_customFieldSet_id}}\",\r\n                \"name\": \"test_api_custom_fieltset_product\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"label\": {\r\n                        \"en-GB\": \"Test Product API Custom Field Set\"\r\n                    }\r\n                },\r\n                \"relations\": [\r\n                    {\r\n                        \"entityName\": \"product\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"id\": \"{{created_customFieldSet_manufacturer_id}}\",\r\n                \"name\": \"test_api_custom_fieltset_manufacturer\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"label\": {\r\n                        \"en-GB\": \"Test Manufacturer API Custom Field Set\"\r\n                    }\r\n                },\r\n                \"relations\": [\r\n                    {\r\n                        \"entityName\": \"product_manufacturer\"\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/sync",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"sync"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: create customFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created all custom fields\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"write-custom-fields\": {\r\n        \"entity\": \"custom_field\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"5cbeeb4ee9929880f9e6d9ef8ccd81e1\",\r\n                \"customFieldSetId\": \"{{created_order_customFieldSet_id}}\",\r\n                \"name\": \"api_order_custom_field_text_0001\",\r\n                \"type\": \"text\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"type\": \"text\",\r\n                    \"label\": {\r\n                        \"en-GB\": \"API Order Custom Field 0001: text\"\r\n                    },\r\n                    \"componentName\": \"sw-field\",\r\n                    \"customFieldType\": \"text\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"6be2be70aeda8760d1d3c5b901c2d34b\",\r\n                \"customFieldSetId\": \"{{created_order_customFieldSet_id}}\",\r\n                \"name\": \"api_order_custom_field_int_0001\",\r\n                \"type\": \"int\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"type\": \"number\",\r\n                    \"numberType\": \"int\",\r\n                    \"label\": {\r\n                        \"en-GB\": \"API Order Custom Field 0001: int\"\r\n                    },\r\n                    \"componentName\": \"sw-field\",\r\n                    \"customFieldType\": \"number\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"e7310ca83a5f57b6f8327d45c36c4c14\",\r\n                \"customFieldSetId\": \"{{created_order_customFieldSet_id}}\",\r\n                \"name\": \"api_order_custom_field_float_0001\",\r\n                \"type\": \"float\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"type\": \"number\",\r\n                    \"numberType\": \"float\",\r\n                    \"label\": {\r\n                        \"en-GB\": \"API Order Custom Field 0001: float\"\r\n                    },\r\n                    \"componentName\": \"sw-field\",\r\n                    \"customFieldType\": \"number\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"4c911ad4306ba418894de07ffb5eec11\",\r\n                \"customFieldSetId\": \"{{created_order_customFieldSet_id}}\",\r\n                \"name\": \"api_order_custom_field_bool_0001\",\r\n                \"type\": \"bool\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"type\": \"checkbox\",\r\n                    \"label\": {\r\n                        \"en-GB\": \"API Order Custom Field 0001: bool\"\r\n                    },\r\n                    \"componentName\": \"sw-field\",\r\n                    \"customFieldType\": \"checkbox\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"b5c7f79ff01c938ac5182a2483eb575c\",\r\n                \"customFieldSetId\": \"{{created_address_customFieldSet_id}}\",\r\n                \"name\": \"api_address_custom_field_text_0001\",\r\n                \"type\": \"text\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"type\": \"text\",\r\n                    \"label\": {\r\n                        \"en-GB\": \"API Address Custom Field 0001: text\"\r\n                    },\r\n                    \"componentName\": \"sw-field\",\r\n                    \"customFieldType\": \"text\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"e63481deddfe062bf19642e826eb4540\",\r\n                \"customFieldSetId\": \"{{created_address_customFieldSet_id}}\",\r\n                \"name\": \"api_address_custom_field_int_0001\",\r\n                \"type\": \"int\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"type\": \"number\",\r\n                    \"numberType\": \"int\",\r\n                    \"label\": {\r\n                        \"en-GB\": \"API Address Custom Field 0001: int\"\r\n                    },\r\n                    \"componentName\": \"sw-field\",\r\n                    \"customFieldType\": \"number\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"7435ab1689eccdf3d5969259ef8bd383\",\r\n                \"customFieldSetId\": \"{{created_address_customFieldSet_id}}\",\r\n                \"name\": \"api_address_custom_field_float_0001\",\r\n                \"type\": \"float\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"type\": \"number\",\r\n                    \"numberType\": \"float\",\r\n                    \"label\": {\r\n                        \"en-GB\": \"API Address Custom Field 0001: float\"\r\n                    },\r\n                    \"componentName\": \"sw-field\",\r\n                    \"customFieldType\": \"number\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"650a349b0f0b8b2d5e31fa02cc02f6b3\",\r\n                \"customFieldSetId\": \"{{created_address_customFieldSet_id}}\",\r\n                \"name\": \"api_address_custom_field_bool_0001\",\r\n                \"type\": \"bool\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"type\": \"checkbox\",\r\n                    \"label\": {\r\n                        \"en-GB\": \"API Address Custom Field 0001: bool\"\r\n                    },\r\n                    \"componentName\": \"sw-field\",\r\n                    \"customFieldType\": \"checkbox\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"12ef501b9e48202580343aeed861c457\",\r\n                \"customFieldSetId\": \"{{created_product_customFieldSet_id}}\",\r\n                \"name\": \"api_product_custom_field_text_0001\",\r\n                \"type\": \"text\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"type\": \"text\",\r\n                    \"label\": {\r\n                        \"en-GB\": \"API product Custom Field 0001: text\"\r\n                    },\r\n                    \"componentName\": \"sw-field\",\r\n                    \"customFieldType\": \"text\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"15e5ce267753a38f131a194a0f6f116a\",\r\n                \"customFieldSetId\": \"{{created_product_customFieldSet_id}}\",\r\n                \"name\": \"api_product_custom_field_int_0001\",\r\n                \"type\": \"int\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"type\": \"number\",\r\n                    \"numberType\": \"int\",\r\n                    \"label\": {\r\n                        \"en-GB\": \"API product Custom Field 0001: int\"\r\n                    },\r\n                    \"componentName\": \"sw-field\",\r\n                    \"customFieldType\": \"number\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"9b8c5b0ad10b9f931be48bce6dfdbb4e\",\r\n                \"customFieldSetId\": \"{{created_product_customFieldSet_id}}\",\r\n                \"name\": \"api_product_custom_field_float_0001\",\r\n                \"type\": \"float\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"type\": \"number\",\r\n                    \"numberType\": \"float\",\r\n                    \"label\": {\r\n                        \"en-GB\": \"API product Custom Field 0001: float\"\r\n                    },\r\n                    \"componentName\": \"sw-field\",\r\n                    \"customFieldType\": \"number\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"7dc1d529c84526106ffa0260a631d02f\",\r\n                \"customFieldSetId\": \"{{created_product_customFieldSet_id}}\",\r\n                \"name\": \"api_product_custom_field_bool_0001\",\r\n                \"type\": \"bool\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"type\": \"checkbox\",\r\n                    \"label\": {\r\n                        \"en-GB\": \"API product Custom Field 0001: bool\"\r\n                    },\r\n                    \"componentName\": \"sw-field\",\r\n                    \"customFieldType\": \"checkbox\"\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"047be46e0f514607a6e8dfc9518db572\",\r\n                \"customFieldSetId\": \"{{created_product_customFieldSet_id}}\",\r\n                \"name\": \"api_product_custom_field_multiselect_0001\",\r\n                \"type\": \"select\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"label\": {\r\n                        \"en-GB\": \"API product Custom Field 0001: multi-select\"\r\n                    },\r\n                    \"componentName\": \"sw-multi-select\",\r\n                    \"customFieldType\": \"select\",\r\n                    \"options\": [\r\n                        {\r\n                            \"value\": \"multi-option-0001\",\r\n                            \"label\": {\r\n                                \"en-GB\": \"Option One (en)\"\r\n                            }\r\n                        },\r\n                        {\r\n                            \"value\": \"multi-option-0002\",\r\n                            \"label\": {\r\n                                \"en-GB\": \"Option Two (en)\"\r\n                            }\r\n                        },\r\n                        {\r\n                            \"value\": \"multi-option-0003\",\r\n                            \"label\": {\r\n                                \"en-GB\": \"Option Three (en)\"\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"ce6d029750b2479eb0cb1b71efeaec3a\",\r\n                \"customFieldSetId\": \"{{created_product_customFieldSet_id}}\",\r\n                \"name\": \"api_product_custom_field_select_0001\",\r\n                \"type\": \"select\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"label\": {\r\n                        \"en-GB\": \"API product Custom Field 0001: select\"\r\n                    },\r\n                    \"componentName\": \"sw-single-select\",\r\n                    \"customFieldType\": \"select\",\r\n                    \"options\": [\r\n                        {\r\n                            \"value\": \"select-option-0001\",\r\n                            \"label\": {\r\n                            }\r\n                        },\r\n                        {\r\n                            \"value\": \"select-option-0002\",\r\n                            \"label\": {\r\n                                \"en-GB\": \"Option Two (en)\"\r\n                            }\r\n                        },\r\n                        {\r\n                            \"value\": \"select-option-0003\",\r\n                            \"label\": {\r\n                                \"en-GB\": \"Option Three (en)\"\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"43c8fb9254f341e987031d856554b4a3\",\r\n                \"customFieldSetId\": \"{{created_product_customFieldSet_id}}\",\r\n                \"name\": \"api_product_custom_field_select_0002\",\r\n                \"type\": \"select\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"label\": {\r\n                        \"en-GB\": \"API product Custom Field 0002: select\"\r\n                    },\r\n                    \"componentName\": \"sw-single-select\",\r\n                    \"customFieldType\": \"select\",\r\n                    \"options\": [\r\n                        {\r\n                            \"value\": \"select-option-0004\",\r\n                            \"label\": {\r\n                                \"en-GB\": \"Option One (en)\"\r\n                            }\r\n                        },\r\n                        {\r\n                            \"value\": \"select-option-0005\",\r\n                            \"label\": {\r\n                                \"en-GB\": \"Option Two (en)\"\r\n                            }\r\n                        },\r\n                        {\r\n                            \"value\": \"select-option-0006\",\r\n                            \"label\": {\r\n                                \"en-GB\": \"Option Three (en)\"\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"343dbf30c51e4760a40a6a6e170f6e6f\",\r\n                \"customFieldSetId\": \"{{created_customFieldSet_manufacturer_id}}\",\r\n                \"name\": \"api_manufacturer_custom_field_text_0001\",\r\n                \"type\": \"text\",\r\n                \"active\": true,\r\n                \"config\": {\r\n                    \"type\": \"text\",\r\n                    \"label\": {\r\n                        \"en-GB\": \"API Manufacturer Custom Field 0001: text\"\r\n                    },\r\n                    \"componentName\": \"sw-field\",\r\n                    \"customFieldType\": \"text\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/sync",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"sync"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SW: first run wizard",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"language\": \"en_GB\",\r\n    \"failed\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/store/frw/finish",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"store",
										"frw",
										"finish"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: get system config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"get SW version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.version).to.be.a('string');\r",
											"    pm.environment.set(\"gen_shopware_version\", jsonData.version);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{sw_endpoint_api}}/_info/config",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_info",
										"config"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: get sales channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Get Main Sales Channel data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0].name).to.be.eq('Storefront');\r",
											"    pm.environment.set(\"gen_salesChannel_id\", jsonData.data[0].id);\r",
											"    pm.environment.set(\"gen_salesChannel_currency_id\", jsonData.data[0].currencyId);\r",
											"    pm.environment.set(\"gen_salesChannel_access_key\", jsonData.data[0].accessKey);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n    {\r\n          \"type\": \"equals\",\r\n          \"field\": \"name\",\r\n          \"value\": \"Storefront\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/sales-channel",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"sales-channel"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: get German lang ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Test finding german lang:\", function () {\r",
											"    pm.expect(jsonData.total).to.eq(1);\r",
											"    pm.environment.set(`gen_language_german_id`, jsonData.data[0].id);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n        {\r\n            \"type\": \"equals\",\r\n            \"field\": \"name\",\r\n            \"value\": \"Deutsch\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/language",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"language"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: get USD currency ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Finding USD currency: \", function () {\r",
											"    pm.expect(jsonData.total).to.eq(1);\r",
											"    pm.environment.set(`gen_currency_usd_id`, jsonData.data[0]);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n        { \r\n            \"type\": \"multi\", \r\n            \"operator\": \"and\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"isoCode\",\r\n                    \"value\": \"USD\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search-ids/currency",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search-ids",
										"currency"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: get USA country ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Finding USA country: \", function () {\r",
											"    pm.expect(jsonData.total).to.eq(1);\r",
											"    pm.environment.set(`gen_country_USA_id`, jsonData.data[0].id);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n        {\r\n            \"type\": \"equals\",\r\n            \"field\": \"iso\",\r\n            \"value\": \"US\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/country",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"country"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: get Britain country ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Finding Great Britain country: \", function () {\r",
											"    pm.expect(jsonData.total).to.eq(1);\r",
											"    pm.environment.set(`gen_country_GB_id`, jsonData.data[0].id);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n        {\r\n            \"type\": \"equals\",\r\n            \"field\": \"iso\",\r\n            \"value\": \"GB\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/country",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"country"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: get DE snippet set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Finding snippet-set data: \", function () {\r",
											"    pm.expect(jsonData.total).to.eq(1);\r",
											"    pm.environment.set(`gen_snippetSet_de`, jsonData.data[0].id);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n        { \r\n            \"type\": \"multi\", \r\n            \"operator\": \"and\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"iso\",\r\n                    \"value\": \"de-DE\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/snippet-set",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"snippet-set"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: set configs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully enabled configs\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"cf48550d5969465e9754b964e1837943\",\r\n                \"configurationKey\": \"core.loginRegistration.requireDataProtectionCheckbox\",\r\n                \"configurationValue\": true,\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								},
								"description": "Set data protection acceptance to required - this config check makes sure our register customer does not fail if this flag is enabled."
							},
							"response": []
						},
						{
							"name": "SW: get tax id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"get reduced tax rule\", function () {\r",
											"    pm.expect(jsonData.total).to.eq(1);\r",
											"    pm.expect(jsonData.data[0]).to.haveOwnProperty('id');\r",
											"    pm.environment.set(\"gen_tax_reduced_id\", jsonData.data[0].id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n        {\r\n            \"type\": \"multi\",\r\n            \"operator\": \"or\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"taxRate\",\r\n                    \"value\": \"7.00\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/tax",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"tax"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: add DE domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully updated channel\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"domains\": [\r\n        {\r\n            \"id\": \"9f3e076d556d4ebf95ec5ecec654a552\",\r\n            \"currencyId\": \"{{gen_currency_usd_id}}\",\r\n            \"languageId\": \"{{gen_language_german_id}}\",\r\n            \"snippetSetId\": \"{{gen_snippetSet_de}}\",\r\n            \"url\": \"{{host}}{{system_port}}/de2\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/sales-channel/{{gen_salesChannel_id}}",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"sales-channel",
										"{{gen_salesChannel_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Plugin",
					"item": [
						{
							"name": "SW: get shopgate plugin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Get values\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"gen_plugin_version\", jsonData.data[0].attributes.version);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n    {\r\n          \"type\": \"equals\",\r\n          \"field\": \"composerName\",\r\n          \"value\": \"shopgate/cart-integration-shopware6\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/plugin",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"plugin"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: set SG configs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully created all SG system config entities\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"shopgate_api_credentials\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"16c16c5cf2a24afbaa2b9ad3ed1324af\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n                \"languageId\": \"{{system_default_language}}\",\r\n                \"active\": true,\r\n                \"customerNumber\": {{customer_number}},\r\n                \"shopNumber\": {{shop_number}},\r\n                \"apiKey\": \"{{api_key}}\"\r\n            },\r\n            {\r\n                \"id\": \"26909efb178412e49b65fc768544f615\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n                \"languageId\": \"{{gen_language_german_id}}\",\r\n                \"active\": true,\r\n                \"customerNumber\": {{shop_main_DE}},\r\n                \"shopNumber\": {{shop_main_DE}},\r\n                \"apiKey\": \"{{shop_main_DE}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: test duplicate lang",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully created partial duplicate (only shop # is unique)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"shopgate_api_credentials\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"9dbba8d3763a426c83c31a601c411afc\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n                \"languageId\": \"{{gen_language_german_id}}\",\r\n                \"active\": true,\r\n                \"customerNumber\": {{shop_main_DE}},\r\n                \"shopNumber\": 1112222333,\r\n                \"apiKey\": \"{{shop_main_DE}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: check SG shipping",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// Disabled until SGSW6-88 is handled\r",
											"/*\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Check rules\", function () {\r",
											"    jsonData.data.map(shippingMethod => pm.expect(shippingMethod.active).to.eq(true, `Expected shipping method to be active: '${shippingMethod.name}' >>>`));\r",
											"});\r",
											"\r",
											"pm.test(\"Check rules\", function () {\r",
											"    pm.expect(jsonData.total).to.eql(2, 'Supposed to have 2 shipping methods installed.');\r",
											"    jsonData.data.map(shipMethod => checkRule(shipMethod));\r",
											"});\r",
											"\r",
											"pm.test(\"Check deliveries\", function () {\r",
											"    jsonData.data.map(shipMethod => checkDelivery(shipMethod));\r",
											"});\r",
											"*/\r",
											"function checkDelivery(shippingMethod) {\r",
											"    pm.expect(shippingMethod.deliveryTimeId).to.eq(\r",
											"        pm.environment.get('default_deliveryTime_sg_id'),\r",
											"        `Incorrect default SG delivery time ID: ${shippingMethod.deliveryTimeId} for shipMethod: ${shippingMethod.name}  >>>` \r",
											"    );\r",
											"}\r",
											"\r",
											"function checkRule(shippingMethod) {\r",
											"    pm.expect(shippingMethod, 'Rule not present in shipping method: ' + shippingMethod.name).has.ownProperty('availabilityRule').has.ownProperty('id')\r",
											"    .to.eq(\r",
											"        pm.environment.get('gen_rule_cartGreaterThan0_id'),\r",
											"        `Incorrect rule by name '${shippingMethod.availabilityRule.name}' for shipMethod: '${shippingMethod.name}' >>>` \r",
											"    );\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n        { \r\n            \"type\": \"multi\", \r\n            \"operator\": \"or\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"id\",\r\n                    \"value\": \"{{default_shipMethod_sgDefault_id}}\"\r\n                },\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"id\",\r\n                    \"value\": \"{{default_shipMethod_sgFree_id}}\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"associations\": {\r\n        \"availabilityRule\": {}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/shipping-method",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"shipping-method"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: test addOrder to live",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Live call should fail because no authorization\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(102);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_add_order}}",
											"type": "text"
										},
										{
											"key": "order_number",
											"value": "0001",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: set mock api url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_set_settings}}",
											"type": "text"
										},
										{
											"key": "shopgate_settings[0][name]",
											"value": "server",
											"type": "text"
										},
										{
											"key": "shopgate_settings[0][value]",
											"value": "custom",
											"type": "text"
										},
										{
											"key": "shopgate_settings[1][name]",
											"value": "api_url",
											"type": "text"
										},
										{
											"key": "shopgate_settings[1][value]",
											"value": "{{mock_server_merchant_uri}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: check review default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Get entity data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.total).to.eq(1);\r",
											"    pm.expect(jsonData.data[0].configurationValue).to.be.eq(true);\r",
											"    pm.environment.set('gen_config_sg_export_allChannelReviews_id', jsonData.data[0].id)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n    {\r\n          \"type\": \"equals\",\r\n          \"field\": \"configurationKey\",\r\n          \"value\": \"SgateShopgatePluginSW6.config.exportAllChannelReviews\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/system-config",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"system-config"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: unset review channel export",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully enabled configs\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{gen_config_sg_export_allChannelReviews_id}}\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.exportAllChannelReviews\",\r\n                \"configurationValue\": false\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								},
								"description": "Set data protection acceptance to required - this config check makes sure our register customer does not fail if this flag is enabled."
							},
							"response": []
						}
					],
					"description": "Setup related to plugins, modules that are not part of SW. This includes SG plugin."
				},
				{
					"name": "Customer",
					"item": [
						{
							"name": "SW: get customer group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test getting main customer group\", function () {\r",
											"    pm.expect(jsonData.total).to.eq(1);\r",
											"    pm.environment.set(`gen_customer_group_main_id`, jsonData.data[0]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n        { \r\n            \"type\": \"not\", \r\n            \"operator\": \"or\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"id\",\r\n                    \"value\": \"2fbb5fe2e29a4d70aa5854ce7ce3e20b\"\r\n                },\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"id\",\r\n                    \"value\": \"{{created_customerGroup_net_id}}\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search-ids/customer-group",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search-ids",
										"customer-group"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: create NET grp",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created customer group successfully\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{created_customerGroup_net_id}}\",\r\n    \"name\": \"API: A custom NET group\",\r\n    \"displayGross\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/customer-group",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"customer-group"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: create customGrp customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Product created\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"{{created_customer_withCustomGrp_id}}\",\r\n        \"groupId\" : \"{{created_customerGroup_net_id}}\",\r\n        \"email\": \"{{created_customer_withCustomGrp_email}}\",\r\n        \"firstName\" : \"API Created\",\r\n        \"lastName\": \"CustomGroup\"\r\n    },\r\n    \"cloneChildren\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/clone/customer/{{customer_default_id}}",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"clone",
										"customer",
										"{{customer_default_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Customer groups can be used in rules, so they need to be created first"
				},
				{
					"name": "Rules",
					"item": [
						{
							"name": "SW: get Rules",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"AlwaysValid rule\", function () {\r",
											"    pm.expect(jsonData.data,'Should find 4 rules only').to.be.length(4);\r",
											"    const alwaysValid = getByName('Always valid (Default)');\r",
											"    pm.expect(alwaysValid).to.have.ownProperty('id');\r",
											"    pm.environment.set(\"gen_rule_allValid_id\", alwaysValid.id);\r",
											"});\r",
											"\r",
											"pm.test(\"Cart >= 0 rule\", function () {\r",
											"    const cartRule = getByName('Cart >= 0');\r",
											"    pm.expect(cartRule).to.have.ownProperty('id');\r",
											"    pm.environment.set(\"gen_rule_cartGreaterThan0_id\", cartRule.id);\r",
											"});\r",
											"\r",
											"pm.test(\"USA customer rule\", function () {\r",
											"    const usaRule = getByName('Customers from USA');\r",
											"    pm.expect(usaRule).to.have.ownProperty('id');\r",
											"    pm.environment.set(\"gen_rule_usaCustomer_id\", usaRule.id);\r",
											"});\r",
											"\r",
											"pm.test(\"Is Shopgate rule\", function () {\r",
											"    const isShopgateRule = getByName('Is Shopgate');\r",
											"    pm.expect(isShopgateRule).to.have.ownProperty('id');\r",
											"    pm.expect(isShopgateRule.id,'Is Shopgate rule has correct id').to.eql(pm.environment.get(\"default_rule_isShopgate_id\"));\r",
											"});\r",
											"\r",
											"function getByName(name) {\r",
											"    return jsonData.data.find(rule => rule.name === name);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n        {\r\n            \"type\": \"multi\",\r\n            \"operator\": \"or\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"name\",\r\n                    \"value\": \"Always valid (Default)\"\r\n                },\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"name\",\r\n                    \"value\": \"Cart >= 0\"\r\n                },\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"name\",\r\n                    \"value\": \"Customers from USA\"\r\n                },\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"name\",\r\n                    \"value\": \"Is Shopgate\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/rule",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"rule"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: create rules",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// marked as temp because of ticket SGSW6-88\r",
											"pm.test(\"Successfully updated all entities with proper Rules\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"create-rules\": {\r\n        \"entity\": \"rule\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{created_rule_customerGrp_net_id}}\",\r\n                \"name\": \"API: customer NET grp\",\r\n                \"conditions\": [\r\n                    {\r\n                        \"type\": \"customerCustomerGroup\",\r\n                        \"value\": {\r\n                            \"operator\": \"=\",\r\n                            \"customerGroupIds\": [\r\n                                \"{{created_customerGroup_net_id}}\"\r\n                            ]\r\n                        }\r\n                    }\r\n                ],\r\n                \"priority\": 10\r\n            },\r\n            {\r\n                \"id\": \"{{created_rule_shippingUSA}}\",\r\n                \"name\": \"API: shipping USA\",\r\n                \"conditions\": [\r\n                    {\r\n                        \"type\": \"customerShippingCountry\",\r\n                        \"value\": {\r\n                            \"operator\": \"=\",\r\n                            \"countryIds\": [\r\n                                \"{{gen_country_USA_id}}\"\r\n                            ]\r\n                        }\r\n                    }\r\n                ],\r\n                \"priority\": 20\r\n            },\r\n            {\r\n                \"id\": \"{{created_rule_shippingGB}}\",\r\n                \"name\": \"API: shipping Great Britain\",\r\n                \"conditions\": [\r\n                    {\r\n                        \"type\": \"customerShippingCountry\",\r\n                        \"value\": {\r\n                            \"operator\": \"=\",\r\n                            \"countryIds\": [\r\n                                \"{{gen_country_GB_id}}\"\r\n                            ]\r\n                        }\r\n                    }\r\n                ],\r\n                \"priority\": 30\r\n            },\r\n            {\r\n                \"id\": \"{{created_rule_cart5k}}\",\r\n                \"name\": \"API: cart >=5k\",\r\n                \"conditions\": [\r\n                    {\r\n                        \"type\": \"cartCartAmount\",\r\n                        \"value\": {\r\n                            \"operator\": \">=\",\r\n                            \"amount\": 5000\r\n                        }\r\n                    }\r\n                ],\r\n                \"priority\": 40\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: create tag rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// marked as temp because of ticket SGSW6-88\r",
											"pm.test(\"Successfully updated all entities with proper Rules\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"create-rules\": {\r\n        \"entity\": \"rule\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{created_rule_lineItem_tag1}}\",\r\n                \"name\": \"API: line items Tag 1\",\r\n                \"conditions\": [\r\n                    {\r\n                        \"type\": \"cartLineItemTag\",\r\n                        \"value\": {\r\n                            \"operator\": \"=\",\r\n                            \"identifiers\": [\r\n                                \"{{created_tag_one}}\"\r\n                            ]\r\n                        }\r\n                    }\r\n                ],\r\n                \"priority\": 25\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						}
					],
					"description": "rules can be used in products to they are prioritized higher than product creation"
				},
				{
					"name": "Catalog",
					"item": [
						{
							"name": "Manufacturers",
							"item": [
								{
									"name": "SWA: get media folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Retrieve ID of folder\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.meta.total).to.eq(1);",
													"    const folder = jsonData.included.pop()",
													"    pm.expect(folder).to.have.property('id');",
													"    pm.environment.set('gen_media_folder_prodManufacturer_id', folder.id);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"equals\",\n            \"field\": \"entity\",\n            \"value\": \"product_manufacturer\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/search/media-default-folder",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"search",
												"media-default-folder"
											]
										}
									},
									"response": []
								},
								{
									"name": "SWA: media entity",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{created_media_iconOne_id}}\",\n    \"mediaFolderId\": \"{{gen_media_folder_prodManufacturer_id}}\",\n    \"private\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/media",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"media"
											]
										}
									},
									"response": []
								},
								{
									"name": "SWA: media",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"url\": \"https://placehold.co/200x200@2x.png\",\n    \"alt\": \"some alt text (EN)\",\n    \"title\": \"some title text (EN)\",\n    \"translations\": {\n        \"de-DE\": {\n            \"url\": \"https://placehold.co/250x250@2x.png\",\n            \"alt\": \"some alt text (DE)\",\n            \"title\": \"some title text (DE)\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/media/:mediaId/upload?extension=png&fileName=200x200%402x",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"media",
												":mediaId",
												"upload"
											],
											"query": [
												{
													"key": "extension",
													"value": "png"
												},
												{
													"key": "fileName",
													"value": "200x200%402x"
												}
											],
											"variable": [
												{
													"key": "mediaId",
													"value": "{{created_media_iconOne_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SWA: create simpleOne",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{created_manufacturer_simpleOne_id}}\",\n    \"name\": \"API: simpleOne manufacturer (EN)\",\n    \"description\": \"API: some description or another (EN)\",\n    \"link\": \"http://someLink.com/en\",\n    \"mediaId\": \"{{created_media_iconOne_id}}\",\n    \"translations\": {\n        \"de-DE\": {\n            \"name\": \"API: simpleOne manufacturer (DE)\",\n            \"description\": \"API: some description or another (DE)\",\n            \"customFields\": {\n                \"api_manufacturer_custom_field_text_0001\": \"Manufacturer test field text (DE)\"\n            },\n            \"link\": \"http://someLink.com/de\"\n        }\n    },\n    \"customFields\": {\n        \"api_manufacturer_custom_field_text_0001\": \"Manufacturer test field text\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/product-manufacturer",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"product-manufacturer"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Product",
							"item": [
								{
									"name": "setup",
									"item": [
										{
											"name": "SW: get prod taxId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Tax ID saving\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.taxId).to.be.a('string').to.not.be.empty;\r",
															"    pm.environment.set('gen_product_variant_taxId', jsonData.data.taxId);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{sw_endpoint_api}}/product/{{catalog_product_variant}}",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"product",
														"{{catalog_product_variant}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: get variant child",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Get child ID\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    const child = jsonData.data.filter(product => product.attributes.productNumber === 'SWDEMO10005.3');\r",
															"    pm.expect(child).length(1, 'Should have found a child product');\r",
															"    pm.environment.set('gen_product_variant_child_id', child[0].id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{sw_endpoint_api}}/product/{{catalog_product_variant}}/children",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"product",
														"{{catalog_product_variant}}",
														"children"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Complex Tiers",
									"item": [
										{
											"name": "SW: advPrice no fallback",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Product created\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "indexing-behavior",
														"value": "use-queue-indexing",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"{{created_product_advPrice_noFallback_id}}\",\r\n        \"name\": \"API: Complex Advanced Prices\",\r\n        \"description\": \"Created to test advanced price tier without fallback grp rule or isValid rule\",\r\n        \"productNumber\": \"SG.DEMO.COMPLEX.ADV.PRICE.1\",\r\n        \"stock\": 100,\r\n        \"price\": [\r\n            {\r\n                \"currencyId\": \"{{system_default_currency_id}}\",\r\n                \"net\": 20,\r\n                \"gross\": 17,\r\n                \"linked\": true\r\n            }\r\n        ],\r\n        \"prices\": [\r\n            {\r\n                \"ruleId\": \"{{created_rule_customerGrp_net_id}}\",\r\n                \"price\": [\r\n                    {\r\n                        \"currencyId\": \"{{system_default_currency_id}}\",\r\n                        \"net\": 30,\r\n                        \"gross\": 28,\r\n                        \"linked\": true,\r\n                        \"listPrice\": null,\r\n                        \"percentage\": null\r\n                    }\r\n                ],\r\n                \"quantityStart\": 1,\r\n                \"quantityEnd\": null\r\n            },\r\n            {\r\n                \"ruleId\": \"{{gen_rule_usaCustomer_id}}\",\r\n                \"price\": [\r\n                    {\r\n                        \"currencyId\": \"{{system_default_currency_id}}\",\r\n                        \"net\": 80,\r\n                        \"gross\": 70,\r\n                        \"linked\": true,\r\n                        \"listPrice\": null,\r\n                        \"percentage\": null\r\n                    }\r\n                ],\r\n                \"quantityStart\": 1,\r\n                \"quantityEnd\": null\r\n            }\r\n        ],\r\n        \"visibilities\": [\r\n            {\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n                \"visibility\": 30\r\n            }\r\n        ],\r\n        \"releaseDate\": \"2024-08-19T11:00:04.389+00:00\"\r\n    },\r\n    \"cloneChildren\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/_action/clone/product/{{catalog_product_main_id}}",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"_action",
														"clone",
														"product",
														"{{catalog_product_main_id}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "This product is created to test SW6M-112. An issue where there is a tier with a price higher than base, but no fallback tier such as \"default customer grp\" or \"all valid tier\""
								},
								{
									"name": "SW: clone variant child",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Product created\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"overwrites\": {\r\n        \"parentId\": \"{{catalog_product_variant}}\",\r\n        \"id\": \"{{created_product_variant_child_id}}\",\r\n        \"name\": \"API: Variant Child (Red-M)\",\r\n        \"productNumber\": \"SG.DEMO.CHILD.1\",\r\n        \"taxId\": \"{{gen_product_variant_taxId}}\",\r\n        \"price\": [\r\n            {\r\n                \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n                \"net\": 21.25,\r\n                \"gross\": 24.50,\r\n                \"linked\": true\r\n            }\r\n        ]\r\n    },\r\n    \"cloneChildren\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/clone/product/{{gen_product_variant_child_id}}",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"clone",
												"product",
												"{{gen_product_variant_child_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SWA: change default child",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Updated defalt child\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{catalog_product_variant}}\",\r\n    \"variantListingConfig\": {\r\n        \"extensions\": [],\r\n        \"displayParent\": false,\r\n        \"configuratorGroupConfig\": [],\r\n        \"mainVariantId\": \"{{created_product_variant_child_id}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/product/{{catalog_product_variant}}",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"product",
												"{{catalog_product_variant}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: create no stock prod",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Product created\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"{{created_product_noStock_id}}\",\r\n        \"name\" : \"API: out of stock product\",\r\n        \"productNumber\" : \"SGDEMOCHECKCART01\",\r\n        \"stock\": 0,\r\n        \"isCloseout\": true,\r\n        \"releaseDate\": \"2022-01-29T11:00:04.389+00:00\"\r\n    },\r\n    \"cloneChildren\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/clone/product/{{catalog_product_advPrices_id}}",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"clone",
												"product",
												"{{catalog_product_advPrices_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: create no stock backorder prod",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Product created\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"{{created_product_noStock_backorder_id}}\",\r\n        \"name\" : \"API: out of stock backorder product\",\r\n        \"productNumber\" : \"SGDEMOCHECKCART03\",\r\n        \"stock\": 0,\r\n        \"isCloseout\": false,\r\n        \"releaseDate\": \"2022-01-29T11:00:04.389+00:00\"\r\n    },\r\n    \"cloneChildren\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/clone/product/{{created_product_noStock_id}}",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"clone",
												"product",
												"{{created_product_noStock_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: create max purchase prod",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Product created\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"{{created_product_maxPurchaseTen_id}}\",\r\n        \"name\" : \"API: max purchase 10 product\",\r\n        \"productNumber\" : \"SGDEMOCHECKCART02\",\r\n        \"stock\": 100,\r\n        \"maxPurchase\": 10,\r\n        \"releaseDate\": \"2022-01-29T11:00:04.389+00:00\"\r\n    },\r\n    \"cloneChildren\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/clone/product/{{catalog_product_advPrices_id}}",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"clone",
												"product",
												"{{catalog_product_advPrices_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: create reduced tax prod",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Product created\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"{{created_product_reducedTax_id}}\",\r\n        \"name\" : \"API: reduced tax product\",\r\n        \"productNumber\" : \"SG.DEMO.REDUCED.TAX.PROD\",\r\n        \"stock\": 100,\r\n        \"maxPurchase\": 10,\r\n        \"releaseDate\": \"2022-01-29T11:00:04.389+00:00\",\r\n        \"taxId\": \"{{gen_tax_reduced_id}}\"\r\n    },\r\n    \"cloneChildren\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/clone/product/{{catalog_product_advPrices_id}}",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"clone",
												"product",
												"{{catalog_product_advPrices_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: create prod Tag",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created single entity\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"358185f91d5c57511ffcedcf2aa284e3\",\r\n    \"productId\": \"{{catalog_product_freeShip}}\",\r\n    \"tagId\": \"{{created_tag_one}}\",\r\n    \"tag\": {\r\n        \"id\": \"{{created_tag_one}}\",\r\n        \"name\": \"API: prod tag 1\",\r\n        \"translations\": {\r\n            \"de-DE\": {\r\n                \"name\": \"API: prod tag 1 (DE)\"\r\n            }\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/product-tag",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"product-tag"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: create prev. price product",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// functionality is only supported in SW 6.4.10+\r",
													"if (Utility.version.isLT(pm.environment.get('gen_shopware_version'), '6.4.10.0')){\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Product created\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"{{created_product_prevPrice_id}}\",\r\n        \"name\": \"API: cheapest & previous price\",\r\n        \"productNumber\": \"SG.DEMO.PREV.PRICE\",\r\n        \"stock\": 999,\r\n        \"releaseDate\": \"2022-04-12T11:00:04.389+00:00\",\r\n        \"manufacturerId\": \"{{created_manufacturer_simpleOne_id}}\",\r\n        \"price\": [\r\n            {\r\n                \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n                \"net\": 417.64705882353,\r\n                \"gross\": 497,\r\n                \"linked\": true,\r\n                \"listPrice\": {\r\n                    \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n                    \"net\": 420.16806722689,\r\n                    \"gross\": 500,\r\n                    \"linked\": true,\r\n                    \"listPrice\": null,\r\n                    \"percentage\": null,\r\n                    \"regulationPrice\": null\r\n                },\r\n                \"percentage\": {\r\n                    \"net\": 0.6,\r\n                    \"gross\": 0.6\r\n                },\r\n                \"regulationPrice\": {\r\n                    \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n                    \"net\": 394.95798319328,\r\n                    \"gross\": 470,\r\n                    \"linked\": true,\r\n                    \"listPrice\": null,\r\n                    \"percentage\": null,\r\n                    \"regulationPrice\": null\r\n                }\r\n            }\r\n        ],\r\n        \"purchasePrices\": [\r\n            {\r\n                \"currencyId\": \"{{system_default_currency_id}}\",\r\n                \"net\": 294.11764705882,\r\n                \"gross\": 350,\r\n                \"linked\": true,\r\n                \"listPrice\": null,\r\n                \"percentage\": null,\r\n                \"regulationPrice\": null\r\n            }\r\n        ],\r\n        \"customFields\": {\r\n            \"api_product_custom_field_int_0001\": 14,\r\n            \"api_product_custom_field_bool_0001\": false,\r\n            \"api_product_custom_field_text_0001\": \"test text\",\r\n            \"api_product_custom_field_float_0001\": 40.31,\r\n            \"api_product_custom_field_multiselect_0001\": [\r\n                \"multi-option-0001\",\r\n                \"multi-option-0003\"\r\n            ],\r\n            \"api_product_custom_field_select_0001\": \"select-option-0001\",\r\n            \"api_product_custom_field_select_0002\": \"select-option-0004\"\r\n        }\r\n    },\r\n    \"cloneChildren\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/clone/product/{{catalog_product_main_id}}",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"clone",
												"product",
												"{{catalog_product_main_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Category",
							"item": [
								{
									"name": "setup",
									"item": [
										{
											"name": "SW: get CMS page ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Get values\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data[0].attributes.name).to.be.a('string');\r",
															"    pm.environment.set(\"gen_cms_page_default_id\", jsonData.data[0].id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"filter\": [\r\n        {\r\n            \"type\": \"multi\",\r\n            \"operator\": \"or\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"name\",\r\n                    \"value\": \"Default category layout\"\r\n                },\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"name\",\r\n                    \"value\": \"Default listing layout\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/search/cms-page",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"search",
														"cms-page"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: get slot id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"get slot id\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data).to.be.a('array').to.not.be.empty;\r",
															"\r",
															"    const slot = jsonData.data[0];\r",
															"    pm.expect(slot.id).to.be.a('string')\r",
															"    pm.environment.set('gen_cms_slot_productListing_id', slot.id);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"or\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"type\",\n                    \"value\": \"product-listing\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/search/cms-slot",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"search",
														"cms-slot"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "SW: create freeShip cat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created single entity\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{created_category_noFreeShip_id}}\",\r\n    \"displayNestedProducts\": true,\r\n    \"parentId\": \"{{category_freeTime_id}}\",\r\n    \"type\": \"page\",\r\n    \"productAssignmentType\": \"product_stream\",\r\n    \"translations\": {\r\n        \"en-GB\": {\r\n            \"name\": \"API: No Free Ship Dynamic Cat\"\r\n        },\r\n        \"de-DE\": {\r\n            \"name\": \"API: No Free Ship Dynamic Cat (DE)\"\r\n        }\r\n    },\r\n    \"cmsPageId\": \"{{gen_cms_page_default_id}}\",\r\n    \"productStream\": {\r\n        \"id\": \"{{created_stream_noFreeShip_id}}\",\r\n        \"name\": \"No Free Shipping products\",\r\n        \"filters\": [\r\n            {\r\n                \"productStreamId\": \"{{created_stream_noFreeShip_id}}\",\r\n                \"type\": \"equals\",\r\n                \"field\": \"shippingFree\",\r\n                \"value\": \"1\",\r\n                \"parent\": {\r\n                    \"productStreamId\": \"{{created_stream_noFreeShip_id}}\",\r\n                    \"type\": \"not\",\r\n                    \"value\": \"0\",\r\n                    \"parent\": {\r\n                        \"productStreamId\" :\"{{created_stream_noFreeShip_id}}\",\r\n                        \"type\": \"multi\",\r\n                        \"operator\": \"AND\"\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/category",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"category"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: create manual cat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created single entity\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{created_category_manual_id}}\",\r\n    \"displayNestedProducts\": true,\r\n    \"parentId\": \"{{category_freeTime_id}}\",\r\n    \"afterCategoryId\": \"{{created_category_noFreeShip_id}}\",\r\n    \"type\": \"page\",\r\n    \"productAssignmentType\": \"product\",\r\n    \"name\": \"API: Manual products category\",\r\n    \"cmsPageId\": \"{{gen_cms_page_default_id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/category",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"category"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: create prod map",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successfully created all SG system config entities\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"write-product-category\": {\r\n        \"entity\": \"product_category\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"productId\": \"{{catalog_product_disabled}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_freeShip}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_variant}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_props}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_advPrices_id}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/sync",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"sync"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: count all categories",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"pm.environment.set(\"gen_category_count\", jsonData.total);\r",
													"\r",
													"pm.test(\"Test finding home category by name: \" + pm.environment.get('category_main_name'), function () {\r",
													"    pm.expect(jsonData.total).to.eq(10);\r",
													"    jsonData.data.forEach(function(category, index) {\r",
													"           pm.environment.set(`gen_category_uid_${index}`, category);\r",
													"    });\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"filter\": [\r\n        { \r\n            \"type\": \"not\", \r\n            \"operator\": \"or\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"name\",\r\n                    \"value\": \"{{category_main_name}}\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/search-ids/category",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"search-ids",
												"category"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Promo / Coupons",
					"item": [
						{
							"name": "Tag Promo",
							"item": [
								{
									"name": "SW: create tag code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created entity successfully\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{created_promotion_tagCode_id}}\",\r\n    \"active\": true,\r\n    \"name\": \"API: tag 1 code\",\r\n    \"code\": \"{{created_promotion_tagCode_code}}\",\r\n    \"exclusive\": false,\r\n    \"useCodes\": true,\r\n    \"useIndividualCodes\": false,\r\n    \"useSetGroups\": false,\r\n    \"discounts\": [\r\n        {\r\n            \"considerAdvancedRules\": false,\r\n            \"scope\": \"cart\",\r\n            \"type\": \"absolute\",\r\n            \"value\": 2.33\r\n        }\r\n    ],\r\n    \"salesChannels\":[\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"priority\": 1\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/promotion",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"promotion"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: cart condition to tag code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created entity successfully\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"promotionId\": \"{{created_promotion_tagCode_id}}\",\r\n    \"ruleId\": \"{{created_rule_lineItem_tag1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/promotion-cart-rule",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"promotion-cart-rule"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SW: create coupon code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created entity successfully\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{created_promotion_byCode_id}}\",\r\n    \"active\": true,\r\n    \"name\": \"API: promo by code\",\r\n    \"code\": \"{{created_promotion_byCode_code}}\",\r\n    \"exclusive\": false,\r\n    \"useCodes\": true,\r\n    \"useIndividualCodes\": false,\r\n    \"useSetGroups\": false,\r\n    \"discounts\": [\r\n        {\r\n            \"considerAdvancedRules\": false,\r\n            \"scope\": \"cart\",\r\n            \"type\": \"absolute\",\r\n            \"value\": 2.25\r\n        }\r\n    ],\r\n    \"salesChannels\":[\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"priority\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/promotion",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"promotion"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: create ship only coupon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created entity successfully\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{created_promotion_shipOnly_id}}\",\r\n    \"active\": true,\r\n    \"name\": \"API: ship only promo by code\",\r\n    \"code\": \"{{created_promotion_shipOnly_code}}\",\r\n    \"exclusive\": false,\r\n    \"useCodes\": true,\r\n    \"useIndividualCodes\": false,\r\n    \"useSetGroups\": false,\r\n    \"discounts\": [\r\n        {\r\n            \"considerAdvancedRules\": false,\r\n            \"scope\": \"delivery\",\r\n            \"type\": \"percentage\",\r\n            \"value\": 10\r\n        }\r\n    ],\r\n    \"salesChannels\":[\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"priority\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/promotion",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"promotion"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: ship + cart coupon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created entity successfully\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{created_promotion_shipCart_id}}\",\r\n    \"active\": true,\r\n    \"name\": \"API: ship + cart coupon\",\r\n    \"code\": \"{{created_promotion_shipCart_code}}\",\r\n    \"exclusive\": false,\r\n    \"useCodes\": true,\r\n    \"useIndividualCodes\": false,\r\n    \"useSetGroups\": false,\r\n    \"discounts\": [\r\n        {\r\n            \"considerAdvancedRules\": false,\r\n            \"scope\": \"delivery\",\r\n            \"type\": \"percentage\",\r\n            \"value\": 100\r\n        },\r\n        {\r\n            \"considerAdvancedRules\": false,\r\n            \"scope\": \"cart\",\r\n            \"type\": \"percentage\",\r\n            \"value\": 20\r\n        }\r\n    ],\r\n    \"salesChannels\":[\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"priority\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/promotion",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"promotion"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: create USA billing promo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created entity successfully\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{created_promotion_customerUSA_id}}\",\r\n    \"active\": true,\r\n    \"name\": \"API: promo by Billing Country USA\",\r\n    \"code\": null,\r\n    \"exclusive\": false,\r\n    \"useCodes\": false,\r\n    \"useIndividualCodes\": false,\r\n    \"useSetGroups\": false,\r\n    \"discounts\": [\r\n        {\r\n            \"id\": \"{{created_discount_customerUSA_cart_1_id}}\",\r\n            \"considerAdvancedRules\": false,\r\n            \"scope\": \"cart\",\r\n            \"type\": \"percentage\",\r\n            \"value\": 10\r\n        },\r\n        {\r\n            \"id\": \"{{created_discount_customerUSA_delivery_1_id}}\",\r\n            \"considerAdvancedRules\": false,\r\n            \"scope\": \"delivery\",\r\n            \"type\": \"absolute\",\r\n            \"value\": 1.5\r\n        },\r\n        {\r\n            \"id\": \"{{created_discount_customerUSA_delivery_2_id}}\",\r\n            \"considerAdvancedRules\": false,\r\n            \"scope\": \"delivery\",\r\n            \"type\": \"absolute\",\r\n            \"value\": 1.0\r\n        }\r\n    ],\r\n    \"salesChannels\": [\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"priority\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/promotion",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"promotion"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: persona condition to USA promo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created entity successfully\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"promotionId\": \"{{created_promotion_customerUSA_id}}\",\r\n    \"ruleId\": \"{{gen_rule_usaCustomer_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/promotion-persona-rule",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"promotion-persona-rule"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: cart condition to USA promo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created entity successfully\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"promotionId\": \"{{created_promotion_customerUSA_id}}\",\r\n    \"ruleId\": \"{{default_rule_isShopgate_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/promotion-cart-rule",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"promotion-cart-rule"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reviews",
					"item": [
						{
							"name": "SW: create reviews",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully created all review entities\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"product_review\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n             {\r\n                \"id\": \"{{product_review_disabled_id}}\",\r\n                \"productId\": \"{{catalog_product_disabled}}\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n                \"languageId\": \"{{system_default_language}}\",\r\n                \"title\": \"{{$randomLoremWords}}\",\r\n                \"content\": \"{{$randomLoremSentence}}\",\r\n                \"points\": \"2\",\r\n                \"status\": true\r\n            },\r\n            {\r\n                \"id\": \"{{product_review_props_id}}\",\r\n                \"productId\": \"{{catalog_product_props}}\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n                \"languageId\": \"{{system_default_language}}\",\r\n                \"title\": \"Main product review\",\r\n                \"content\": \"Main product long content\",\r\n                \"points\": 4.4,\r\n                \"status\": true\r\n            },\r\n            {\r\n                \"id\": \"{{product_review_child_id}}\",\r\n                \"productId\": \"{{gen_product_variant_child_id}}\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n                \"languageId\": \"{{gen_language_german_id}}\",\r\n                \"title\": \"German Title\",\r\n                \"content\": \"German Content\",\r\n                \"points\": 3.7,\r\n                \"status\": true\r\n            },\r\n            {\r\n                \"id\": \"{{product_review_freeShip_disabled_id}}\",\r\n                \"productId\": \"{{catalog_product_freeShip}}\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n                \"languageId\": \"{{gen_language_german_id}}\",\r\n                \"title\": \"Disabled review\",\r\n                \"content\": \"Not approved by merchant\",\r\n                \"points\": 3,\r\n                \"status\": false,\r\n                \"customerId\": \"{{customer_default_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Shipping",
					"item": [
						{
							"name": "SW: find other shipping",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Check ship methods\", function () {\r",
											"    pm.expect(jsonData).to.haveOwnProperty('total').to.eq(2);\r",
											"});\r",
											"pm.test(\"Check express\", function () {\r",
											"    const express = Utility.getByName(jsonData.data, 'Express');\r",
											"    pm.expect(express, 'expected Express ship method to exist').to.not.be.undefined;\r",
											"    pm.environment.set(\"gen_shippingMethod_express\", express.id);\r",
											"});\r",
											"\r",
											"pm.test(\"Check standard\", function () {\r",
											"    const standard = Utility.getByName(jsonData.data, 'Standard');\r",
											"    pm.expect(standard, 'expected Standard ship method to exist').to.not.be.undefined;\r",
											"    pm.environment.set(\"gen_shippingMethod_standard\", standard.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n        { \r\n            \"type\": \"not\", \r\n            \"operator\": \"or\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"id\",\r\n                    \"value\": \"{{default_shipMethod_sgDefault_id}}\"\r\n                },\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"id\",\r\n                    \"value\": \"{{default_shipMethod_sgFree_id}}\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"associations\": {\r\n        \"availabilityRule\": {}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/shipping-method",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"shipping-method"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: TMP update rule IDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// marked as temp because of ticket SGSW6-88\r",
											"pm.test(\"Successfully updated all entities with proper Rules\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"update-shipping-method\": {\r\n        \"entity\": \"shipping_method\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{default_shipMethod_sgDefault_id}}\",\r\n                \"availabilityRuleId\": \"{{default_rule_isShopgate_id}}\"\r\n            },\r\n            {\r\n                \"id\": \"{{default_shipMethod_sgFree_id}}\",\r\n                \"availabilityRuleId\": \"{{default_rule_isShopgate_id}}\"\r\n            },\r\n            {\r\n                \"id\": \"{{gen_shippingMethod_express}}\",\r\n                \"availabilityRuleId\": \"{{gen_rule_cartGreaterThan0_id}}\"\r\n            },\r\n            {\r\n                \"id\": \"{{gen_shippingMethod_standard}}\",\r\n                \"availabilityRuleId\": \"{{gen_rule_cartGreaterThan0_id}}\"\r\n            }\r\n        ]\r\n    },\r\n    \"update-payment-method\": {\r\n        \"entity\": \"payment_method\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{default_payMethod_sgDefault_id}}\",\r\n                \"availabilityRuleId\": \"{{default_rule_isShopgate_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: create shipping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully created all entities\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"create-shipping-methods\": {\r\n        \"entity\": \"shipping_method\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{created_shipping_taxAuto}}\",\r\n                \"active\": true,\r\n                \"translations\": {\r\n                    \"en-GB\": {\r\n                        \"name\": \"API: shipping tax Auto\"\r\n                    },\r\n                    \"de-DE\": {\r\n                        \"name\": \"API: shipping tax Auto (DE)\"\r\n                    }\r\n                },\r\n                \"availabilityRuleId\": \"{{gen_rule_allValid_id}}\",\r\n                \"deliveryTimeId\": \"{{default_deliveryTime_sg_id}}\",\r\n                \"taxType\": \"auto\",\r\n                \"prices\": [\r\n                    {\r\n                        \"quantityStart\": 0,\r\n                        \"quantityEnd\": 1,\r\n                        \"currencyPrice\": [\r\n                            {\r\n                                \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n                                \"net\": 4,\r\n                                \"gross\": 5,\r\n                                \"linked\": false\r\n                            },\r\n                            {\r\n                                \"currencyId\": \"{{gen_currency_usd_id}}\",\r\n                                \"net\": 6,\r\n                                \"gross\": 7,\r\n                                \"linked\": false\r\n                            }\r\n                        ],\r\n                        \"calculation\": 1,\r\n                        \"id\": \"318c9103807bf03b9934b4ae5ea8ff04\"\r\n                    },\r\n                    {\r\n                        \"quantityStart\": 2,\r\n                        \"quantityEnd\": null,\r\n                        \"currencyPrice\": [\r\n                            {\r\n                                \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n                                \"net\": 7,\r\n                                \"gross\": 8,\r\n                                \"linked\": false\r\n                            }\r\n                        ],\r\n                        \"calculation\": 1,\r\n                        \"id\": \"86951016d2eb8e81277051d0acb4653d\"\r\n                    },\r\n                    {\r\n                        \"ruleId\": \"{{created_rule_shippingUSA}}\",\r\n                        \"quantityStart\": 150,\r\n                        \"quantityEnd\": null,\r\n                        \"currencyPrice\": [\r\n                            {\r\n                                \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n                                \"net\": 3,\r\n                                \"gross\": 4,\r\n                                \"linked\": false\r\n                            },\r\n                            {\r\n                                \"currencyId\": \"{{gen_currency_usd_id}}\",\r\n                                \"net\": 4,\r\n                                \"gross\": 5,\r\n                                \"linked\": false\r\n                            }\r\n                        ],\r\n                        \"calculation\": 2,\r\n                        \"id\": \"fd785fe1af5b8b0afa4fe1aa2f5b46f8\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"id\": \"{{created_shipping_taxHighest}}\",\r\n                \"active\": true,\r\n                \"translations\": {\r\n                    \"en-GB\": {\r\n                        \"name\": \"API: shipping tax Highest\"\r\n                    },\r\n                    \"de-DE\": {\r\n                        \"name\": \"API: shipping tax Highest (DE)\"\r\n                    }\r\n                },\r\n                \"availabilityRuleId\": \"{{gen_rule_allValid_id}}\",\r\n                \"deliveryTimeId\": \"{{default_deliveryTime_sg_id}}\",\r\n                \"taxType\": \"highest\",\r\n                \"prices\": [\r\n                    {\r\n                        \"quantityStart\": 0,\r\n                        \"quantityEnd\": 1,\r\n                        \"currencyPrice\": [\r\n                            {\r\n                                \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n                                \"net\": 4.10,\r\n                                \"gross\": 5.10,\r\n                                \"linked\": false\r\n                            },\r\n                            {\r\n                                \"currencyId\": \"{{gen_currency_usd_id}}\",\r\n                                \"net\": 6.10,\r\n                                \"gross\": 7.10,\r\n                                \"linked\": false\r\n                            }\r\n                        ],\r\n                        \"calculation\": 1,\r\n                        \"id\": \"1202e5b323349d37ac232086fb9196ab\"\r\n                    },\r\n                    {\r\n                        \"quantityStart\": 2,\r\n                        \"quantityEnd\": null,\r\n                        \"currencyPrice\": [\r\n                            {\r\n                                \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n                                \"net\": 7.10,\r\n                                \"gross\": 8.10,\r\n                                \"linked\": false\r\n                            }\r\n                        ],\r\n                        \"calculation\": 1,\r\n                        \"id\": \"bfb951d09cd6d2b07124ffddcd4f06a9\"\r\n                    },\r\n                    {\r\n                        \"ruleId\": \"{{created_rule_shippingGB}}\",\r\n                        \"quantityStart\": 150,\r\n                        \"quantityEnd\": null,\r\n                        \"currencyPrice\": [\r\n                            {\r\n                                \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n                                \"net\": 3.10,\r\n                                \"gross\": 4.10,\r\n                                \"linked\": false\r\n                            },\r\n                            {\r\n                                \"currencyId\": \"{{gen_currency_usd_id}}\",\r\n                                \"net\": 4.10,\r\n                                \"gross\": 5.10,\r\n                                \"linked\": false\r\n                            }\r\n                        ],\r\n                        \"calculation\": 2,\r\n                        \"id\": \"28a72f610a8c991c69b7ba56518a6e4d\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"id\": \"{{created_shipping_taxFixed}}\",\r\n                \"active\": true,\r\n                \"translations\": {\r\n                    \"en-GB\": {\r\n                        \"name\": \"API: shipping tax Fixed\"\r\n                    },\r\n                    \"de-DE\": {\r\n                        \"name\": \"API: shipping tax Fixed (DE)\"\r\n                    }\r\n                },\r\n                \"availabilityRuleId\": \"{{gen_rule_allValid_id}}\",\r\n                \"deliveryTimeId\": \"{{default_deliveryTime_sg_id}}\",\r\n                \"taxType\": \"fixed\",\r\n                \"taxId\": \"{{gen_tax_reduced_id}}\",\r\n                \"prices\": [\r\n                    {\r\n                        \"quantityStart\": 0,\r\n                        \"quantityEnd\": 1,\r\n                        \"currencyPrice\": [\r\n                            {\r\n                                \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n                                \"net\": 4.20,\r\n                                \"gross\": 5.20,\r\n                                \"linked\": false\r\n                            },\r\n                            {\r\n                                \"currencyId\": \"{{gen_currency_usd_id}}\",\r\n                                \"net\": 6.20,\r\n                                \"gross\": 7.20,\r\n                                \"linked\": false\r\n                            }\r\n                        ],\r\n                        \"calculation\": 1,\r\n                        \"id\": \"e8b238f9b34609b27dcf894035018e3b\"\r\n                    },\r\n                    {\r\n                        \"quantityStart\": 2,\r\n                        \"quantityEnd\": null,\r\n                        \"currencyPrice\": [\r\n                            {\r\n                                \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n                                \"net\": 7.20,\r\n                                \"gross\": 8.20,\r\n                                \"linked\": false\r\n                            }\r\n                        ],\r\n                        \"calculation\": 1,\r\n                        \"id\": \"0f10a0cabdfebf782ac28e451c12f3ef\"\r\n                    },\r\n                    {\r\n                        \"ruleId\": \"{{created_rule_shippingGB}}\",\r\n                        \"quantityStart\": 150,\r\n                        \"quantityEnd\": null,\r\n                        \"currencyPrice\": [\r\n                            {\r\n                                \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n                                \"net\": 3.20,\r\n                                \"gross\": 4.20,\r\n                                \"linked\": false\r\n                            },\r\n                            {\r\n                                \"currencyId\": \"{{gen_currency_usd_id}}\",\r\n                                \"net\": 4.20,\r\n                                \"gross\": 5.20,\r\n                                \"linked\": false\r\n                            }\r\n                        ],\r\n                        \"calculation\": 2,\r\n                        \"id\": \"16bfe960e480a361adfda182f5975a42\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"id\": \"{{created_shipping_cart5k}}\",\r\n                \"active\": true,\r\n                \"translations\": {\r\n                    \"en-GB\": {\r\n                        \"name\": \"API: shipping cart 5k+\"\r\n                    },\r\n                    \"de-DE\": {\r\n                        \"name\": \"API: shipping cart 5k+ (DE)\"\r\n                    }\r\n                },\r\n                \"availabilityRuleId\": \"{{created_rule_cart5k}}\",\r\n                \"deliveryTimeId\": \"{{default_deliveryTime_sg_id}}\",\r\n                \"taxType\": \"auto\",\r\n                \"prices\": [\r\n                    {\r\n                        \"quantityStart\": 0,\r\n                        \"quantityEnd\": null,\r\n                        \"currencyPrice\": [\r\n                            {\r\n                                \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n                                \"net\": 3.77,\r\n                                \"gross\": 3.83,\r\n                                \"linked\": false\r\n                            }\r\n                        ],\r\n                        \"calculation\": 1,\r\n                        \"id\": \"84192e49701bfff2599ecf75cebe18bc\"\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: add ship to channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully updated all entities\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"add-shipping-methods-to-channel\": {\r\n        \"entity\": \"sales_channel_shipping_method\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"8024ecf35ea702a0226c169dc8b4f5b9\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n                \"shippingMethodId\": \"{{created_shipping_taxAuto}}\"\r\n            },\r\n            {\r\n                \"id\": \"68dc87bda5c9e54e27b3237e409c7653\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n                \"shippingMethodId\": \"{{created_shipping_taxHighest}}\"\r\n            },\r\n            {\r\n                \"id\": \"25dc19720c2e67b4e0365518ffced6f2\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n                \"shippingMethodId\": \"{{created_shipping_taxFixed}}\"\r\n            },\r\n            {\r\n                \"id\": \"a702e8bd39e9c1e3b7c1da4d81cfb2d0\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n                \"shippingMethodId\": \"{{created_shipping_cart5k}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Payment",
					"item": [
						{
							"name": "SW: create payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully created entities\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"create-payment-methods\": {\r\n        \"entity\": \"payment_method\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{created_payment_customerUSA_id}}\",\r\n                \"active\": true,\r\n                \"translations\": {\r\n                    \"en-GB\": {\r\n                        \"name\": \"API: Generic USA billing\"\r\n                    },\r\n                    \"de-DE\": {\r\n                        \"name\": \"API: Generic USA billing (DE)\"\r\n                    }\r\n                },\r\n                \"availabilityRuleId\": \"{{created_rule_shippingUSA}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: add payment to channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully updated all entities\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"add-payment-methods-to-channel\": {\r\n        \"entity\": \"sales_channel_payment_method\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"bb9f742a1426a9f3af6f32596693e395\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n                \"paymentMethodId\": \"{{created_payment_customerUSA_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: find inactive payment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Check payment methods\", function () {\r",
											"    pm.expect(jsonData).to.haveOwnProperty('total').to.eq(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Check direct debit\", function () {\r",
											"    const direct = Utility.getByName(jsonData.data, 'Direct Debit');\r",
											"    pm.expect(direct, 'expected Direct Debit payment method to exist').to.not.be.undefined;\r",
											"    pm.environment.set(\"gen_paymentMethod_directDebit\", direct.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n        { \r\n            \"type\": \"multi\", \r\n            \"operator\": \"and\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"active\",\r\n                    \"value\": false\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/payment-method",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"payment-method"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "General Errors",
			"item": [
				{
					"name": "SG: incorrect login error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error_text).to.eq('authentication failed');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}",
								"disabled": true
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_ping}}",
									"type": "text"
								},
								{
									"key": "debug_log",
									"value": "1",
									"type": "text"
								},
								{
									"key": "use_errorhandler",
									"value": "1",
									"type": "text"
								},
								{
									"key": "use_shutdown_handler",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: incorrect shop",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Shop number does not exist\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eq(24);",
									"    pm.expect(jsonData.error_text).to.eq('No shop_number exists in the Shopgate configuration. Configure a specific channel.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "1234",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_ping}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: no shop_number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Shop number does not exist\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eq(24);",
									"    pm.expect(jsonData.error_text).to.eq('No shop_number property provided in the API call.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "action",
									"value": "{{framework_action_ping}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: get_orders bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Has error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(73);",
									"    pm.expect(jsonData.error_text).to.eql('invalid customer token');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_get_orders}}",
									"type": "text"
								},
								{
									"key": "customer_token",
									"value": "124",
									"type": "text"
								},
								{
									"key": "limit",
									"value": "1",
									"type": "text"
								},
								{
									"key": "offset",
									"value": "0",
									"type": "text"
								},
								{
									"key": "customer_language",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "M: mock server check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Mockoon is enabled\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error_text).to.eql('No Mockoon route found');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{mock_server_merchant_uri}}",
							"host": [
								"{{mock_server_merchant_uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: cart no address error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code check\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(999);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "*/*"
							},
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "action",
									"value": "{{framework_action_check_cart}}",
									"type": "text"
								},
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "cart[external_customer_id]",
									"value": "{{customer_default_id}}",
									"type": "text"
								},
								{
									"key": "cart[payment_group]",
									"value": "COD",
									"type": "text"
								},
								{
									"key": "cart[payment_method]",
									"value": "COD",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][]",
									"value": "null",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: addOrder no items (12)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No items in cart check\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(999);",
									"",
									"    // removed as SW 6.4.11 is having some kind of internal error",
									"    // pm.expect(jsonData).to.have.ownProperty('error_text').to.eq('Unknown error code: \\\"999\\\": Cart is empty');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_add_order}}",
									"type": "text"
								},
								{
									"key": "order_number",
									"value": "0012",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Multi-channel",
			"item": [
				{
					"name": "Init",
					"item": [
						{
							"name": "System",
							"item": [
								{
									"name": "Channel",
									"item": [
										{
											"name": "SW: get channel data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Get Main Sales Channel data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data[0].name).to.be.eq('Storefront');\r",
															"    pm.environment.set(\"gen_salesChannel_typeId\", jsonData.data[0].typeId);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"filter\": [\r\n    {\r\n          \"type\": \"equals\",\r\n          \"field\": \"name\",\r\n          \"value\": \"Storefront\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/search/sales-channel",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"search",
														"sales-channel"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: get Headless channel",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Get values\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data[0].name).to.be.eq('Headless');\r",
															"    pm.environment.set(\"gen_salesChannel_headless_id\", jsonData.data[0].id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"filter\": [\r\n    {\r\n          \"type\": \"equals\",\r\n          \"field\": \"name\",\r\n          \"value\": \"Headless\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/search/sales-channel",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"search",
														"sales-channel"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: update headless",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successfully updated channel\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"currencyId\": \"{{gen_currency_usd_id}}\",\r\n    \"countryId\": \"{{gen_country_USA_id}}\",\r\n    \"typeId\": \"{{gen_salesChannel_typeId}}\",\r\n    \"domains\": [\r\n        {\r\n            \"id\": \"5b94d397afe8cb29211756f3e9b2c91b\",\r\n            \"currencyId\": \"{{gen_currency_usd_id}}\",\r\n            \"languageId\": \"{{gen_language_german_id}}\",\r\n            \"snippetSetId\": \"{{gen_snippetSet_de}}\",\r\n            \"url\": \"{{host}}/de\"\r\n        }\r\n    ],\r\n    \"navigationCategoryId\": \"{{default_category_fTimeAndElectronics_id}}\",\r\n    \"customerGroupId\": \"{{created_customerGroup_net_id}}\",\r\n    \"countries\": [\r\n        {\r\n            \"id\": \"{{gen_country_USA_id}}\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/sales-channel/{{gen_salesChannel_headless_id}}",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"sales-channel",
														"{{gen_salesChannel_headless_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "SW: set configs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successfully created all system config entities\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n              {\r\n                \"id\": \"7272743035b89e9a170eda4b8053184c\",\r\n                \"configurationKey\": \"core.systemWideLoginRegistration.isCustomerBoundToSalesChannel\",\r\n                \"configurationValue\": true,\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/sync",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"sync"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Plugin",
							"item": [
								{
									"name": "SW: set SG configs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successfully created all SG system config entities\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"shopgate_api_credentials\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"a9cb89b54d594d1b87c4c55be91b7c16\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_headless_id}}\",\r\n                \"languageId\": \"{{gen_language_german_id}}\",\r\n                \"active\": true,\r\n                \"customerNumber\": {{customer_number}},\r\n                \"shopNumber\": {{shop_number_headless}},\r\n                \"apiKey\": \"{{api_key}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/sync",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"sync"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG: set mock api url",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number_headless}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_set_settings}}",
													"type": "text"
												},
												{
													"key": "shopgate_settings[0][name]",
													"value": "server",
													"type": "text"
												},
												{
													"key": "shopgate_settings[0][value]",
													"value": "custom",
													"type": "text"
												},
												{
													"key": "shopgate_settings[1][name]",
													"value": "api_url",
													"type": "text"
												},
												{
													"key": "shopgate_settings[1][value]",
													"value": "{{mock_server_merchant_uri}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Catalog",
							"item": [
								{
									"name": "SW: clone adv prices",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Product created\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "indexing-behavior",
												"value": "use-queue-indexing",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"{{created_product_headless_advPriceOne_id}}\",\r\n        \"name\": \"API: Headless Advanced Prices One\",\r\n        \"description\": \"Adv. price one description\",\r\n        \"translations\": {\r\n            \"de-DE\": {\r\n                \"name\": \"API: Headless Advanced Prices One (DE)\",\r\n                \"description\": \"Adv. price one description (DE)\"\r\n            }\r\n        },\r\n        \"productNumber\": \"SGDEMO10001\",\r\n        \"stock\": 500,\r\n        \"prices\": [\r\n            {\r\n                \"ruleId\": \"{{gen_rule_allValid_id}}\",\r\n                \"price\": [\r\n                    {\r\n                        \"currencyId\": \"{{system_default_currency_id}}\",\r\n                        \"net\": 80,\r\n                        \"gross\": 95.2,\r\n                        \"linked\": true,\r\n                        \"listPrice\": null,\r\n                        \"percentage\": null\r\n                    },\r\n                    {\r\n                        \"currencyId\": \"{{gen_currency_usd_id}}\",\r\n                        \"net\": 100,\r\n                        \"gross\": 119,\r\n                        \"linked\": true,\r\n                        \"listPrice\": null,\r\n                        \"percentage\": null\r\n                    }\r\n                ],\r\n                \"quantityStart\": 1,\r\n                \"quantityEnd\": 5\r\n            },\r\n            {\r\n                \"ruleId\": \"{{gen_rule_allValid_id}}\",\r\n                \"price\": [\r\n                    {\r\n                        \"currencyId\": \"{{system_default_currency_id}}\",\r\n                        \"net\": 150,\r\n                        \"gross\": 178.5,\r\n                        \"linked\": true,\r\n                        \"listPrice\": null,\r\n                        \"percentage\": null\r\n                    }\r\n                ],\r\n                \"quantityStart\": 6,\r\n                \"quantityEnd\": null\r\n            }\r\n        ],\r\n        \"visibilities\": [\r\n            {\r\n                \"salesChannelId\": \"{{gen_salesChannel_headless_id}}\",\r\n                \"visibility\": 30\r\n            }\r\n        ],\r\n        \"releaseDate\": \"2022-01-28T11:00:04.389+00:00\"\r\n    },\r\n    \"cloneChildren\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/clone/product/{{catalog_product_advPrices_id}}",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"clone",
												"product",
												"{{catalog_product_advPrices_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: create prev. price product",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// functionality is only supported in SW 6.4.10+\r",
													"if (Utility.version.isLT(pm.environment.get('gen_shopware_version'), '6.4.10.0')){\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Product created\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "indexing-behavior",
												"value": "use-queue-indexing",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"{{created_product_headless_prevPrice_id}}\",\r\n        \"name\": \"API: headless cheapest & previous price\",\r\n        \"translations\": {\r\n            \"de-DE\": {\r\n                \"name\": \"API: headless cheapest & previous price (DE)\"\r\n            }\r\n        },\r\n        \"productNumber\": \"SG.DEMO.HEADLESS.PREV.PRICE\",\r\n        \"stock\": 999,\r\n        \"releaseDate\": \"2022-04-12T11:00:04.389+00:00\",\r\n        \"price\": [\r\n            {\r\n                \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n                \"net\": 417.64705882353,\r\n                \"gross\": 497,\r\n                \"linked\": true,\r\n                \"listPrice\": {\r\n                    \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n                    \"net\": 420.16806722689,\r\n                    \"gross\": 500,\r\n                    \"linked\": true,\r\n                    \"listPrice\": null,\r\n                    \"percentage\": null,\r\n                    \"regulationPrice\": null\r\n                },\r\n                \"percentage\": {\r\n                    \"net\": 0.6,\r\n                    \"gross\": 0.6\r\n                },\r\n                \"regulationPrice\": {\r\n                    \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n                    \"net\": 394.95798319328,\r\n                    \"gross\": 470,\r\n                    \"linked\": true,\r\n                    \"listPrice\": null,\r\n                    \"percentage\": null,\r\n                    \"regulationPrice\": null\r\n                }\r\n            },\r\n            {\r\n                \"currencyId\": \"{{gen_currency_usd_id}}\",\r\n                \"net\": 617.64705882353,\r\n                \"gross\": 650,\r\n                \"linked\": true,\r\n                \"listPrice\": {\r\n                    \"currencyId\": \"{{gen_currency_usd_id}}\",\r\n                    \"net\": 720.16806722689,\r\n                    \"gross\": 750,\r\n                    \"linked\": true,\r\n                    \"listPrice\": null,\r\n                    \"percentage\": null,\r\n                    \"regulationPrice\": null\r\n                },\r\n                \"percentage\": {\r\n                    \"net\": 0.6,\r\n                    \"gross\": 0.6\r\n                },\r\n                \"regulationPrice\": {\r\n                    \"currencyId\": \"{{gen_currency_usd_id}}\",\r\n                    \"net\": 595.95798319328,\r\n                    \"gross\": 605,\r\n                    \"linked\": true,\r\n                    \"listPrice\": null,\r\n                    \"percentage\": null,\r\n                    \"regulationPrice\": null\r\n                }\r\n            }\r\n        ],\r\n        \"purchasePrices\": [\r\n            {\r\n                \"currencyId\": \"{{system_default_currency_id}}\",\r\n                \"net\": 294.11764705882,\r\n                \"gross\": 350,\r\n                \"linked\": true,\r\n                \"listPrice\": null,\r\n                \"percentage\": null,\r\n                \"regulationPrice\": null\r\n            },\r\n            {\r\n                \"currencyId\": \"{{gen_currency_usd_id}}\",\r\n                \"net\": 394.11764705882,\r\n                \"gross\": 450,\r\n                \"linked\": true,\r\n                \"listPrice\": null,\r\n                \"percentage\": null,\r\n                \"regulationPrice\": null\r\n            }\r\n        ],\r\n        \"visibilities\": [\r\n            {\r\n                \"salesChannelId\": \"{{gen_salesChannel_headless_id}}\",\r\n                \"visibility\": 30\r\n            }\r\n        ]\r\n    },\r\n    \"cloneChildren\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/clone/product/{{catalog_product_main_id}}",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"clone",
												"product",
												"{{catalog_product_main_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Reviews",
							"item": [
								{
									"name": "SW: create reviews",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successfully created all review entities\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"product_review\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{product_review_props_customer_id}}\",\r\n                \"productId\": \"{{catalog_product_props}}\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_headless_id}}\",\r\n                \"languageId\": \"{{system_default_language}}\",\r\n                \"title\": \"Customer attached review\",\r\n                \"content\": \"Customer attached review description\",\r\n                \"points\": 2.7,\r\n                \"status\": true,\r\n                \"customerId\": \"{{customer_default_id}}\"\r\n            },\r\n            {\r\n                \"id\": \"{{created_review_headless_advPriceOne_id}}\",\r\n                \"productId\": \"{{created_product_headless_advPriceOne_id}}\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_headless_id}}\",\r\n                \"languageId\": \"{{gen_language_german_id}}\",\r\n                \"title\": \"API: Review title 2 (DE)\",\r\n                \"content\": \"API: Review content 2 (DE)\",\r\n                \"points\": 5,\r\n                \"status\": true,\r\n                \"customerId\": \"{{created_customer_withCustomGrp_id}}\"\r\n            },\r\n            {\r\n                \"id\": \"{{product_review_freeShip_id}}\",\r\n                \"productId\": \"{{catalog_product_freeShip}}\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_headless_id}}\",\r\n                \"languageId\": \"{{gen_language_german_id}}\",\r\n                \"title\": \"Secondary channel review\",\r\n                \"content\": \"German Content too\",\r\n                \"points\": 1.1,\r\n                \"status\": true\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/sync",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"sync"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Customer",
							"item": [
								{
									"name": "SW: create DE customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Product created\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"{{created_customer_DE_id}}\",\r\n        \"groupId\" : \"{{created_customerGroup_net_id}}\",\r\n        \"email\": \"test_DEcustomer@example.com\",\r\n        \"firstName\" : \"API Created\",\r\n        \"lastName\": \"DE Customer\",\r\n        \"boundSalesChannelId\": \"{{gen_salesChannel_headless_id}}\",\r\n        \"languageId\": \"{{gen_language_german_id}}\"\r\n    },\r\n    \"cloneChildren\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/clone/customer/{{customer_default_id}}",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"clone",
												"customer",
												"{{customer_default_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Shipping",
							"item": [
								{
									"name": "SW: add ship to channel",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successfully updated all entities\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"add-shipping-methods-to-channel\": {\r\n        \"entity\": \"sales_channel_shipping_method\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"0289316cdbfa4476bd63b444a276b247\",\r\n                \"salesChannelId\": \"{{gen_salesChannel_headless_id}}\",\r\n                \"shippingMethodId\": \"{{created_shipping_taxAuto}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/sync",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"sync"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SW: re-index",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"offset\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/indexing/:indexer",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"indexing",
										":indexer"
									],
									"variable": [
										{
											"key": "indexer",
											"value": "product.indexer"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Category",
					"item": [
						{
							"name": "SG: check has 2 categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"const jsonObject = xml2Json(responseBody);",
											"pm.test(\"General check\", function() {",
											"    pm.expect(jsonObject.categories.category).to.be.length(2);",
											"});",
											"pm.test(\"Category check: no free ship\", function () {",
											"    const noFreeShip = getCategoryById(pm.environment.get('created_category_noFreeShip_id'));",
											"    pm.expect(noFreeShip, 'Name not set').to.have.property('name').to.be.a('string').to.be.eq('API: No Free Ship Dynamic Cat (DE)');",
											"    pm.expect(noFreeShip, 'Deeplink not set').to.have.property('deeplink').to.be.a('string').to.be.eq(pm.environment.get('host') + '/de/API-No-Free-Ship-Dynamic-Cat-DE/');",
											"});",
											"pm.test(\"Category check: manual sort\", function () {",
											"    pm.expect(jsonObject.categories.category).to.be.length(2);",
											"    const manual = getCategoryById(pm.environment.get('created_category_manual_id'));",
											"    pm.expect(manual, 'Name not set').to.have.property('name').to.be.a('string').to.be.eq('API: Manual products category');",
											"    pm.expect(manual, 'Deeplink not set').to.have.property('deeplink').to.be.a('string').to.be.eq(pm.environment.get('host') + '/de/API-Manual-products-category/');",
											"});",
											"",
											"function getCategoryById(id) {",
											"    return jsonObject.categories.category.find((category) => category.$.uid === id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number_headless}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_categories}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Product",
					"item": [
						{
							"name": "SG: check translations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"const jsonObject = xml2Json(responseBody);",
											"",
											"pm.test(\"Checking various translations\", function () {",
											"    pm.expect(jsonObject.items.item.deeplink).to.eq(pm.environment.get('host') + '/de/API-Headless-Advanced-Prices-One-DE/SGDEMO10001');",
											"    pm.expect(jsonObject.items.item.name).to.eq('API: Headless Advanced Prices One (DE)');",
											"    pm.expect(jsonObject.items.item.description).to.eq('Adv. price one description (DE)');",
											"    pm.expect(jsonObject.items.item.currency).to.eq('USD');",
											"    pm.expect(jsonObject.items.item.manufacturer, 'manufacturer should be defined').to.haveOwnProperty('title').to.eq('Shopware Freizeit');",
											"});",
											"",
											"pm.test('Check properties', function() {",
											"    const width = getPropertyByUid('width');",
											"    pm.expect(width, 'should have found width').to.haveOwnProperty('label').to.eq('Breite');",
											"",
											"    const height = getPropertyByUid('height');",
											"    pm.expect(height, 'should have found height').to.haveOwnProperty('label').to.eq('Höhe');",
											"",
											"    const length = getPropertyByUid('length');",
											"    pm.expect(length, 'should have found length').to.haveOwnProperty('label').to.eq('Länge');",
											"});",
											"",
											"pm.test(\"Checking regular price options\", function () {",
											"    pm.expect(jsonObject.items.item.prices.$, 'Price should have a type').to.haveOwnProperty('type').to.be.eq('gross',' Should be gross property set');",
											"    pm.expect(jsonObject.items.item.prices.price).to.be.eq('1112.308');",
											"    pm.expect(jsonObject.items.item.prices.base_price).to.be.eq('Inhalt: 1'); //check translation ",
											"});",
											"",
											"pm.test('Check first tier price', function() {",
											"    const firstTier = jsonObject.items.item.prices.tier_prices.tier_price.find(price => price.$.threshold === '1');",
											"    pm.expect(firstTier._).to.be.eq('993.308'); // 1112.3075-993.3075 = 119 (set by us)",
											"    pm.expect(firstTier.$.threshold).to.be.eq('1');",
											"    pm.expect(firstTier.$.max_quantity).to.be.eq('5');",
											"    pm.expect(firstTier.$.type).to.be.eq('fixed');",
											"    pm.expect(firstTier.$, 'Should not be a customer group tier price').not.haveOwnProperty('customer_group_uid');",
											"});",
											"pm.test('Check second tier price', function() {",
											"    const secondTier = jsonObject.items.item.prices.tier_prices.tier_price.find(price => price.$.threshold === '6');",
											"    pm.expect(secondTier._).to.be.eq('903.311'); // 1112.3075-903.3107 = 208.996725 (fallback price calculated by SW)",
											"    pm.expect(secondTier.$.threshold).to.be.eq('6');",
											"    pm.expect(secondTier.$.type).to.be.eq('fixed');",
											"    pm.expect(secondTier.$, 'Should not be a customer group tier price').not.haveOwnProperty('customer_group_uid');",
											"});",
											"",
											"function getPropertyByUid(uid) {",
											"    return jsonObject.items.item.properties.property.find((prop) => prop.$.uid === uid);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number_headless}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{created_product_headless_advPriceOne_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: check previous price",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// functionality is only supported in SW 6.4.10+",
											"if (Utility.version.isLT(pm.environment.get('gen_shopware_version'), '6.4.10.0')){",
											"    return;",
											"}",
											"",
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"const jsonObject = xml2Json(responseBody);",
											"pm.test('Check properties', function() {",
											"    const properties = jsonObject.items.item.properties.property;",
											"    pm.expect(properties).to.be.an('array', 'Should be a property array');",
											"    const previous = Utility.getXmlByUid(properties, 'previousPrice');",
											"    pm.expect(previous).to.haveOwnProperty('label').to.eq('Vorheriger Preis');",
											"    pm.expect(previous).to.haveOwnProperty('value').to.eq('605');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number_headless}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{created_product_headless_prevPrice_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Customer",
					"item": [
						{
							"name": "SG: register_customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const lastName = pm.environment.get('temp-last-name');",
											"const jsonData = pm.response.json();",
											"pm.test(\"No error\", function () {",
											"    pm.expect(jsonData.error).to.eql(0);",
											"});",
											"",
											"pm.test(\"Check customer data\", function () {",
											"    pm.expect(jsonData.user_data.mail).to.eql(pm.environment.get('created_customer_headless_net_email'));",
											"    pm.expect(jsonData.user_data.gender).to.eql('f');",
											"    pm.expect(jsonData.user_data.first_name).to.eql('API: headless customer');",
											"    pm.expect(jsonData.user_data.last_name).to.eql(lastName);",
											"    pm.expect(jsonData.user_data.birthday).to.eql('1987-05-19');",
											"    pm.expect(jsonData.user_data.customer_groups[0].id).to.eql(pm.environment.get('created_customerGroup_net_id'));",
											"    pm.expect(jsonData.user_data.customer_groups[0].name).to.eql('API: A custom NET group');",
											"});",
											"pm.test('Custom fields', function() {",
											"    pm.expect(jsonData.user_data.custom_fields).length(4, 'Expected 4 custom fields');",
											"    pm.expect(jsonData.user_data.custom_fields[3].internal_field_name).to.eq('account_type');",
											"    pm.expect(jsonData.user_data.custom_fields[3].value).to.eq('business');",
											"    pm.expect(jsonData.user_data.custom_fields[2].internal_field_name).to.eq('vat_ids');",
											"    pm.expect(jsonData.user_data.custom_fields[2].value).to.eq('1234,12345');",
											"    pm.expect(jsonData.user_data.custom_fields[1].internal_field_name).to.eq('affiliate_code');",
											"    pm.expect(jsonData.user_data.custom_fields[1].value).to.eq('AFFILIATE_CODE');",
											"    pm.expect(jsonData.user_data.custom_fields[0].internal_field_name).to.eq('title');",
											"    pm.expect(jsonData.user_data.custom_fields[0].value).to.eq('Big Boss');",
											"});",
											"",
											"pm.test(\"Billing\", function () {",
											"    const billing = jsonData.addresses.find(element => element.is_invoice_address === 1);",
											"    pm.expect(billing.is_invoice_address).to.eql(1);",
											"    pm.expect(billing.is_delivery_address).to.eql(0);",
											"    pm.expect(billing.country).to.eql('DE');",
											"    pm.expect(billing.zipcode).to.eql('54321');",
											"    pm.expect(billing.state).to.eql('DE-SH');",
											"    pm.expect(billing.first_name).to.eql('API: headless customer');",
											"    pm.expect(billing.last_name).to.eql(lastName);",
											"    pm.expect(billing.company).to.eql('My Company');",
											"    pm.expect(billing.street_2).to.eql('Street2');",
											"    pm.expect(billing.phone).to.eql('12345');",
											"    pm.expect(billing.gender).to.eql('f');",
											"    pm.expect(billing.custom_fields).length(2, 'Billing 2 custom fields')",
											"    pm.expect(billing.custom_fields[0].internal_field_name).to.eq('department');",
											"    pm.expect(billing.custom_fields[0].value).to.eq('Some department');",
											"    pm.expect(billing.custom_fields[1].internal_field_name).to.eq('phone_number');",
											"    pm.expect(billing.custom_fields[1].value).to.eq('12345');",
											"  });",
											"    ",
											"pm.test(\"Shipping\", function () {",
											"    const shipping = jsonData.addresses.find(element => element.is_delivery_address === 1)",
											"    pm.expect(shipping.country).to.eql('US');",
											"    pm.expect(shipping.zipcode).to.eql('12340');",
											"    pm.expect(shipping.state).to.be.eq('US-AZ');",
											"    pm.expect(shipping.first_name).to.not.eql('API: headless customer');",
											"    pm.expect(shipping.last_name).to.not.eql(lastName);",
											"    pm.expect(shipping.gender).to.eql('m');",
											"    pm.expect(shipping.custom_fields).length(0, 'Shipping should have no custom fields');",
											"});",
											"",
											"pm.test('Setting value', () => {",
											"    pm.expect(jsonData.user_data.customer_id, 'Customer ID should be here').to.not.be.undefined;",
											"    pm.environment.set('gen_customer_headless_net_id', jsonData.user_data.customer_id);",
											"});",
											"",
											"// unset temp variables",
											"pm.environment.unset(\"temp-last-name\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"temp-last-name\", pm.variables.replaceIn('{{$randomLastName}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number_headless}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_register_customer}}",
											"type": "text"
										},
										{
											"key": "user",
											"value": "{{created_customer_headless_net_email}}",
											"type": "text"
										},
										{
											"key": "pass",
											"value": "{{userPass}}",
											"type": "text"
										},
										{
											"key": "user_data[registration_date]",
											"value": "2021-01-27T13:07:38+0000",
											"type": "text"
										},
										{
											"key": "user_data[first_name]",
											"value": "API: headless customer",
											"type": "text"
										},
										{
											"key": "user_data[last_name]",
											"value": "{{temp-last-name}}",
											"type": "text"
										},
										{
											"key": "user_data[gender]",
											"value": "f",
											"type": "text"
										},
										{
											"key": "user_data[mail]",
											"value": "{{created_customer_headless_net_email}}",
											"type": "text"
										},
										{
											"key": "user_data[birthday]",
											"value": "1987-05-19",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][is_invoice_address]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][is_delivery_address]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][first_name]",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][last_name]",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][gender]",
											"value": "m",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][street_1]",
											"value": "{{$randomStreetAddress}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][zipcode]",
											"value": "12340",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][city]",
											"value": "{{$randomCity}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][country]",
											"value": "US",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][state]",
											"value": "US-AZ",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][is_invoice_address]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][is_delivery_address]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][first_name]",
											"value": "rewritten_first_name",
											"description": "Seems like this field get rewritten no matter what we set",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][last_name]",
											"value": "rewritten_last_name",
											"description": "Seems like this field get rewritten no matter what we set",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][gender]",
											"value": "m",
											"description": "Seems like this field get rewritten no matter what we set",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][street_1]",
											"value": "{{$randomStreetAddress}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][zipcode]",
											"value": "54321",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][city]",
											"value": "{{$randomCity}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][country]",
											"value": "DE",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][state]",
											"value": "DE-SH",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][company]",
											"value": "My Company",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][street_2]",
											"value": "Street2",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][phone]",
											"value": "12345",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][0][name]",
											"value": "VAT IDs",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][0][internal_field_name]",
											"value": "vat_ids",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][0][value]",
											"value": "1234,12345",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][1][internal_field_name]",
											"value": "affiliate_code",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][1][value]",
											"value": "AFFILIATE_CODE",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][2][internal_field_name]",
											"value": "title",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][2][value]",
											"value": "Big Boss",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][3][internal_field_name]",
											"value": "account_type",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][3][value]",
											"value": "business",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][4][internal_field_name]",
											"value": "cannotMap",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][4][value]",
											"value": "not mapped",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][0][internal_field_name]",
											"value": "title",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][0][value]",
											"value": "Mr.",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][1][internal_field_name]",
											"value": "notMapped",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][1][value]",
											"value": "not mapped either",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][2][internal_field_name]",
											"value": "department",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][2][value]",
											"value": "Some department",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][custom_fields][0][internal_field_name]",
											"value": "title",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][custom_fields][0][value]",
											"value": "Mrs.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: is only headless customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Customer only belongs to headless channel\", function () {",
											"    if (Utility.version.isLT(pm.environment.get('gen_shopware_version'), '6.6.0.0')) {",
											"        pm.expect(jsonData.error).to.eq(71);",
											"    } else {",
											"        pm.expect(jsonData.error).to.eq(76);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**\r",
											" *  SG Token generation\r",
											" */\r",
											"var tstamp = Math.floor(Date.now() / 1000);\r",
											"\r",
											"const customerNumber = pm.environment.get('customer_number');\r",
											"const apiKey = pm.environment.get('api_key');\r",
											"\r",
											"// Use the CryptoJS\r",
											"var authUser = customerNumber + \"-\" + tstamp;\r",
											"var tokenData = \"SPA-\" + customerNumber + \"-\" + tstamp + \"-\" + apiKey;\r",
											"\r",
											"var authToken = CryptoJS.SHA1(tokenData).toString();\r",
											"\r",
											"// Set the new header values\r",
											"pm.environment.set(\"gen_sg_header_auth_user\", authUser);\r",
											"pm.environment.set(\"gen_sg_header_auth_token\", authToken);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_customer}}",
											"type": "text"
										},
										{
											"key": "user",
											"value": "{{created_customer_headless_net_email}}",
											"type": "text"
										},
										{
											"key": "pass",
											"value": "{{userPass}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cart",
					"item": [
						{
							"name": "Inactive payment session",
							"item": [
								{
									"name": "SG: cart - no error",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check default customer group set for customer\", function () {",
													"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('gen_customer_group_main_id'));",
													"});",
													"",
													"pm.test(\"payment method check\", function () {",
													"    const payments = jsonData.payment_methods;",
													"    pm.expect(payments).lengthOf(3, 'Should have 3 payment methods');",
													"    pm.expect(Utility.getById(payments, 'handler_shopware_cashpayment'), 'COD').to.not.be.undefined;",
													"    pm.expect(Utility.getById(payments, 'handler_shopware_prepayment'), 'PREPAY').to.not.be.undefined;",
													"    pm.expect(Utility.getById(payments, 'handler_shopware_invoicepayment'), 'INV_PAY').to.not.be.undefined;",
													"    pm.expect(Utility.getById(payments, 'handler_shopgate_generichandler'), 'SG').to.be.undefined;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "{{framework_action_check_cart}}",
													"type": "text"
												},
												{
													"key": "shop_number",
													"value": "{{shop_number_headless}}",
													"type": "text"
												},
												{
													"key": "cart[external_customer_id]",
													"value": "{{customer_default_id}}",
													"type": "text"
												},
												{
													"key": "cart[payment_group]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[payment_method]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][country]",
													"value": "BD",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][country]",
													"value": "BD",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number]",
													"value": "{{catalog_product_main_id}}",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number_public]",
													"value": "SWDEMO10002",
													"type": "text"
												},
												{
													"key": "cart[items][0][quantity]",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "SW6M-51 ticket. Issue when a session has a bad reference to a payment method that is no longer active"
						},
						{
							"name": "SG: cart NET customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Check default customer group set for customer\", function () {",
											"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('created_customerGroup_net_id'));",
											"});",
											"pm.test(\"Check shipping methods\", function () {",
											"    pm.expect(jsonData.shipping_methods).length(3);",
											"    const autoShip = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxAuto'));",
											"    pm.expect(autoShip, 'Could not find custom shipping').to.not.be.undefined;",
											"    pm.expect(autoShip.title).to.eq('API: shipping tax Auto (DE)');",
											"});",
											"pm.test(\"General check\", function () {",
											"    pm.expect(jsonData.items).length(2, 'Should be 2 items in cart');",
											"    pm.expect(jsonData.currency).to.eq('USD');",
											"});",
											"const items = jsonData.items;",
											"pm.test(\"Check item success\", function () {",
											"    const item = Utility.getByItemNumber(items, pm.environment.get('created_product_headless_advPriceOne_id'));",
											"    pm.expect(item.is_buyable).to.eql(1);",
											"    pm.expect(item.qty_buyable).to.eql(5);",
											"    pm.expect(item.stock_quantity).to.eql(500);",
											"    pm.expect(item.unit_amount).to.eql(100);",
											"    pm.expect(item.unit_amount_with_tax).to.eql(119);",
											"});",
											"pm.test(\"Check item not found\", function () {",
											"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_advPrices_id'));",
											"    pm.expect(item.is_buyable).to.eql(0);",
											"    pm.expect(item.error).to.eql(301);",
											"});",
											"",
											"pm.test(\"payment method check\", function () {",
											"    const payments = jsonData.payment_methods;",
											"    pm.expect(payments).lengthOf(3, 'Should have 3 payment methods');",
											"    pm.expect(Utility.getById(payments, 'handler_shopware_cashpayment'), 'COD').to.not.be.undefined;",
											"    pm.expect(Utility.getById(payments, 'handler_shopware_prepayment'), 'PREPAY').to.not.be.undefined;",
											"    pm.expect(Utility.getById(payments, 'handler_shopware_invoicepayment'), 'INV_PAY').to.not.be.undefined;",
											"    pm.expect(Utility.getById(payments, 'handler_shopgate_generichandler'), 'SG').to.be.undefined;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "{{framework_action_check_cart}}",
											"type": "text"
										},
										{
											"key": "shop_number",
											"value": "{{shop_number_headless}}",
											"type": "text"
										},
										{
											"key": "cart[external_customer_id]",
											"value": "{{gen_customer_headless_net_id}}",
											"type": "text"
										},
										{
											"key": "cart[payment_group]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[payment_method]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][country]",
											"value": "BD",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][country]",
											"value": "US",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][state]",
											"value": "US-AZ",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number]",
											"value": "{{catalog_product_advPrices_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number_public]",
											"value": "SWDEMO10002",
											"type": "text"
										},
										{
											"key": "cart[items][0][name]",
											"value": "No Item",
											"type": "text"
										},
										{
											"key": "cart[items][0][quantity]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "cart[items][0][unit_amount]",
											"value": "630.25",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][0][unit_amount_with_tax]",
											"value": "750",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][1][item_number]",
											"value": "{{created_product_headless_advPriceOne_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][1][item_number_public]",
											"value": "SGDEMO10001",
											"type": "text"
										},
										{
											"key": "cart[items][1][quantity]",
											"value": "5",
											"type": "text"
										},
										{
											"key": "cart[items][1][unit_amount]",
											"value": "16.8067",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][1][unit_amount_with_tax]",
											"value": "20",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][2][item_number]",
											"value": "{{created_product_noStock_id}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][2][item_number_public]",
											"value": "SGDEMOCHECKCART01",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][2][quantity]",
											"value": "50",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][2][unit_amount]",
											"value": "1",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][2][unit_amount_with_tax]",
											"value": "1.19",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][3][item_number]",
											"value": "{{created_product_maxPurchaseTen_id}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][3][item_number_public]",
											"value": "SGDEMOCHECKCART02",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][3][quantity]",
											"value": "50",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][3][unit_amount]",
											"value": "672.27",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][3][unit_amount_with_tax]",
											"value": "850",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[external_coupons][0][code]",
											"value": "{{created_promotion_byCode_code}}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Order",
					"item": [
						{
							"name": "1002 - DE customer (Net)",
							"item": [
								{
									"name": "SG: DE customer context",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Check default customer group set for customer\", function () {",
													"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('created_customerGroup_net_id'));",
													"});",
													"",
													"pm.test(\"General check\", function () {",
													"    pm.expect(jsonData.items).length(1, 'Should be 1 items in cart');",
													"    pm.expect(jsonData.currency).to.eq('USD');",
													"});",
													"const items = jsonData.items;",
													"",
													"pm.test(\"Check item not found\", function () {",
													"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_advPrices_id'));",
													"    pm.expect(item.is_buyable).to.eql(0);",
													"    pm.expect(item.error).to.eql(301);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "{{framework_action_check_cart}}",
													"type": "text"
												},
												{
													"key": "shop_number",
													"value": "{{shop_number_headless}}",
													"type": "text"
												},
												{
													"key": "cart[external_customer_id]",
													"value": "{{created_customer_DE_id}}",
													"type": "text"
												},
												{
													"key": "cart[payment_group]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[payment_method]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][country]",
													"value": "BD",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][country]",
													"value": "US",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][state]",
													"value": "US-AZ",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number]",
													"value": "{{catalog_product_advPrices_id}}",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number_public]",
													"value": "SWDEMO10002",
													"type": "text"
												},
												{
													"key": "cart[items][0][quantity]",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG: addOrder (GB)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.test(\"Order added properly\", function () {",
													"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
													"    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
													"    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Save order id\", function () {",
													"    const order_number = Utility.getRequestVariableValue('order_number');",
													"    pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number_headless}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_add_order}}",
													"type": "text"
												},
												{
													"key": "order_number",
													"value": "1002",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG: get last order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"pm.test(\"Not an error\", function () {",
													"    pm.expect(jsonData.error).to.eq(0);",
													"    pm.expect(jsonData.orders).to.be.length(1);",
													"});",
													"",
													"const order = jsonData.orders[0];",
													"pm.test(\"Basic order data\", function () {",
													"    pm.expect(order.external_order_id).to.eql(pm.environment.get('gen_order_1002_id'));",
													"    pm.expect(order.status_name).to.eq('Offen');",
													"    pm.expect(order.mail).to.eq('test_DEcustomer@example.com');",
													"    pm.expect(order.phone).to.eq('+1-111-111-1111');",
													"    pm.expect(order.currency).to.eq('USD');",
													"    pm.expect(order.is_paid).to.eq(0);",
													"    pm.expect(order.payment_method).to.eq('Vorkasse (Eigene Abwicklung)');",
													"    pm.expect(order.payment_time).to.eq(null);",
													"    pm.expect(order.is_shipping_completed).to.eq(0);",
													"});",
													"",
													"pm.test(\"Billing Address check\", function () {",
													"    const address = order.invoice_address;",
													"    pm.expect(address.is_invoice_address).to.eq(1);",
													"    pm.expect(address.is_delivery_address).to.eq(0);",
													"    pm.expect(address.first_name).to.eq('First Name');",
													"    pm.expect(address.last_name).to.eq('Last Name');",
													"    pm.expect(address.gender).to.eq('f');",
													"    pm.expect(address.birthday).to.eq(null);",
													"    pm.expect(address.company).to.eq('My Company 1');",
													"    pm.expect(address.street_1).to.eq('My Street 1 A');",
													"    pm.expect(address.street_2).to.eq('My Street 2 A');",
													"    pm.expect(address.zipcode).to.eq('27404');",
													"    pm.expect(address.city).to.eq('Frankenbostel');",
													"    pm.expect(address.country).to.eq('GB');",
													"    pm.expect(address.state).to.eq('GB-ABC');",
													"    pm.expect(address.phone).to.eq('+1-111-111-1111');",
													"});",
													"",
													"pm.test(\"Shipping Address check\", function () {",
													"    const address = order.delivery_address;",
													"    pm.expect(address.is_invoice_address).to.eq(0);",
													"    pm.expect(address.is_delivery_address).to.eq(1);",
													"    pm.expect(address.first_name).to.eq('Bank');",
													"    pm.expect(address.last_name).to.eq('Payment');",
													"    pm.expect(address.gender).to.eq('m');",
													"    pm.expect(address.birthday).to.eq(null);",
													"    pm.expect(address.company).to.eq('My Company 2');",
													"    pm.expect(address.street_1).to.eq('My Street 1 B');",
													"    pm.expect(address.street_2).to.eq('My Street 2 B');",
													"    pm.expect(address.zipcode).to.eq('27404');",
													"    pm.expect(address.city).to.eq('Frankenbostel');",
													"    pm.expect(address.country).to.eq('GB');",
													"    pm.expect(address.state).to.eq('GB-ABC');",
													"    pm.expect(address.phone).to.eq('+2-111-111-1111');",
													"});",
													"",
													"pm.test(\"Delivery notes\", function () {",
													"    pm.expect(order.delivery_notes).to.be.length(1);",
													"    const note = order.delivery_notes[0];",
													"    pm.expect(note.shipping_service_id).to.eq('OTHER');",
													"    pm.expect(note.shipping_service_name).to.eq('Express');",
													"    pm.expect(note.tracking_number).to.eq('');",
													"    pm.expect(note.shipping_time).to.eq(null);",
													"});",
													"",
													"pm.test(\"Taxes\", function () {",
													"    pm.expect(order.order_taxes).to.be.length(1);",
													"    const tax = order.order_taxes[0];",
													"    pm.expect(tax.label).to.eq('zzgl. 20 % MwSt.');",
													"    pm.expect(tax.tax_percent).to.eq(20);",
													"    pm.expect(tax.amount).to.eq(20); // tax 20%, -> 20 from item, 1.03 from shipping",
													"});",
													"",
													"pm.test(\"Item check\", function () {",
													"    pm.expect(order.items).to.be.length(1);",
													"    const product = Utility.getByName(order.items, 'API: Headless Advanced Prices One (DE)');",
													"    pm.expect(product, 'Could not find SGDEMO10001').to.not.be.undefined;",
													"    pm.expect(product.item_number).to.eq(pm.environment.get('created_product_headless_advPriceOne_id'));",
													"    pm.expect(product.item_number_public).to.eq('SGDEMO10001');",
													"    pm.expect(product.quantity).to.eq(1);",
													"    pm.expect(product.unit_amount).to.eq(100);",
													"    pm.expect(product.unit_amount_with_tax).to.eq(120);",
													"    pm.expect(product.tax_percent).to.eq(20);",
													"    pm.expect(product.currency).to.eq('USD');",
													"    pm.expect(product.description).to.eq('Adv. price one description (DE)');",
													"});",
													"",
													"pm.test(\"Shipping extra cost check\", function () {",
													"    pm.expect(order.extra_costs).to.be.length(1);",
													"    const extraCost = order.extra_costs[0];",
													"    pm.expect(extraCost.type).to.eq('shipping');",
													"    pm.expect(extraCost.tax_percent).to.eq(20);",
													"    pm.expect(extraCost.amount).to.eq(6.18); // 1.03 shipping",
													"    pm.expect(extraCost.label).to.eq('Versandkosten');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number_headless}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_get_orders}}",
													"type": "text"
												},
												{
													"key": "customer_token",
													"value": "{{created_customer_DE_id}}",
													"type": "text"
												},
												{
													"key": "limit",
													"value": "1",
													"type": "text"
												},
												{
													"key": "offset",
													"value": "0",
													"type": "text"
												},
												{
													"key": "customer_language",
													"value": "",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SG: customer context",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Check default customer group set for customer\", function () {",
											"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('created_customerGroup_net_id'));",
											"});",
											"",
											"pm.test(\"General check\", function () {",
											"    pm.expect(jsonData.items).length(1, 'Should be 1 items in cart');",
											"    pm.expect(jsonData.currency).to.eq('USD');",
											"});",
											"const items = jsonData.items;",
											"",
											"pm.test(\"Check item not found\", function () {",
											"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_advPrices_id'));",
											"    pm.expect(item.is_buyable).to.eql(0);",
											"    pm.expect(item.error).to.eql(301);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "{{framework_action_check_cart}}",
											"type": "text"
										},
										{
											"key": "shop_number",
											"value": "{{shop_number_headless}}",
											"type": "text"
										},
										{
											"key": "cart[external_customer_id]",
											"value": "{{created_customer_withCustomGrp_id}}",
											"type": "text"
										},
										{
											"key": "cart[payment_group]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[payment_method]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][country]",
											"value": "BD",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][country]",
											"value": "US",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][state]",
											"value": "US-AZ",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number]",
											"value": "{{catalog_product_advPrices_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number_public]",
											"value": "SWDEMO10002",
											"type": "text"
										},
										{
											"key": "cart[items][0][quantity]",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: addOrder (US)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Order added properly\", function () {",
											"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
											"    const order_number = Utility.getRequestVariableValue('order_number');",
											"    pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number_headless}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_add_order}}",
											"type": "text"
										},
										{
											"key": "order_number",
											"value": "1000",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: check order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"One order found\", function () {\r",
											"    pm.expect(jsonData.total).to.eql(1);\r",
											"});\r",
											"\r",
											"const order = jsonData.data[0];\r",
											"pm.test(\"Status is still open\", function() {    \r",
											"    pm.expect(order.deliveries).to.have.length(1, 'Should have one delivery');\r",
											"    pm.expect(Utility.getMachineStateName(order.deliveries[0])).to.eq('open');\r",
											"});\r",
											"\r",
											"pm.test(\"Payment status is still open\", function() {    \r",
											"    pm.expect(order.transactions).to.have.length(1, 'Should have one payment transaction');\r",
											"    pm.expect(Utility.getMachineStateName(order.transactions[0])).to.eq('open');\r",
											"});\r",
											"\r",
											"pm.test(\"Check order data\", function () {\r",
											"    pm.expect(order.shippingTotal).to.eql(5.15); // gross 5.15 + (5.15*0.19)\r",
											"    pm.expect(order.amountNet).to.eql(105.15);\r",
											"    pm.expect(order.amountTotal).to.eql(125.13); // 19% tax -> 105.15 + 0.98 (ship) + 19 (item)\r",
											"    pm.expect(order.affiliateCode).to.eql(null);\r",
											"    pm.expect(order.campaignCode).to.eql(null);\r",
											"    pm.expect(order.orderCustomer.email).to.eql('test_customGrp@example.com');\r",
											"    pm.expect(order.orderCustomer.customFields).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n        {\r\n          \"type\": \"equals\",\r\n          \"field\": \"id\",\r\n          \"value\": \"{{gen_order_1000_id}}\"\r\n        }\r\n    ],\r\n    \"associations\":{\r\n        \"billingAddress\":{},\r\n        \"deliveries\": {\r\n            \"associations\": {\r\n                \"stateMachineState\": {}\r\n            }\r\n        },\r\n        \"transactions\": {\r\n            \"associations\": {\r\n                \"stateMachineState\": {}\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/order",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"order"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: get last order (US)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Not an error\", function () {",
											"    pm.expect(jsonData.error).to.eq(0);",
											"    pm.expect(jsonData.orders).to.be.length(1);",
											"});",
											"",
											"const order = jsonData.orders[0];",
											"pm.test(\"Basic order data\", function () {",
											"    pm.expect(order.external_order_id).to.eql(pm.environment.get('gen_order_1000_id'));",
											"    pm.expect(order.status_name).to.eq('Offen');",
											"    pm.expect(order.mail).to.eq('test_customGrp@example.com');",
											"    pm.expect(order.phone).to.eq('+1-111-111-1111');",
											"    pm.expect(order.currency).to.eq('USD');",
											"    pm.expect(order.is_paid).to.eq(0);",
											"    pm.expect(order.payment_method).to.eq('Vorkasse (Eigene Abwicklung)');",
											"    pm.expect(order.payment_time).to.eq(null);",
											"    pm.expect(order.is_shipping_completed).to.eq(0);",
											"});",
											"",
											"pm.test(\"Billing Address check\", function () {",
											"    const address = order.invoice_address;",
											"    pm.expect(address.is_invoice_address).to.eq(1);",
											"    pm.expect(address.is_delivery_address).to.eq(0);",
											"    pm.expect(address.first_name).to.eq('First Name');",
											"    pm.expect(address.last_name).to.eq('Last Name');",
											"    pm.expect(address.gender).to.eq('f');",
											"    pm.expect(address.birthday).to.eq(null);",
											"    pm.expect(address.company).to.eq('My Company 1');",
											"    pm.expect(address.street_1).to.eq('My Street 1 A');",
											"    pm.expect(address.street_2).to.eq('My Street 2 A');",
											"    pm.expect(address.zipcode).to.eq('27404');",
											"    pm.expect(address.city).to.eq('Frankenbostel');",
											"    pm.expect(address.country).to.eq('DE');",
											"    pm.expect(address.state).to.eq('DE-BB');",
											"    pm.expect(address.phone).to.eq('+1-111-111-1111');",
											"});",
											"",
											"pm.test(\"Shipping Address check\", function () {",
											"    const address = order.delivery_address;",
											"    pm.expect(address.is_invoice_address).to.eq(0);",
											"    pm.expect(address.is_delivery_address).to.eq(1);",
											"    pm.expect(address.first_name).to.eq('Bank');",
											"    pm.expect(address.last_name).to.eq('Payment');",
											"    pm.expect(address.gender).to.eq('m');",
											"    pm.expect(address.birthday).to.eq(null);",
											"    pm.expect(address.company).to.eq('My Company 2');",
											"    pm.expect(address.street_1).to.eq('My Street 1 B');",
											"    pm.expect(address.street_2).to.eq('My Street 2 B');",
											"    pm.expect(address.zipcode).to.eq('27404');",
											"    pm.expect(address.city).to.eq('Frankenbostel');",
											"    pm.expect(address.country).to.eq('DE');",
											"    pm.expect(address.state).to.eq('DE-BB');",
											"    pm.expect(address.phone).to.eq('+2-111-111-1111');",
											"});",
											"",
											"pm.test(\"Delivery notes\", function () {",
											"    pm.expect(order.delivery_notes).to.be.length(1);",
											"    const note = order.delivery_notes[0];",
											"    pm.expect(note.shipping_service_id).to.eq('OTHER');",
											"    pm.expect(note.shipping_service_name).to.eq('Express');",
											"    pm.expect(note.tracking_number).to.eq('');",
											"    pm.expect(note.shipping_time).to.eq(null);",
											"});",
											"",
											"pm.test(\"Taxes\", function () {",
											"    pm.expect(order.order_taxes).to.be.length(1);",
											"    const tax = order.order_taxes[0];",
											"    pm.expect(tax.label).to.eq('zzgl. 19 % MwSt.');",
											"    pm.expect(tax.tax_percent).to.eq(19);",
											"    pm.expect(tax.amount).to.eq(19); // tax 19%, -> 19 from item, 0.98 from shipping",
											"});",
											"",
											"pm.test(\"Item check\", function () {",
											"    pm.expect(order.items).to.be.length(1);",
											"    const product = Utility.getByName(order.items, 'API: Headless Advanced Prices One (DE)');",
											"    pm.expect(product, 'Could not find SGDEMO10001').to.not.be.undefined;",
											"    pm.expect(product.item_number).to.eq(pm.environment.get('created_product_headless_advPriceOne_id'));",
											"    pm.expect(product.item_number_public).to.eq('SGDEMO10001');",
											"    pm.expect(product.quantity).to.eq(1);",
											"    pm.expect(product.unit_amount).to.eq(100);",
											"    pm.expect(product.unit_amount_with_tax).to.eq(119);",
											"    pm.expect(product.tax_percent).to.eq(19);",
											"    pm.expect(product.currency).to.eq('USD');",
											"    pm.expect(product.description).to.eq('Adv. price one description (DE)');",
											"});",
											"",
											"pm.test(\"Shipping extra cost check\", function () {",
											"    pm.expect(order.extra_costs).to.be.length(1);",
											"    const extraCost = order.extra_costs[0];",
											"    pm.expect(extraCost.type).to.eq('shipping');",
											"    pm.expect(extraCost.tax_percent).to.eq(19);",
											"    pm.expect(extraCost.amount).to.eq(6.13); // 5.15 + 0.98 (20% tax)",
											"    pm.expect(extraCost.label).to.eq('Versandkosten');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number_headless}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_orders}}",
											"type": "text"
										},
										{
											"key": "customer_token",
											"value": "{{created_customer_withCustomGrp_id}}",
											"type": "text"
										},
										{
											"key": "limit",
											"value": "1",
											"type": "text"
										},
										{
											"key": "offset",
											"value": "0",
											"type": "text"
										},
										{
											"key": "customer_language",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: addOrder (GB)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Order added properly\", function () {",
											"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Save order id\", function () {",
											"    const order_number = Utility.getRequestVariableValue('order_number');",
											"    pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number_headless}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_add_order}}",
											"type": "text"
										},
										{
											"key": "order_number",
											"value": "1001",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: get last order (GB)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Not an error\", function () {",
											"    pm.expect(jsonData.error).to.eq(0);",
											"    pm.expect(jsonData.orders).to.be.length(1);",
											"});",
											"",
											"const order = jsonData.orders[0];",
											"pm.test(\"Basic order data\", function () {",
											"    pm.expect(order.external_order_id).to.eql(pm.environment.get('gen_order_1001_id'));",
											"    pm.expect(order.status_name).to.eq('Offen');",
											"    pm.expect(order.mail).to.eq('test_customGrp@example.com');",
											"    pm.expect(order.phone).to.eq('+1-111-111-1111');",
											"    pm.expect(order.currency).to.eq('USD');",
											"    pm.expect(order.is_paid).to.eq(0);",
											"    pm.expect(order.payment_method).to.eq('Vorkasse (Eigene Abwicklung)');",
											"    pm.expect(order.payment_time).to.eq(null);",
											"    pm.expect(order.is_shipping_completed).to.eq(0);",
											"});",
											"",
											"pm.test(\"Billing Address check\", function () {",
											"    const address = order.invoice_address;",
											"    pm.expect(address.is_invoice_address).to.eq(1);",
											"    pm.expect(address.is_delivery_address).to.eq(0);",
											"    pm.expect(address.first_name).to.eq('First Name');",
											"    pm.expect(address.last_name).to.eq('Last Name');",
											"    pm.expect(address.gender).to.eq('f');",
											"    pm.expect(address.birthday).to.eq(null);",
											"    pm.expect(address.company).to.eq('My Company 1');",
											"    pm.expect(address.street_1).to.eq('My Street 1 A');",
											"    pm.expect(address.street_2).to.eq('My Street 2 A');",
											"    pm.expect(address.zipcode).to.eq('27404');",
											"    pm.expect(address.city).to.eq('Frankenbostel');",
											"    pm.expect(address.country).to.eq('GB');",
											"    pm.expect(address.state).to.eq('GB-ABC');",
											"    pm.expect(address.phone).to.eq('+1-111-111-1111');",
											"});",
											"",
											"pm.test(\"Shipping Address check\", function () {",
											"    const address = order.delivery_address;",
											"    pm.expect(address.is_invoice_address).to.eq(0);",
											"    pm.expect(address.is_delivery_address).to.eq(1);",
											"    pm.expect(address.first_name).to.eq('Bank');",
											"    pm.expect(address.last_name).to.eq('Payment');",
											"    pm.expect(address.gender).to.eq('m');",
											"    pm.expect(address.birthday).to.eq(null);",
											"    pm.expect(address.company).to.eq('My Company 2');",
											"    pm.expect(address.street_1).to.eq('My Street 1 B');",
											"    pm.expect(address.street_2).to.eq('My Street 2 B');",
											"    pm.expect(address.zipcode).to.eq('27404');",
											"    pm.expect(address.city).to.eq('Frankenbostel');",
											"    pm.expect(address.country).to.eq('GB');",
											"    pm.expect(address.state).to.eq('GB-ABC');",
											"    pm.expect(address.phone).to.eq('+2-111-111-1111');",
											"});",
											"",
											"pm.test(\"Delivery notes\", function () {",
											"    pm.expect(order.delivery_notes).to.be.length(1);",
											"    const note = order.delivery_notes[0];",
											"    pm.expect(note.shipping_service_id).to.eq('OTHER');",
											"    pm.expect(note.shipping_service_name).to.eq('Express');",
											"    pm.expect(note.tracking_number).to.eq('');",
											"    pm.expect(note.shipping_time).to.eq(null);",
											"});",
											"",
											"pm.test(\"Taxes\", function () {",
											"    pm.expect(order.order_taxes).to.be.length(1);",
											"    const tax = order.order_taxes[0];",
											"    pm.expect(tax.label).to.eq('zzgl. 20 % MwSt.');",
											"    pm.expect(tax.tax_percent).to.eq(20);",
											"    pm.expect(tax.amount).to.eq(20); // tax 20%, -> 20 from item, 1.03 from shipping",
											"});",
											"",
											"pm.test(\"Item check\", function () {",
											"    pm.expect(order.items).to.be.length(1);",
											"    const product = Utility.getByName(order.items, 'API: Headless Advanced Prices One (DE)');",
											"    pm.expect(product, 'Could not find SGDEMO10001').to.not.be.undefined;",
											"    pm.expect(product.item_number).to.eq(pm.environment.get('created_product_headless_advPriceOne_id'));",
											"    pm.expect(product.item_number_public).to.eq('SGDEMO10001');",
											"    pm.expect(product.quantity).to.eq(1);",
											"    pm.expect(product.unit_amount).to.eq(100);",
											"    pm.expect(product.unit_amount_with_tax).to.eq(120);",
											"    pm.expect(product.tax_percent).to.eq(20);",
											"    pm.expect(product.currency).to.eq('USD');",
											"    pm.expect(product.description).to.eq('Adv. price one description (DE)');",
											"});",
											"",
											"pm.test(\"Shipping extra cost check\", function () {",
											"    pm.expect(order.extra_costs).to.be.length(1);",
											"    const extraCost = order.extra_costs[0];",
											"    pm.expect(extraCost.type).to.eq('shipping');",
											"    pm.expect(extraCost.tax_percent).to.eq(20);",
											"    pm.expect(extraCost.amount).to.eq(6.18); // 5.15 + 1.03 (20% tax)",
											"    pm.expect(extraCost.label).to.eq('Versandkosten');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number_headless}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_orders}}",
											"type": "text"
										},
										{
											"key": "customer_token",
											"value": "{{created_customer_withCustomGrp_id}}",
											"type": "text"
										},
										{
											"key": "limit",
											"value": "1",
											"type": "text"
										},
										{
											"key": "offset",
											"value": "0",
											"type": "text"
										},
										{
											"key": "customer_language",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reviews",
					"item": [
						{
							"name": "All Channel Setting",
							"item": [
								{
									"name": "SW: set review channel export",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successfully set configs\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{gen_config_sg_export_allChannelReviews_id}}\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.exportAllChannelReviews\",\r\n                \"configurationValue\": true\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/sync",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"sync"
											]
										},
										"description": "Set data protection acceptance to required - this config check makes sure our register customer does not fail if this flag is enabled."
									},
									"response": []
								},
								{
									"name": "SG: all reviews",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Not an error\", function () {",
													"    pm.response.to.not.have.jsonBody('error');",
													"});",
													"",
													"const jsonObject = xml2Json(responseBody);",
													"const reviews = jsonObject.reviews.review;",
													"pm.test(\"general check\", function () {",
													"    pm.expect(reviews).length(6, 'Expecting all reviews');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number_headless}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_get_reviews}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: unset review channel export",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successfully set configs\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{gen_config_sg_export_allChannelReviews_id}}\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.exportAllChannelReviews\",\r\n                \"configurationValue\": false\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/sync",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"sync"
											]
										},
										"description": "Set data protection acceptance to required - this config check makes sure our register customer does not fail if this flag is enabled."
									},
									"response": []
								}
							],
							"description": "Testing config to enable/disable export from all sales channels instead of specific ones"
						},
						{
							"name": "SG: reviews",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');",
											"const now = moment().subtract(2, 'hours').format('YYYY-MM-DD');",
											"",
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"const jsonObject = xml2Json(responseBody);",
											"const reviews = jsonObject.reviews.review;",
											"pm.test(\"general check\", function () {",
											"    pm.expect(reviews).length(3, 'Expecting only 3 reviews');",
											"});",
											"pm.test(\"advanced price one reviews\", function () {",
											"    const advPriceOneReviewOne = Utility.getXmlByUid(reviews, pm.environment.get('created_review_headless_advPriceOne_id'));",
											"    pm.expect(advPriceOneReviewOne).to.have.property('item_uid').to.eq(pm.environment.get('created_product_headless_advPriceOne_id'));",
											"    pm.expect(advPriceOneReviewOne.score).to.eq('10');",
											"    pm.expect(advPriceOneReviewOne.reviewer_name).to.eq('API Created C.');",
											"    pm.expect(advPriceOneReviewOne.title).to.eq('API: Review title 2 (DE)');",
											"    pm.expect(advPriceOneReviewOne.text).to.eq('API: Review content 2 (DE)');",
											"    pm.expect(advPriceOneReviewOne).to.haveOwnProperty('date').to.eq(now);",
											"});",
											"pm.test(\"freeShip reviews\", function () {",
											"    const freeShipReviewOne = Utility.getXmlByUid(reviews, pm.environment.get('product_review_freeShip_id'));",
											"    pm.expect(freeShipReviewOne).to.have.property('item_uid').to.eq(pm.environment.get('catalog_product_freeShip'));",
											"    pm.expect(freeShipReviewOne.score).to.eq('2');",
											"    pm.expect(freeShipReviewOne.reviewer_name).to.eq('*****');",
											"    pm.expect(freeShipReviewOne.title).to.eq('Secondary channel review');",
											"    pm.expect(freeShipReviewOne.text).to.eq('German Content too');",
											"    pm.expect(freeShipReviewOne).to.haveOwnProperty('date').to.eq(now);",
											"});",
											"pm.test(\"properties product reviews\", function () {",
											"    const propertyProductReviewOne = Utility.getXmlByUid(reviews, pm.environment.get('product_review_props_customer_id'));",
											"    pm.expect(propertyProductReviewOne).to.have.property('item_uid').to.eq(pm.environment.get('catalog_product_props'));",
											"    pm.expect(propertyProductReviewOne.score).to.eq('5');",
											"    pm.expect(propertyProductReviewOne.title).to.eq('Customer attached review');",
											"    pm.expect(propertyProductReviewOne.reviewer_name).to.eq('Max M.');",
											"    pm.expect(propertyProductReviewOne.text).to.eq('Customer attached review description');",
											"    pm.expect(propertyProductReviewOne).to.haveOwnProperty('date').to.eq(now);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number_headless}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_reviews}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: reviews (uids head)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.test(\"have reviews\", function () {",
											"    const jsonObject = xml2Json(responseBody);",
											"    pm.expect(jsonObject.reviews.review).length(2, 'Expecting only 2 reviews');",
											"    pm.expect(jsonObject.reviews.review[0].$.uid).to.eq(pm.environment.get('product_review_freeShip_id'));",
											"    pm.expect(jsonObject.reviews.review[1].$.uid).to.eq(pm.environment.get('product_review_props_customer_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number_headless}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_reviews}}",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{product_review_freeShip_id}}",
											"type": "text"
										},
										{
											"key": "uids[1]",
											"value": "{{product_review_props_customer_id}}",
											"type": "text"
										},
										{
											"key": "uids[2]",
											"value": "{{product_review_freeShip_disabled_id}}",
											"description": "disabled review wont export",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SG: get_settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"pm.test(\"Check issues with payload\", function () {",
									"    pm.expect(jsonData.error, 'SDK Error').to.eql(0);",
									"    pm.expect(jsonData.customer_groups).to.be.a('array').to.be.length(2);",
									"});",
									"",
									"pm.test(\"Check custom NET group\", function () {",
									"    const nonDefaultGroup = findByName('API: A custom NET group');",
									"    pm.expect(nonDefaultGroup).to.haveOwnProperty('id').to.eq(pm.environment.get('created_customerGroup_net_id'));",
									"    pm.expect(nonDefaultGroup).to.haveOwnProperty('is_default').to.eq('1');",
									"});",
									"",
									"pm.test(\"Check other group\", function () {",
									"    const defaultGroup = findByName('Standard-Kundengruppe');",
									"    pm.expect(defaultGroup).to.haveOwnProperty('id').to.eq(pm.environment.get('gen_customer_group_main_id'));",
									"    pm.expect(defaultGroup).to.haveOwnProperty('is_default').to.eq('0');",
									"});",
									"",
									"function findByName(name) {",
									"    return jsonData.customer_groups.find(group => group.name === name);",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_number_headless}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_get_settings}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: ping (Headless)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"pm.test(\"Ping Pong\", function () {",
									"    pm.expect(jsonData.pong).to.eql('OK');",
									"});",
									"",
									"pm.test('Plugin check', function () {",
									"    pm.expect(jsonData.plugin_version).to.be.a('string').to.not.be.empty.to.not.eq('not installed');",
									"    pm.expect(jsonData.shopgate_library_version).to.be.a('string').to.be.not.empty;",
									"    pm.expect(jsonData.plugin_info['Shopware core version']).to.be.a('string').to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Check log paths\", function () {",
									"    const shopNumber = pm.environment.get('shop_number_headless');",
									"    pm.expect(jsonData.configuration.export_folder_path).to.have.string('shopgate/' + shopNumber);",
									"    pm.expect(jsonData.configuration.log_folder_path).to.have.string('shopgate/' + shopNumber);",
									"    pm.expect(jsonData.configuration.cache_folder_path).to.have.string('shopgate/' + shopNumber);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_number_headless}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_ping}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Preparation for multi-channel tests",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Flysystem",
			"item": [
				{
					"name": "SW: Enable flysystem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successfully enabled flysystem\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{gen_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"409fa1affcf441d59cf023b5ec62f782\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.isFlysystem\",\r\n                \"configurationValue\": true,\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sw_endpoint_api}}/_action/sync",
							"host": [
								"{{sw_endpoint_api}}"
							],
							"path": [
								"_action",
								"sync"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"pm.test(\"Ping Pong\", function () {",
									"    pm.expect(jsonData.pong).to.eql('OK');",
									"});",
									"",
									"pm.test('Plugin Versions', function () {",
									"    pm.expect(jsonData.plugin_version).to.be.a('string').to.be.eq(pm.environment.get(\"gen_plugin_version\"));",
									"    pm.expect(jsonData.shopgate_library_version).to.be.a('string').to.be.not.empty;",
									"    pm.expect(jsonData.plugin_info['Shopware core version']).to.be.a('string').to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Check log paths\", function () {",
									"    const shopNumber = pm.environment.get('shop_number');",
									"    pm.expect(jsonData.configuration.export_folder_path).to.eq('export');",
									"    pm.expect(jsonData.configuration.log_folder_path).to.have.string('shopgate/' + shopNumber);",
									"    pm.expect(jsonData.configuration.cache_folder_path).to.have.string('shopgate/' + shopNumber);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_ping}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not an error\", function () {",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"const jsonObject = xml2Json(responseBody);",
									"pm.test(\"Flysystem export check\", function () {",
									"    pm.expect(jsonObject.items.item, 'Should have items with Flysystem enabled').to.be.a('array').to.be.not.empty;",
									"});",
									"",
									"pm.test(\"Header check\", function () {",
									"    pm.response.to.be.header(\"Content-Type\", 'application/xml');",
									"    pm.response.to.have.header('Content-Length');",
									"    pm.response.to.have.header('Content-Disposition', 'attachment; filename=\"shopgate_items.xml\"');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_get_items}}",
									"type": "text"
								},
								{
									"key": "limit",
									"value": "100",
									"description": "\n",
									"type": "text"
								},
								{
									"key": "offset",
									"value": "0",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: reviews (main)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');",
									"const now = moment().subtract(2, 'hours').format('YYYY-MM-DD');",
									"",
									"pm.test(\"Not an error\", function () {",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"const jsonObject = xml2Json(responseBody);",
									"const reviews = jsonObject.reviews.review;",
									"pm.test(\"general check\", function () {",
									"    pm.expect(reviews).length(3, 'Expecting only 3 reviews');",
									"});",
									"",
									"pm.test(\"childReviewOne\", function () {",
									"    const childReviewOne = Utility.getXmlByUid(reviews, pm.environment.get('product_review_child_id'));",
									"    pm.expect(childReviewOne).to.have.property('item_uid').to.eq(pm.environment.get('gen_product_variant_child_id'));",
									"    pm.expect(childReviewOne.score).to.eq('7');",
									"    pm.expect(childReviewOne.reviewer_name).to.eq('*****');",
									"    pm.expect(childReviewOne.title).to.eq('German Title');",
									"    pm.expect(childReviewOne.text).to.eq('German Content');",
									"    pm.expect(childReviewOne).to.haveOwnProperty('date').to.eq(now);",
									"});",
									"pm.test(\"propReviewOne\", function () {",
									"    const propReviewOne = Utility.getXmlByUid(reviews, pm.environment.get('product_review_props_id'));",
									"    pm.expect(propReviewOne).to.have.property('item_uid').to.eq(pm.environment.get('catalog_product_props'));",
									"    pm.expect(propReviewOne.score).to.eq('9');",
									"    pm.expect(propReviewOne.title).to.eq('Main product review');",
									"    pm.expect(propReviewOne.reviewer_name).to.eq('*****');",
									"    pm.expect(propReviewOne.text).to.eq('Main product long content');",
									"    pm.expect(propReviewOne).to.haveOwnProperty('date').to.eq(now);",
									"});",
									"pm.test(\"disabledReviewOne\", function () {",
									"    const disabledReviewOne = Utility.getXmlByUid(reviews, pm.environment.get('product_review_disabled_id'));",
									"    pm.expect(disabledReviewOne).to.have.property('item_uid').to.eq(pm.environment.get('catalog_product_disabled'));",
									"    pm.expect(disabledReviewOne.score).to.eq('4');",
									"    pm.expect(disabledReviewOne.reviewer_name).to.eq('*****');",
									"    pm.expect(disabledReviewOne.title).to.be.a('string').to.not.be.empty;",
									"    pm.expect(disabledReviewOne.text).to.be.a('string').to.not.be.empty;",
									"    pm.expect(disabledReviewOne).to.haveOwnProperty('date').to.eq(now);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_get_reviews}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: get category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not an error\", function () {",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"Have proper category data\", function () {",
									"    const jsonObject = xml2Json(responseBody);",
									"    if (pm.globals.get('verbose')){",
									"        console.log(jsonObject);",
									"    }",
									"    pm.expect(jsonObject.categories.category).to.have.property('$');",
									"    pm.expect(jsonObject.categories.category.$.uid, 'UUID not found').to.be.a('string').to.be.eq(pm.environment.get(\"gen_category_uid_0\"));",
									"    pm.expect(jsonObject.categories.category.$.sort_order).to.be.a('string').to.match(/^\\d+$/).to.eq('3');",
									"    pm.expect(jsonObject.categories.category.$.is_active).to.be.eq('0');",
									"    pm.expect(jsonObject.categories.category.$.is_anchor).to.be.eq('1');",
									"    pm.expect(jsonObject.categories.category, 'Name not set').to.have.property('name').to.be.a('string').to.be.not.empty;",
									"    pm.expect(jsonObject.categories.category, 'Deeplink not set').to.have.property('deeplink').to.be.a('string').to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_get_categories}}",
									"type": "text"
								},
								{
									"key": "uids[0]",
									"value": "{{gen_category_uid_0}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SW: Disable flysystem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successfully disabled flysystem\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{gen_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"409fa1affcf441d59cf023b5ec62f782\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.isFlysystem\",\r\n                \"configurationValue\": false,\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sw_endpoint_api}}/_action/sync",
							"host": [
								"{{sw_endpoint_api}}"
							],
							"path": [
								"_action",
								"sync"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Category",
			"item": [
				{
					"name": "Basic",
					"item": [
						{
							"name": "SG: get specific",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.test(\"Have proper category data\", function () {",
											"    const jsonObject = xml2Json(responseBody);",
											"    if (pm.globals.get('verbose')){",
											"        console.log(jsonObject);",
											"    }",
											"    pm.expect(jsonObject.categories.category).to.have.property('$');",
											"    pm.expect(jsonObject.categories.category.$.uid, 'UUID not found').to.be.a('string').to.be.eq(pm.environment.get(\"gen_category_uid_0\"));",
											"    pm.expect(jsonObject.categories.category.$.sort_order).to.be.a('string').to.match(/^\\d+$/).to.eq('3');",
											"    pm.expect(jsonObject.categories.category.$.is_active).to.be.eq('0');",
											"    pm.expect(jsonObject.categories.category.$.is_anchor).to.be.eq('1');",
											"    pm.expect(jsonObject.categories.category, 'Name not set').to.have.property('name').to.be.a('string').to.be.not.empty;",
											"    pm.expect(jsonObject.categories.category, 'Deeplink not set').to.have.property('deeplink').to.be.a('string').to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_categories}}",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{gen_category_uid_0}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: get specific  2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.test(\"Have proper category data\", function () {",
											"    const jsonObject = xml2Json(responseBody);",
											"    if (pm.globals.get('verbose')){",
											"        console.log(jsonObject);",
											"    }",
											"    pm.expect(jsonObject.categories.category).to.have.property('$');",
											"    pm.expect(jsonObject.categories.category.$.uid, 'UUID not found').to.be.a('string').to.be.eq(pm.environment.get(\"gen_category_uid_1\"));",
											"    pm.expect(jsonObject.categories.category.$.sort_order).to.be.a('string').to.match(/^\\d+$/).to.eq('3');",
											"    pm.expect(jsonObject.categories.category.$.is_active).to.be.eq('1');",
											"    pm.expect(jsonObject.categories.category.$.is_anchor).to.be.eq('1');",
											"    pm.expect(jsonObject.categories.category.$.parent_uid).to.be.eq('77b959cf66de4c1590c7f9b7da3982f3');",
											"    pm.expect(jsonObject.categories.category, 'Name not set').to.have.property('name').to.be.a('string').to.be.eq('Bakery products');",
											"    pm.expect(jsonObject.categories.category, 'Deeplink not set').to.have.property('deeplink').to.be.a('string').to.be.eq(pm.environment.get(\"host\") + pm.variables.get(\"system_port\") + '/Food/Bakery-products/');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_categories}}",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{gen_category_uid_1}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: get first 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.test(\"have categories\", function () {",
											"    const jsonObject = xml2Json(responseBody);",
											"    if (pm.globals.get('verbose')) {",
											"        console.log(jsonObject.categories.category[0]);",
											"    }",
											"",
											"    pm.expect(jsonObject.categories.category).length(5);",
											"    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_0\")), 'Missing 0').to.be.not.undefined;",
											"    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_1\")), 'Missing 1').to.be.not.undefined;",
											"    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_2\")), 'Missing 2').to.be.not.undefined;",
											"    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_3\")), 'Missing 3').to.be.not.undefined;",
											"    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_4\")), 'Missing 4').to.be.not.undefined;",
											"    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_5\")), 'Have 5?').to.be.undefined;",
											"    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_6\")), 'Have 6?').to.be.undefined;",
											"});",
											"",
											"/**",
											" * @param {array} list",
											" * @param {string} id",
											" */",
											"function findById(list, id) {",
											"    return list.find(element => element.$.uid === id);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_categories}}",
											"type": "text"
										},
										{
											"key": "limit",
											"value": "5",
											"type": "text"
										},
										{
											"key": "offset",
											"value": "1",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{gen_category_uid_0}}",
											"type": "text"
										},
										{
											"key": "uids[1]",
											"value": "{{gen_category_uid_1}}",
											"type": "text"
										},
										{
											"key": "uids[2]",
											"value": "{{gen_category_uid_2}}",
											"type": "text"
										},
										{
											"key": "uids[3]",
											"value": "{{gen_category_uid_3}}",
											"type": "text"
										},
										{
											"key": "uids[4]",
											"value": "{{gen_category_uid_4}}",
											"type": "text"
										},
										{
											"key": "uids[5]",
											"value": "{{gen_category_uid_5}}",
											"type": "text"
										},
										{
											"key": "uids[6]",
											"value": "{{gen_category_uid_6}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: get last 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.test(\"have categories\", function () {",
											"    const jsonObject = xml2Json(responseBody);",
											"",
											"    if (pm.globals.get('verbose')) {",
											"        console.log(jsonObject.categories.category[0]);",
											"    }",
											"    pm.expect(jsonObject.categories.category).length(2);",
											"    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_5\")), '5 should be undefined').to.be.not.undefined;",
											"    pm.expect(findById(jsonObject.categories.category, pm.environment.get(\"gen_category_uid_6\")), '6 should be undefined').to.be.not.undefined;",
											"});",
											"",
											"/**",
											" * @param {array} list",
											" * @param {string} id",
											" */",
											"function findById(list, id) {",
											"    return list.find(element => element.$.uid === id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_categories}}",
											"type": "text"
										},
										{
											"key": "limit",
											"value": "5",
											"type": "text"
										},
										{
											"key": "offset",
											"value": "2",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{gen_category_uid_0}}",
											"type": "text"
										},
										{
											"key": "uids[1]",
											"value": "{{gen_category_uid_1}}",
											"type": "text"
										},
										{
											"key": "uids[2]",
											"value": "{{gen_category_uid_2}}",
											"type": "text"
										},
										{
											"key": "uids[3]",
											"value": "{{gen_category_uid_3}}",
											"type": "text"
										},
										{
											"key": "uids[4]",
											"value": "{{gen_category_uid_4}}",
											"type": "text"
										},
										{
											"key": "uids[5]",
											"value": "{{gen_category_uid_5}}",
											"type": "text"
										},
										{
											"key": "uids[6]",
											"value": "{{gen_category_uid_6}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: unlimited",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.test(\"Check list of categories\", function () {",
											"    const jsonObject = xml2Json(responseBody);",
											"",
											"    pm.expect(jsonObject.categories.category).length(pm.environment.get('gen_category_count'), 'Should be one less because root category is not exported in SG');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_categories}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Product",
			"item": [
				{
					"name": "Indexer Check",
					"item": [
						{
							"name": "setup",
							"item": [
								{
									"name": "SW: find Men cat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"pm.environment.set(\"gen_category_count\", jsonData.total);\r",
													"\r",
													"pm.test(\"get category by name\", function () {\r",
													"    pm.expect(jsonData.total).to.eq(1);\r",
													"    pm.environment.set(`gen_category_men_id`, jsonData.data[0])\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"filter\": [\r\n        { \r\n            \"type\": \"multi\", \r\n            \"operator\": \"or\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"name\",\r\n                    \"value\": \"Men\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/search-ids/category",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"search-ids",
												"category"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: create manual cat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created single entity\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{created_category_manual_two_id}}\",\r\n    \"displayNestedProducts\": true,\r\n    \"parentId\": \"{{category_freeTime_id}}\",\r\n    \"afterCategoryId\": \"{{created_category_manual_id}}\",\r\n    \"type\": \"page\",\r\n    \"productAssignmentType\": \"product\",\r\n    \"name\": \"API: Index test manual products category\",\r\n    \"cmsPageId\": \"{{gen_cms_page_default_id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/category",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"category"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: create index prod",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Product created\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"overwrites\": {\r\n        \"id\": \"{{created_product_index_table_id}}\",\r\n        \"name\": \"API: product for idnex table test\",\r\n        \"productNumber\": \"SG.DEMO.INDEX.TABLE\",\r\n        \"stock\": 100,\r\n        \"releaseDate\": \"2024-06-13T11:00:04.389+00:00\",\r\n        \"categories\": [\r\n            {\r\n                \"id\": \"{{created_category_manual_two_id}}\"\r\n            }\r\n        ]\r\n    },\r\n    \"cloneChildren\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/clone/product/{{catalog_product_main_id}}",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"clone",
												"product",
												"{{catalog_product_main_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: re-index",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"offset\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/indexing/:indexer",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"indexing",
												":indexer"
											],
											"variable": [
												{
													"key": "indexer",
													"value": "shopgate.go.category.product.mapping.indexer"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Tests",
							"item": [
								{
									"name": "SW: check prod mapping",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"check data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    // 3 for EN, DE should fallback\r",
													"    pm.expect(jsonData.meta.total).to.be.eq(3);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"or\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"productId\",\n                    \"value\": \"{{created_product_index_table_id}}\"\n                }\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"search",
												"shopgate-go-category-product-mapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: add category to product",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successfully activated/deactivated payment method\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"categories\": [\r\n        {\r\n            \"id\": \"{{gen_category_men_id}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/product/:prodId",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"product",
												":prodId"
											],
											"variable": [
												{
													"key": "prodId",
													"value": "{{created_product_index_table_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: check prod mapping",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"check data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    // used to be 3, added one category, becomes 4 (en). The DE falls back on EN sort\r",
													"    pm.expect(jsonData.meta.total).to.be.eq(4);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"or\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"productId\",\n                    \"value\": \"{{created_product_index_table_id}}\"\n                }\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"search",
												"shopgate-go-category-product-mapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: delete via sync (men)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successfully created all SG system config entities\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"delete-product\": {\r\n        \"entity\": \"product_category\",\r\n        \"action\": \"delete\",\r\n        \"payload\": [\r\n            {\r\n                \"productId\": \"{{created_product_index_table_id}}\",\r\n                \"categoryId\": \"{{gen_category_men_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/sync",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"sync"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: check prod mapping",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"check data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.meta.total).to.be.eq(3);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"or\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"productId\",\n                    \"value\": \"{{created_product_index_table_id}}\"\n                }\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"search",
												"shopgate-go-category-product-mapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: upsert prod cat (men)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successfully created all SG system config entities\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"write-product\": {\r\n        \"entity\": \"product\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{created_product_index_table_id}}\",\r\n                \"categories\": [\r\n                    {\r\n                        \"id\": \"{{gen_category_men_id}}\"\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/sync",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"sync"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: check prod mapping",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"check data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.meta.total).to.be.eq(4);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"or\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"productId\",\n                    \"value\": \"{{created_product_index_table_id}}\"\n                }\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"search",
												"shopgate-go-category-product-mapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: delete via sync (men)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successfully created all SG system config entities\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"delete-product\": {\r\n        \"entity\": \"product_category\",\r\n        \"action\": \"delete\",\r\n        \"payload\": [\r\n            {\r\n                \"productId\": \"{{created_product_index_table_id}}\",\r\n                \"categoryId\": \"{{gen_category_men_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/sync",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"sync"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: check prod mapping",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"check data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.meta.total).to.be.eq(3);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"or\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"productId\",\n                    \"value\": \"{{created_product_index_table_id}}\"\n                }\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"search",
												"shopgate-go-category-product-mapping"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: delete prod",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created single entity\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{sw_endpoint_api}}/product/:prodId",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"product",
												":prodId"
											],
											"variable": [
												{
													"key": "prodId",
													"value": "{{created_product_index_table_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: check prod mapping",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"check data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.meta.total).to.be.eq(0);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"or\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"productId\",\n                    \"value\": \"{{created_product_index_table_id}}\"\n                }\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"search",
												"shopgate-go-category-product-mapping"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "SW: delete index cat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created single entity\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{sw_endpoint_api}}/category/:catId",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"category",
												":catId"
											],
											"variable": [
												{
													"key": "catId",
													"value": "{{created_category_manual_two_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Tests that check if the indexer table is working correctly. E.g. picks up CRUD events on categories/products & handles updating the table"
				},
				{
					"name": "Details",
					"item": [
						{
							"name": "SG: check previous price",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// functionality is only supported in SW 6.4.10+",
											"if (Utility.version.isLT(pm.environment.get('gen_shopware_version'), '6.4.10.0')){",
											"    return;",
											"}",
											"",
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"const jsonObject = xml2Json(responseBody);",
											"const properties = jsonObject.items.item.properties.property;",
											"pm.test('Check properties', function() {",
											"    pm.expect(properties).to.be.an('array', 'Should be a property array');",
											"    const previous = Utility.getXmlByUid(properties, 'previousPrice');",
											"    pm.expect(previous).to.haveOwnProperty('label').to.eq('Previous price');",
											"    pm.expect(previous).to.haveOwnProperty('value').to.eq('470');",
											"});",
											"",
											"pm.test('Check custom field props export', function() {",
											"    pm.expect(properties).to.be.a('array');",
											"    const integer = Utility.getXmlByLabel(properties, 'API product Custom Field 0001: int');",
											"    pm.expect(integer, 'should have found width').to.haveOwnProperty('value').to.eq('14');",
											"",
											"    const bool = Utility.getXmlByLabel(properties, 'API product Custom Field 0001: bool');",
											"    pm.expect(bool, 'should have found height').to.haveOwnProperty('value').to.eq('0');",
											"",
											"    const text = Utility.getXmlByLabel(properties, 'API product Custom Field 0001: text');",
											"    pm.expect(text, 'should have found length').to.haveOwnProperty('value').to.eq('test text');",
											"",
											"    const float = Utility.getXmlByLabel(properties, 'API product Custom Field 0001: float');",
											"    pm.expect(float, 'should have found length').to.haveOwnProperty('value').to.eq('40.31');",
											"",
											"    const multi = Utility.getXmlByLabel(properties, 'API product Custom Field 0001: multi-select');",
											"    pm.expect(multi, 'should have found length').to.haveOwnProperty('value').to.eq('Option One (en), Option Three (en)');",
											"",
											"    const select = Utility.getXmlByLabel(properties, 'API product Custom Field 0001: select');",
											"    pm.expect(select, 'should have found length').to.haveOwnProperty('value').to.eq('select-option-0001');",
											"",
											"    const selectTwo = Utility.getXmlByLabel(properties, 'API product Custom Field 0002: select');",
											"    pm.expect(selectTwo, 'should have found length').to.haveOwnProperty('value').to.eq('Option One (en)');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{created_product_prevPrice_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: check props",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"const jsonObject = xml2Json(responseBody);",
											"",
											"pm.test(\"Checking various translations\", function () {",
											"    pm.expect(jsonObject.items.item.deeplink).to.eq(pm.environment.get('host') + pm.variables.get('system_port') + '/Main-product-with-advanced-prices/SWDEMO10002');",
											"    pm.expect(jsonObject.items.item.name).to.eq('Main product with advanced prices');",
											"    pm.expect(jsonObject.items.item.currency).to.eq('EUR');",
											"    pm.expect(jsonObject.items.item.manufacturer, 'manufacturer should be defined').to.haveOwnProperty('title').to.eq('Shopware Freetime');",
											"});",
											"",
											"pm.test('Check properties', function() {",
											"    const props = jsonObject.items.item.properties.property;",
											"    pm.expect(props).to.be.a('array');",
											"    const width = Utility.getXmlByUid(props, 'width');",
											"    pm.expect(width, 'should have found width').to.haveOwnProperty('label').to.eq('Width');",
											"",
											"    const height = Utility.getXmlByUid(props, 'height');",
											"    pm.expect(height, 'should have found height').to.haveOwnProperty('label').to.eq('Height');",
											"",
											"    const length = Utility.getXmlByUid(props, 'length');",
											"    pm.expect(length, 'should have found length').to.haveOwnProperty('label').to.eq('Length');",
											"});",
											"",
											"pm.test(\"Checking regular price options\", function () {",
											"    pm.expect(jsonObject.items.item.prices.$, 'Price should have a type').to.haveOwnProperty('type').to.be.eq('gross',' Should be gross property set');",
											"    pm.expect(jsonObject.items.item.prices.price).to.be.eq('950');",
											"    pm.expect(jsonObject.items.item.prices.base_price).to.be.eq('Content: 1');",
											"});",
											"",
											"pm.test('Check first tier price', function() {",
											"    const firstTier = jsonObject.items.item.prices.tier_prices.tier_price.find(price => price.$.threshold === '1');",
											"    pm.expect(firstTier._).to.be.eq('150');",
											"    pm.expect(firstTier.$.threshold).to.be.eq('1');",
											"    pm.expect(firstTier.$.max_quantity).to.be.eq('11');",
											"    pm.expect(firstTier.$.type).to.be.eq('fixed');",
											"});",
											"pm.test('Check second tier price', function() {",
											"    const secondTier = jsonObject.items.item.prices.tier_prices.tier_price.find(price => price.$.threshold === '12');",
											"    pm.expect(secondTier._).to.be.eq('200');",
											"    pm.expect(secondTier.$.threshold).to.be.eq('12');",
											"    pm.expect(secondTier.$.type).to.be.eq('fixed');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{catalog_product_advPrices_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: check normal props",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"const jsonObject = xml2Json(responseBody);",
											"pm.test('Check properties', function() {",
											"    const props = jsonObject.items.item.properties.property;",
											"    pm.expect(props).to.be.a('array');",
											"    const width = Utility.getXmlByLabel(props, 'Size');",
											"    pm.expect(width, 'should have found width').to.haveOwnProperty('value').to.eq('S, L, M, XL');",
											"",
											"    const height = Utility.getXmlByLabel(props, 'Material');",
											"    pm.expect(height, 'should have found height').to.haveOwnProperty('value').to.eq('Polyester, Cotton');",
											"",
											"    const length = Utility.getXmlByLabel(props, 'Target group');",
											"    pm.expect(length, 'should have found length').to.haveOwnProperty('value').to.eq('Man');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{catalog_product_props}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dynamic",
					"item": [
						{
							"name": "SG: category created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.test(\"Dynamic category created\", function () {",
											"    const jsonObject = xml2Json(responseBody);",
											"    if (pm.globals.get('verbose')){",
											"        console.log(jsonObject);",
											"    }",
											"",
											"    pm.expect(jsonObject.categories.category.$.is_active).to.be.eq('1');",
											"    pm.expect(jsonObject.categories.category.$.is_anchor).to.be.eq('1');",
											"    pm.expect(jsonObject.categories.category, 'Name not set').to.have.property('name').to.be.eq('API: No Free Ship Dynamic Cat')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_categories}}",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{created_category_noFreeShip_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: check after",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.test(\"Is in the dynamic category\", function () {",
											"    const jsonObject = xml2Json(responseBody);",
											"",
											"    pm.expect(jsonObject.items.item.categories.category).to.be.an('array', 'Should be more than 1 category').length(2);",
											"",
											"    const noFreeShipCat = Utility.getXmlByUid(jsonObject.items.item.categories.category, pm.environment.get('created_category_noFreeShip_id'));",
											"    pm.expect(noFreeShipCat.$.sort_order).to.be.eq('1');",
											"",
											"    const freeTimeCat = Utility.getXmlByUid(jsonObject.items.item.categories.category, pm.environment.get('category_freeTime_id'));",
											"    pm.expect(freeTimeCat.$.sort_order).to.be.eq('4');",
											"});",
											"",
											"pm.test(\"Header check\", function () {",
											"    pm.response.to.be.header(\"Content-Type\", 'application/xml');",
											"    pm.response.to.have.header('Content-Length');",
											"    pm.response.to.have.header('Content-Disposition', 'attachment; filename=\"shopgate_items.xml\"');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "limit",
											"value": "100",
											"description": "\n",
											"type": "text"
										},
										{
											"key": "offset",
											"value": "0",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{catalog_product_main_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Manual Category Sort",
					"item": [
						{
							"name": "SG: get all products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"const jsonObject = xml2Json(responseBody);",
											"pm.test(\"General check\", function () {",
											"    pm.expect(jsonObject.items.item).to.be.a('array').length.to.be.gte(10, 'Should have certain number of products');",
											"});",
											"",
											"pm.test(\"Check `adv price` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_advPrices_id'), '3');",
											"});",
											"pm.test(\"Check `free ship` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_freeShip'), '1');",
											"});",
											"pm.test(\"Check `variant` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_variant'), '4');",
											"});",
											"pm.test(\"Check `prod props` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_props'), '2');",
											"});",
											"",
											"pm.test(\"Backorder Product is saleable\", function () {",
											"    const backOrderProduct = Utility.getXmlByUid(jsonObject.items.item, pm.environment.get('created_product_noStock_backorder_id'));",
											"    pm.expect(backOrderProduct.stock.is_saleable).to.be.eq('1');",
											"    pm.expect(backOrderProduct.stock.backorders).to.be.eq('1');",
											"    pm.expect(backOrderProduct.stock.use_stock).to.be.eq('0');",
											"    pm.expect(backOrderProduct.stock.stock_quantity).to.be.eq('0');",
											"});",
											"",
											"pm.test(\"Closeout Product is not saleable\", function () {",
											"    const closeOutProduct = Utility.getXmlByUid(jsonObject.items.item, pm.environment.get('created_product_noStock_id'));",
											"    pm.expect(closeOutProduct.stock.is_saleable).to.be.eq('0');",
											"    pm.expect(closeOutProduct.stock.backorders).to.be.eq('0');",
											"    pm.expect(closeOutProduct.stock.use_stock).to.be.eq('1');",
											"    pm.expect(closeOutProduct.stock.stock_quantity).to.be.eq('0');",
											"});",
											"function checkManualCategoryExistence(productId, positionNumber) {",
											"    const product = Utility.getXmlByUid(jsonObject.items.item, productId);",
											"    pm.expect(product, 'Could not locate product by id: ' + productId).to.haveOwnProperty('categories');",
											"    pm.expect(product.categories.category, 'Product \"' + productId +'\" appears only in one category').to.be.an('array');",
											"",
											"    const category = Utility.getXmlByUid(product.categories.category, pm.environment.get('created_category_manual_id'));",
											"    pm.expect(category, 'Could not locate manual category for prod id: ' + productId).to.haveOwnProperty('$').to.haveOwnProperty('sort_order').to.eq(positionNumber);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "limit",
											"value": "100",
											"type": "text"
										},
										{
											"key": "offset",
											"value": "0",
											"type": "text"
										},
										{
											"key": "debug_log",
											"value": "1",
											"type": "text"
										},
										{
											"key": "use_errorhandler",
											"value": "1",
											"type": "text"
										},
										{
											"key": "use_shutdown_handler",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: delete manual cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created single entity\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{sw_endpoint_api}}/category/:catId",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"category",
										":catId"
									],
									"variable": [
										{
											"key": "catId",
											"value": "{{created_category_manual_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Sort Update (safe write)",
					"item": [
						{
							"name": "SW: create manual cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created single entity\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{created_category_manual_id}}\",\r\n    \"displayNestedProducts\": true,\r\n    \"parentId\": \"{{category_freeTime_id}}\",\r\n    \"afterCategoryId\": \"{{created_category_noFreeShip_id}}\",\r\n    \"type\": \"page\",\r\n    \"productAssignmentType\": \"product\",\r\n    \"name\": \"API: Manual products category\",\r\n    \"cmsPageId\": \"{{gen_cms_page_default_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/category",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"category"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: create prod map",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully created all SG system config entities\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-product-category\": {\r\n        \"entity\": \"product_category\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"productId\": \"{{catalog_product_disabled}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_freeShip}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_variant}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_props}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_advPrices_id}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SWA: get prod sorting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"get sort\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.be.a('array').to.not.be.empty;\r",
											"\r",
											"    const nameSort = jsonData.data.find(item => item.key === 'name-desc');\r",
											"    pm.expect(nameSort).to.not.be.undefined;\r",
											"    pm.environment.set('gen_product_sort_nameDesc_id', nameSort.id);\r",
											"\r",
											"    const priceSort = jsonData.data.find(item => item.key === 'price-desc');\r",
											"    pm.expect(priceSort).to.not.be.undefined;\r",
											"    pm.environment.set('gen_product_sort_priceDesc_id', priceSort.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"or\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"key\",\n                    \"value\": \"name-desc\"\n                },\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"key\",\n                    \"value\": \"price-desc\"\n                }\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/product-sorting",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"product-sorting"
									]
								}
							},
							"response": []
						},
						{
							"name": "SWA: update category sort",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully activated/deactivated payment method\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const body = {",
											"    \"slotConfig\": {",
											"        \"#slotId#\": {",
											"            \"boxLayout\": {",
											"                \"source\": \"static\",",
											"                \"value\": \"standard\"",
											"            },",
											"            \"showSorting\": {",
											"                \"source\": \"static\",",
											"                \"value\": true",
											"            },",
											"            \"useCustomSorting\": {",
											"                \"source\": \"static\",",
											"                \"value\": true",
											"            },",
											"            \"availableSortings\": {",
											"                \"source\": \"static\",",
											"                \"value\": {",
											"                    \"#nameDescId#\": 1,",
											"                    \"#priceDesc#\": 3",
											"                }",
											"            },",
											"            \"defaultSorting\": {",
											"                \"source\": \"static\",",
											"                \"value\": \"#nameDescId#\"",
											"            }",
											"        }",
											"    }",
											"}",
											"let requestBody = JSON.stringify(body);",
											"",
											"// sort is changed in 6.6",
											"if (Utility.version.isLT(pm.environment.get('gen_shopware_version'), '6.6.0.0')){",
											"    requestBody = requestBody.replaceAll('#nameDescId#', 'name-desc');",
											"    requestBody = requestBody.replaceAll('#priceDesc#', 'price-desc');",
											"} else {",
											"    requestBody = requestBody.replaceAll('#nameDescId#', pm.environment.get('gen_product_sort_nameDesc_id'));",
											"    requestBody = requestBody.replaceAll('#priceDesc#', pm.environment.get('gen_product_sort_priceDesc_id'));",
											"}",
											"",
											"requestBody = requestBody.replaceAll('#slotId#', pm.environment.get('gen_cms_slot_productListing_id'));",
											"pm.environment.set(\"requestBody\", requestBody);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/category/:catId",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"category",
										":catId"
									],
									"variable": [
										{
											"key": "catId",
											"value": "{{created_category_manual_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: check Z-A name sort (EN)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"const jsonObject = xml2Json(responseBody);",
											"pm.test(\"General check\", function () {",
											"    pm.expect(jsonObject.items.item).to.be.a('array').length.to.be.gte(4, 'Should have certain number of products');",
											"});",
											"",
											"// seems like sort is not working on 6.5 CI container well",
											"if (Utility.version.isLT(pm.environment.get('gen_shopware_version'), '6.6.0.0')){",
											"    return;",
											"}",
											"",
											"pm.test(\"Check `adv price` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_advPrices_id'), '1');",
											"});",
											"pm.test(\"Check `free ship` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_freeShip'), '3');",
											"});",
											"pm.test(\"Check `variant` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_variant'), '4');",
											"});",
											"pm.test(\"Check `prod props` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_props'), '2');",
											"});",
											"",
											"function checkManualCategoryExistence(productId, positionNumber) {",
											"    const product = Utility.getXmlByUid(jsonObject.items.item, productId);",
											"    pm.expect(product, 'Could not locate product by id: ' + productId).to.haveOwnProperty('categories');",
											"    pm.expect(product.categories.category, 'Product \"' + productId +'\" appears only in one category').to.be.an('array');",
											"",
											"    const category = Utility.getXmlByUid(product.categories.category, pm.environment.get('created_category_manual_id'));",
											"    pm.expect(category, 'Could not locate manual category for prod id: ' + productId).to.haveOwnProperty('$').to.haveOwnProperty('sort_order').to.eq(positionNumber);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "limit",
											"value": "100",
											"type": "text"
										},
										{
											"key": "offset",
											"value": "0",
											"type": "text"
										},
										{
											"key": "debug_log",
											"value": "1",
											"type": "text"
										},
										{
											"key": "use_errorhandler",
											"value": "1",
											"type": "text"
										},
										{
											"key": "use_shutdown_handler",
											"value": "1",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{catalog_product_advPrices_id}}",
											"description": "1",
											"type": "text"
										},
										{
											"key": "uids[1]",
											"value": "{{catalog_product_props}}",
											"description": "2",
											"type": "text"
										},
										{
											"key": "uids[2]",
											"value": "{{catalog_product_freeShip}}",
											"description": "3",
											"type": "text"
										},
										{
											"key": "uids[3]",
											"value": "{{catalog_product_variant}}",
											"description": "4",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: check Z-A name sort (DE) fallback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"const jsonObject = xml2Json(responseBody);",
											"pm.test(\"General check\", function () {",
											"    pm.expect(jsonObject.items.item).to.be.a('array').length.to.be.gte(4, 'Should have certain number of products');",
											"});",
											"",
											"// seems like sort is not working on 6.5 CI container well",
											"if (Utility.version.isLT(pm.environment.get('gen_shopware_version'), '6.6.0.0')){",
											"    return;",
											"}",
											"",
											"pm.test(\"Check `adv price` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_advPrices_id'), '2');",
											"});",
											"pm.test(\"Check `free ship` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_freeShip'), '3');",
											"});",
											"pm.test(\"Check `variant` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_variant'), '4');",
											"});",
											"pm.test(\"Check `prod props` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_props'), '1');",
											"});",
											"",
											"function checkManualCategoryExistence(productId, positionNumber) {",
											"    const product = Utility.getXmlByUid(jsonObject.items.item, productId);",
											"    pm.expect(product, 'Could not locate product by id: ' + productId).to.haveOwnProperty('categories');",
											"    let category;",
											"    if (Array.isArray()) {",
											"        category = Utility.getXmlByUid(product.categories.category, pm.environment.get('created_category_manual_id'));",
											"    } else {",
											"        category = product.categories.category;",
											"    }",
											"    ",
											"    pm.expect(category, 'Could not locate manual category for prod id: ' + productId).to.haveOwnProperty('$').to.haveOwnProperty('sort_order').to.eq(positionNumber);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" *  SG Token generation",
											" */",
											"var tstamp = Math.floor(Date.now() / 1000);",
											"",
											"const deShopCreds = pm.environment.get('shop_main_DE');",
											"",
											"// Use the CryptoJS",
											"var authUser = deShopCreds + \"-\" + tstamp;",
											"var tokenData = \"SPA-\" + deShopCreds + \"-\" + tstamp + \"-\" + deShopCreds;",
											"",
											"var authToken = CryptoJS.SHA1(tokenData).toString();",
											"",
											"// Set the new header values",
											"pm.environment.set(\"gen_sg_header_auth_user\", authUser);",
											"pm.environment.set(\"gen_sg_header_auth_token\", authToken);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_main_DE}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "limit",
											"value": "100",
											"type": "text"
										},
										{
											"key": "offset",
											"value": "0",
											"type": "text"
										},
										{
											"key": "debug_log",
											"value": "1",
											"type": "text"
										},
										{
											"key": "use_errorhandler",
											"value": "1",
											"type": "text"
										},
										{
											"key": "use_shutdown_handler",
											"value": "1",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{catalog_product_advPrices_id}}",
											"description": "1",
											"type": "text"
										},
										{
											"key": "uids[1]",
											"value": "{{catalog_product_props}}",
											"description": "2",
											"type": "text"
										},
										{
											"key": "uids[2]",
											"value": "{{catalog_product_freeShip}}",
											"description": "3",
											"type": "text"
										},
										{
											"key": "uids[3]",
											"value": "{{catalog_product_variant}}",
											"description": "4",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								},
								"description": "The DE slot_config (sort order key) is actually null, but it checks inheritance from main language of the channel, which is English. It also actually sorts be Z-A in DE language."
							},
							"response": []
						},
						{
							"name": "SW: delete manual cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created single entity\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{sw_endpoint_api}}/category/:catId",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"category",
										":catId"
									],
									"variable": [
										{
											"key": "catId",
											"value": "{{created_category_manual_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Sets a sort order on the primary channel language, and makes sure that secondary language falls back on the same sort as primary."
				},
				{
					"name": "Sort Update (performant)",
					"item": [
						{
							"name": "SW: Change DB write mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully changed config\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"f008a85247ed4053885b61b2d492fe2a\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.indexerWriteType\",\r\n                \"configurationValue\": \"performant\",\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: create manual cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created single entity\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{created_category_manual_id}}\",\r\n    \"displayNestedProducts\": true,\r\n    \"parentId\": \"{{category_freeTime_id}}\",\r\n    \"afterCategoryId\": \"{{created_category_noFreeShip_id}}\",\r\n    \"type\": \"page\",\r\n    \"productAssignmentType\": \"product\",\r\n    \"name\": \"API: Manual products category\",\r\n    \"cmsPageId\": \"{{gen_cms_page_default_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/category",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"category"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: create prod map",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully created all SG system config entities\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-product-category\": {\r\n        \"entity\": \"product_category\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"productId\": \"{{catalog_product_disabled}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_freeShip}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_variant}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_props}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_advPrices_id}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SWA: update category sort",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully activated/deactivated payment method\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const body = {",
											"    \"slotConfig\": {",
											"        \"#slotId#\": {",
											"            \"boxLayout\": {",
											"                \"source\": \"static\",",
											"                \"value\": \"standard\"",
											"            },",
											"            \"showSorting\": {",
											"                \"source\": \"static\",",
											"                \"value\": true",
											"            },",
											"            \"useCustomSorting\": {",
											"                \"source\": \"static\",",
											"                \"value\": true",
											"            },",
											"            \"availableSortings\": {",
											"                \"source\": \"static\",",
											"                \"value\": {",
											"                    \"#nameDescId#\": 1,",
											"                    \"#priceDesc#\": 3",
											"                }",
											"            },",
											"            \"defaultSorting\": {",
											"                \"source\": \"static\",",
											"                \"value\": \"#nameDescId#\"",
											"            }",
											"        }",
											"    }",
											"}",
											"let requestBody = JSON.stringify(body);",
											"",
											"// sort is changed in 6.6",
											"if (Utility.version.isLT(pm.environment.get('gen_shopware_version'), '6.6.0.0')){",
											"    requestBody = requestBody.replaceAll('#nameDescId#', 'name-desc');",
											"    requestBody = requestBody.replaceAll('#priceDesc#', 'price-desc');",
											"} else {",
											"    requestBody = requestBody.replaceAll('#nameDescId#', pm.environment.get('gen_product_sort_nameDesc_id'));",
											"    requestBody = requestBody.replaceAll('#priceDesc#', pm.environment.get('gen_product_sort_priceDesc_id'));",
											"}",
											"",
											"requestBody = requestBody.replaceAll('#slotId#', pm.environment.get('gen_cms_slot_productListing_id'));",
											"pm.environment.set(\"requestBody\", requestBody);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/category/:catId",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"category",
										":catId"
									],
									"variable": [
										{
											"key": "catId",
											"value": "{{created_category_manual_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: check Z-A name sort (EN)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"const jsonObject = xml2Json(responseBody);",
											"pm.test(\"General check\", function () {",
											"    pm.expect(jsonObject.items.item).to.be.a('array').length.to.be.gte(4, 'Should have certain number of products');",
											"});",
											"",
											"// seems like sort is not working on 6.5 CI container well",
											"if (Utility.version.isLT(pm.environment.get('gen_shopware_version'), '6.6.0.0')){",
											"    return;",
											"}",
											"",
											"pm.test(\"Check `adv price` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_advPrices_id'), '1');",
											"});",
											"pm.test(\"Check `free ship` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_freeShip'), '3');",
											"});",
											"pm.test(\"Check `variant` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_variant'), '4');",
											"});",
											"pm.test(\"Check `prod props` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_props'), '2');",
											"});",
											"",
											"function checkManualCategoryExistence(productId, positionNumber) {",
											"    const product = Utility.getXmlByUid(jsonObject.items.item, productId);",
											"    pm.expect(product, 'Could not locate product by id: ' + productId).to.haveOwnProperty('categories');",
											"    pm.expect(product.categories.category, 'Product \"' + productId +'\" appears only in one category').to.be.an('array');",
											"",
											"    const category = Utility.getXmlByUid(product.categories.category, pm.environment.get('created_category_manual_id'));",
											"    pm.expect(category, 'Could not locate manual category for prod id: ' + productId).to.haveOwnProperty('$').to.haveOwnProperty('sort_order').to.eq(positionNumber);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "limit",
											"value": "100",
											"type": "text"
										},
										{
											"key": "offset",
											"value": "0",
											"type": "text"
										},
										{
											"key": "debug_log",
											"value": "1",
											"type": "text"
										},
										{
											"key": "use_errorhandler",
											"value": "1",
											"type": "text"
										},
										{
											"key": "use_shutdown_handler",
											"value": "1",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{catalog_product_advPrices_id}}",
											"description": "1",
											"type": "text"
										},
										{
											"key": "uids[1]",
											"value": "{{catalog_product_props}}",
											"description": "2",
											"type": "text"
										},
										{
											"key": "uids[2]",
											"value": "{{catalog_product_freeShip}}",
											"description": "3",
											"type": "text"
										},
										{
											"key": "uids[3]",
											"value": "{{catalog_product_variant}}",
											"description": "4",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: check Z-A name sort (DE) fallback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"const jsonObject = xml2Json(responseBody);",
											"pm.test(\"General check\", function () {",
											"    pm.expect(jsonObject.items.item).to.be.a('array').length.to.be.gte(4, 'Should have certain number of products');",
											"});",
											"",
											"// seems like sort is not working on 6.5 CI container well",
											"if (Utility.version.isLT(pm.environment.get('gen_shopware_version'), '6.6.0.0')){",
											"    return;",
											"}",
											"",
											"pm.test(\"Check `adv price` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_advPrices_id'), '2');",
											"});",
											"pm.test(\"Check `free ship` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_freeShip'), '3');",
											"});",
											"pm.test(\"Check `variant` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_variant'), '4');",
											"});",
											"pm.test(\"Check `prod props` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_props'), '1');",
											"});",
											"",
											"function checkManualCategoryExistence(productId, positionNumber) {",
											"    const product = Utility.getXmlByUid(jsonObject.items.item, productId);",
											"    pm.expect(product, 'Could not locate product by id: ' + productId).to.haveOwnProperty('categories');",
											"    let category;",
											"    if (Array.isArray()) {",
											"        category = Utility.getXmlByUid(product.categories.category, pm.environment.get('created_category_manual_id'));",
											"    } else {",
											"        category = product.categories.category;",
											"    }",
											"",
											"    pm.expect(category, 'Could not locate manual category for prod id: ' + productId).to.haveOwnProperty('$').to.haveOwnProperty('sort_order').to.eq(positionNumber);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" *  SG Token generation",
											" */",
											"var tstamp = Math.floor(Date.now() / 1000);",
											"",
											"const deShopCreds = pm.environment.get('shop_main_DE');",
											"",
											"// Use the CryptoJS",
											"var authUser = deShopCreds + \"-\" + tstamp;",
											"var tokenData = \"SPA-\" + deShopCreds + \"-\" + tstamp + \"-\" + deShopCreds;",
											"",
											"var authToken = CryptoJS.SHA1(tokenData).toString();",
											"",
											"// Set the new header values",
											"pm.environment.set(\"gen_sg_header_auth_user\", authUser);",
											"pm.environment.set(\"gen_sg_header_auth_token\", authToken);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_main_DE}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "limit",
											"value": "100",
											"type": "text"
										},
										{
											"key": "offset",
											"value": "0",
											"type": "text"
										},
										{
											"key": "debug_log",
											"value": "1",
											"type": "text"
										},
										{
											"key": "use_errorhandler",
											"value": "1",
											"type": "text"
										},
										{
											"key": "use_shutdown_handler",
											"value": "1",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{catalog_product_advPrices_id}}",
											"description": "1",
											"type": "text"
										},
										{
											"key": "uids[1]",
											"value": "{{catalog_product_props}}",
											"description": "2",
											"type": "text"
										},
										{
											"key": "uids[2]",
											"value": "{{catalog_product_freeShip}}",
											"description": "3",
											"type": "text"
										},
										{
											"key": "uids[3]",
											"value": "{{catalog_product_variant}}",
											"description": "4",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								},
								"description": "The DE slot_config (sort order key) is actually null, but it checks inheritance from main language of the channel, which is English. It also actually sorts be Z-A in DE language."
							},
							"response": []
						},
						{
							"name": "SW: delete manual cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created single entity\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{sw_endpoint_api}}/category/:catId",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"category",
										":catId"
									],
									"variable": [
										{
											"key": "catId",
											"value": "{{created_category_manual_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: Change DB write mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully chnaged config\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"f008a85247ed4053885b61b2d492fe2a\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.indexerWriteType\",\r\n                \"configurationValue\": \"safe\",\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						}
					],
					"description": "Same as the other sort, but checks a different way of writing to the DB"
				},
				{
					"name": "Delete Type check",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "SW: create manual cat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created single entity\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{created_category_manual_id}}\",\r\n    \"displayNestedProducts\": true,\r\n    \"parentId\": \"{{category_freeTime_id}}\",\r\n    \"afterCategoryId\": \"{{created_category_noFreeShip_id}}\",\r\n    \"type\": \"page\",\r\n    \"productAssignmentType\": \"product\",\r\n    \"name\": \"API: Cat to test delete type\",\r\n    \"cmsPageId\": \"{{gen_cms_page_default_id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/category",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"category"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Performant",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "SW: performant write mode",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successfully changed config\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"f008a85247ed4053885b61b2d492fe2a\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.indexerWriteType\",\r\n                \"configurationValue\": \"performant\",\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/_action/sync",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"_action",
														"sync"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Null",
									"item": [
										{
											"name": "SW: create product",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Created single entity\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "indexing-behavior",
														"value": "disable-indexing",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": \"{{created_product_manual_sort_test_id}}\",\r\n    \"name\": \"API: test delete type\",\r\n    \"translations\": {\r\n        \"de-DE\": {\r\n            \"name\": \"API: test delete type (DE)\"\r\n        }\r\n    },\r\n    \"productNumber\": \"API.MANUAL.CAT.ASSIGNED.TO.TEST.DELETE.TYPE\",\r\n    \"stock\": 10,\r\n    \"taxId\": \"{{gen_tax_reduced_id}}\",\r\n    \"price\": [\r\n        {\r\n            \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n            \"gross\": 15,\r\n            \"net\": 10,\r\n            \"linked\": false\r\n        }\r\n    ],\r\n    \"categories\": [\r\n        {\r\n            \"id\": \"{{created_category_manual_id}}\"\r\n        }\r\n    ],\r\n    \"visibilities\": [\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"visibility\": 30\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/product",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"product"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: check product in category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"check data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.meta.total).to.be.eq(1);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"and\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"categoryId\",\n                    \"value\": \"{{created_category_manual_id}}\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"search",
														"shopgate-go-category-product-mapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: delete product",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Created single entity\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{sw_endpoint_api}}/product/:productId",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"product",
														":productId"
													],
													"variable": [
														{
															"key": "productId",
															"value": "{{created_product_manual_sort_test_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: check no map",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"check data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.meta.total).to.be.eq(0);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"and\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"categoryId\",\n                    \"value\": \"{{created_category_manual_id}}\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"search",
														"shopgate-go-category-product-mapping"
													]
												}
											},
											"response": []
										}
									],
									"description": "When the DB does not have an initial entry"
								},
								{
									"name": "Always",
									"item": [
										{
											"name": "SW: delete on always",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successfully changed config\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"7f2f651bef104856b008df0796651497\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.indexerDeleteType\",\r\n                \"configurationValue\": \"always\",\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/_action/sync",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"_action",
														"sync"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: create product",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Created single entity\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "indexing-behavior",
														"value": "disable-indexing",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": \"{{created_product_manual_sort_test_id}}\",\r\n    \"name\": \"API: test delete type\",\r\n    \"translations\": {\r\n        \"de-DE\": {\r\n            \"name\": \"API: test delete type (DE)\"\r\n        }\r\n    },\r\n    \"productNumber\": \"API.MANUAL.CAT.ASSIGNED.TO.TEST.DELETE.TYPE\",\r\n    \"stock\": 10,\r\n    \"taxId\": \"{{gen_tax_reduced_id}}\",\r\n    \"price\": [\r\n        {\r\n            \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n            \"gross\": 15,\r\n            \"net\": 10,\r\n            \"linked\": false\r\n        }\r\n    ],\r\n    \"categories\": [\r\n        {\r\n            \"id\": \"{{created_category_manual_id}}\"\r\n        }\r\n    ],\r\n    \"visibilities\": [\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"visibility\": 30\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/product",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"product"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: check product in category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"check data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.meta.total).to.be.eq(1);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"and\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"categoryId\",\n                    \"value\": \"{{created_category_manual_id}}\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"search",
														"shopgate-go-category-product-mapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: delete product",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Created single entity\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{sw_endpoint_api}}/product/:productId",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"product",
														":productId"
													],
													"variable": [
														{
															"key": "productId",
															"value": "{{created_product_manual_sort_test_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: check no map",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"check data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.meta.total).to.be.eq(0);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"and\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"categoryId\",\n                    \"value\": \"{{created_category_manual_id}}\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"search",
														"shopgate-go-category-product-mapping"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Full",
									"item": [
										{
											"name": "SW: delete on full index",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successfully changed config\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"7f2f651bef104856b008df0796651497\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.indexerDeleteType\",\r\n                \"configurationValue\": \"full\",\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/_action/sync",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"_action",
														"sync"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: create product",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Created single entity\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "indexing-behavior",
														"value": "disable-indexing",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": \"{{created_product_manual_sort_test_id}}\",\r\n    \"name\": \"API: test delete type\",\r\n    \"translations\": {\r\n        \"de-DE\": {\r\n            \"name\": \"API: test delete type (DE)\"\r\n        }\r\n    },\r\n    \"productNumber\": \"API.MANUAL.CAT.ASSIGNED.TO.TEST.DELETE.TYPE\",\r\n    \"stock\": 10,\r\n    \"taxId\": \"{{gen_tax_reduced_id}}\",\r\n    \"price\": [\r\n        {\r\n            \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n            \"gross\": 15,\r\n            \"net\": 10,\r\n            \"linked\": false\r\n        }\r\n    ],\r\n    \"categories\": [\r\n        {\r\n            \"id\": \"{{created_category_manual_id}}\"\r\n        }\r\n    ],\r\n    \"visibilities\": [\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"visibility\": 30\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/product",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"product"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: check product in category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"check data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.meta.total).to.be.eq(1);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"and\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"categoryId\",\n                    \"value\": \"{{created_category_manual_id}}\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"search",
														"shopgate-go-category-product-mapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: delete product",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Created single entity\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{sw_endpoint_api}}/product/:productId",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"product",
														":productId"
													],
													"variable": [
														{
															"key": "productId",
															"value": "{{created_product_manual_sort_test_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: check no map",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"check data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.meta.total).to.be.eq(0);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"and\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"categoryId\",\n                    \"value\": \"{{created_category_manual_id}}\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"search",
														"shopgate-go-category-product-mapping"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Never",
									"item": [
										{
											"name": "SW: delete never",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successfully changed config\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"7f2f651bef104856b008df0796651497\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.indexerDeleteType\",\r\n                \"configurationValue\": \"never\",\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/_action/sync",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"_action",
														"sync"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: create product",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Created single entity\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "indexing-behavior",
														"value": "disable-indexing",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": \"{{created_product_manual_sort_test_id}}\",\r\n    \"name\": \"API: test delete type\",\r\n    \"translations\": {\r\n        \"de-DE\": {\r\n            \"name\": \"API: test delete type (DE)\"\r\n        }\r\n    },\r\n    \"productNumber\": \"API.MANUAL.CAT.ASSIGNED.TO.TEST.DELETE.TYPE\",\r\n    \"stock\": 10,\r\n    \"taxId\": \"{{gen_tax_reduced_id}}\",\r\n    \"price\": [\r\n        {\r\n            \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n            \"gross\": 15,\r\n            \"net\": 10,\r\n            \"linked\": false\r\n        }\r\n    ],\r\n    \"categories\": [\r\n        {\r\n            \"id\": \"{{created_category_manual_id}}\"\r\n        }\r\n    ],\r\n    \"visibilities\": [\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"visibility\": 30\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/product",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"product"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: check product in category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"check data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.meta.total).to.be.eq(1);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"and\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"categoryId\",\n                    \"value\": \"{{created_category_manual_id}}\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"search",
														"shopgate-go-category-product-mapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: delete product",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Created single entity\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{sw_endpoint_api}}/product/:productId",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"product",
														":productId"
													],
													"variable": [
														{
															"key": "productId",
															"value": "{{created_product_manual_sort_test_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: check no map",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"check data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.meta.total).to.be.eq(0);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"and\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"categoryId\",\n                    \"value\": \"{{created_category_manual_id}}\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"search",
														"shopgate-go-category-product-mapping"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"description": "Checks that the delete type is completely ignored if \"performant\" write is on. The reason for that is that it always needs to delete when it's on. Reason is because performant cannot handle duplicate entries in the DB and will throw."
						},
						{
							"name": "Safe",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "SW: Change to safe write",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successfully chnaged config\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"f008a85247ed4053885b61b2d492fe2a\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.indexerWriteType\",\r\n                \"configurationValue\": \"safe\",\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/_action/sync",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"_action",
														"sync"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Null",
									"item": [
										{
											"name": "SW: delete on Null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successfully changed config\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"7f2f651bef104856b008df0796651497\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.indexerDeleteType\",\r\n                \"configurationValue\": null,\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/_action/sync",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"_action",
														"sync"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: create product",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Created single entity\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "indexing-behavior",
														"value": "disable-indexing",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": \"{{created_product_manual_sort_test_id}}\",\r\n    \"name\": \"API: test delete type\",\r\n    \"translations\": {\r\n        \"de-DE\": {\r\n            \"name\": \"API: test delete type (DE)\"\r\n        }\r\n    },\r\n    \"productNumber\": \"API.MANUAL.CAT.ASSIGNED.TO.TEST.DELETE.TYPE\",\r\n    \"stock\": 10,\r\n    \"taxId\": \"{{gen_tax_reduced_id}}\",\r\n    \"price\": [\r\n        {\r\n            \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n            \"gross\": 15,\r\n            \"net\": 10,\r\n            \"linked\": false\r\n        }\r\n    ],\r\n    \"categories\": [\r\n        {\r\n            \"id\": \"{{created_category_manual_id}}\"\r\n        }\r\n    ],\r\n    \"visibilities\": [\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"visibility\": 30\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/product",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"product"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: check product in category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"check data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.meta.total).to.be.eq(1);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"and\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"categoryId\",\n                    \"value\": \"{{created_category_manual_id}}\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"search",
														"shopgate-go-category-product-mapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: delete product",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Created single entity\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{sw_endpoint_api}}/product/:productId",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"product",
														":productId"
													],
													"variable": [
														{
															"key": "productId",
															"value": "{{created_product_manual_sort_test_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: check no map",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"check data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.meta.total).to.be.eq(0);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"and\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"categoryId\",\n                    \"value\": \"{{created_category_manual_id}}\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"search",
														"shopgate-go-category-product-mapping"
													]
												}
											},
											"response": []
										}
									],
									"description": "When the DB does not have an initial entry"
								},
								{
									"name": "Always",
									"item": [
										{
											"name": "SW: delete on always",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successfully changed config\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"7f2f651bef104856b008df0796651497\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.indexerDeleteType\",\r\n                \"configurationValue\": \"always\",\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/_action/sync",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"_action",
														"sync"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: create product",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Created single entity\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "indexing-behavior",
														"value": "disable-indexing",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": \"{{created_product_manual_sort_test_id}}\",\r\n    \"name\": \"API: test delete type\",\r\n    \"translations\": {\r\n        \"de-DE\": {\r\n            \"name\": \"API: test delete type (DE)\"\r\n        }\r\n    },\r\n    \"productNumber\": \"API.MANUAL.CAT.ASSIGNED.TO.TEST.DELETE.TYPE\",\r\n    \"stock\": 10,\r\n    \"taxId\": \"{{gen_tax_reduced_id}}\",\r\n    \"price\": [\r\n        {\r\n            \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n            \"gross\": 15,\r\n            \"net\": 10,\r\n            \"linked\": false\r\n        }\r\n    ],\r\n    \"categories\": [\r\n        {\r\n            \"id\": \"{{created_category_manual_id}}\"\r\n        }\r\n    ],\r\n    \"visibilities\": [\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"visibility\": 30\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/product",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"product"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: check product in category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"check data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.meta.total).to.be.eq(1);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"and\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"categoryId\",\n                    \"value\": \"{{created_category_manual_id}}\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"search",
														"shopgate-go-category-product-mapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: delete product",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Created single entity\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{sw_endpoint_api}}/product/:productId",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"product",
														":productId"
													],
													"variable": [
														{
															"key": "productId",
															"value": "{{created_product_manual_sort_test_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: check no map",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"check data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.meta.total).to.be.eq(0);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"and\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"categoryId\",\n                    \"value\": \"{{created_category_manual_id}}\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"search",
														"shopgate-go-category-product-mapping"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Full",
									"item": [
										{
											"name": "SW: delete on full index",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successfully changed config\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"7f2f651bef104856b008df0796651497\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.indexerDeleteType\",\r\n                \"configurationValue\": \"full\",\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/_action/sync",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"_action",
														"sync"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: create product",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Created single entity\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "indexing-behavior",
														"value": "disable-indexing",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": \"{{created_product_manual_sort_test_id}}\",\r\n    \"name\": \"API: test delete type\",\r\n    \"translations\": {\r\n        \"de-DE\": {\r\n            \"name\": \"API: test delete type (DE)\"\r\n        }\r\n    },\r\n    \"productNumber\": \"API.MANUAL.CAT.ASSIGNED.TO.TEST.DELETE.TYPE\",\r\n    \"stock\": 10,\r\n    \"taxId\": \"{{gen_tax_reduced_id}}\",\r\n    \"price\": [\r\n        {\r\n            \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n            \"gross\": 15,\r\n            \"net\": 10,\r\n            \"linked\": false\r\n        }\r\n    ],\r\n    \"categories\": [\r\n        {\r\n            \"id\": \"{{created_category_manual_id}}\"\r\n        }\r\n    ],\r\n    \"visibilities\": [\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"visibility\": 30\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/product",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"product"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: check product in category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"check data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.meta.total).to.be.eq(1);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"and\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"categoryId\",\n                    \"value\": \"{{created_category_manual_id}}\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"search",
														"shopgate-go-category-product-mapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: delete product",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Created single entity\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{sw_endpoint_api}}/product/:productId",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"product",
														":productId"
													],
													"variable": [
														{
															"key": "productId",
															"value": "{{created_product_manual_sort_test_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: check no map",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"check data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.meta.total).to.be.eq(0);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"and\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"categoryId\",\n                    \"value\": \"{{created_category_manual_id}}\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"search",
														"shopgate-go-category-product-mapping"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Never",
									"item": [
										{
											"name": "SW: delete never",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successfully changed config\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"7f2f651bef104856b008df0796651497\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.indexerDeleteType\",\r\n                \"configurationValue\": \"never\",\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/_action/sync",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"_action",
														"sync"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: create product",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Created single entity\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "indexing-behavior",
														"value": "disable-indexing",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": \"{{created_product_manual_sort_test_id}}\",\r\n    \"name\": \"API: test delete type\",\r\n    \"translations\": {\r\n        \"de-DE\": {\r\n            \"name\": \"API: test delete type (DE)\"\r\n        }\r\n    },\r\n    \"productNumber\": \"API.MANUAL.CAT.ASSIGNED.TO.TEST.DELETE.TYPE\",\r\n    \"stock\": 10,\r\n    \"taxId\": \"{{gen_tax_reduced_id}}\",\r\n    \"price\": [\r\n        {\r\n            \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n            \"gross\": 15,\r\n            \"net\": 10,\r\n            \"linked\": false\r\n        }\r\n    ],\r\n    \"categories\": [\r\n        {\r\n            \"id\": \"{{created_category_manual_id}}\"\r\n        }\r\n    ],\r\n    \"visibilities\": [\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"visibility\": 30\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/product",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"product"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: check product in category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"check data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.meta.total).to.be.eq(1);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"and\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"categoryId\",\n                    \"value\": \"{{created_category_manual_id}}\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"search",
														"shopgate-go-category-product-mapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: delete product",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Created single entity\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{sw_endpoint_api}}/product/:productId",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"product",
														":productId"
													],
													"variable": [
														{
															"key": "productId",
															"value": "{{created_product_manual_sort_test_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "SW: check no map",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"check data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.meta.total).to.be.eq(0);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{gen_access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"and\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"categoryId\",\n                    \"value\": \"{{created_category_manual_id}}\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
													"host": [
														"{{sw_endpoint_api}}"
													],
													"path": [
														"search",
														"shopgate-go-category-product-mapping"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"description": "Checks the various delete types are working correctly. Technically all we are testing is that no errors happen. A better test would check that product mappings are not actually deleted. At the moment, deleting a product cascade removes the mapping, so it's not ncessarily because of our logic the product mapping is removed."
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "SW: delete manual cat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Created single entity\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{sw_endpoint_api}}/category/:catId",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"category",
												":catId"
											],
											"variable": [
												{
													"key": "catId",
													"value": "{{created_category_manual_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: delete on always",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successfully changed config\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"7f2f651bef104856b008df0796651497\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.indexerDeleteType\",\r\n                \"configurationValue\": \"always\",\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/sync",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"sync"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Testing how the delete configuration works with DB save configurations: \"performant\" and \"safe\""
				},
				{
					"name": "Indexer API",
					"item": [
						{
							"name": "SW: Enable logs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully enabled NET Prices\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"e1804791335e4cacb96224dd5ee087a8\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.basicLogging\",\r\n                \"configurationValue\": true,\r\n                \"salesChannelId\": null\r\n            },\r\n            {\r\n                \"id\": \"05c3e035665845539ca49451bac69fc1\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.detailLogging\",\r\n                \"configurationValue\": true,\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: create manual cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created single entity\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{created_category_manual_id}}\",\r\n    \"displayNestedProducts\": true,\r\n    \"parentId\": \"{{category_freeTime_id}}\",\r\n    \"afterCategoryId\": \"{{created_category_noFreeShip_id}}\",\r\n    \"type\": \"page\",\r\n    \"productAssignmentType\": \"product\",\r\n    \"name\": \"API: Manual products category\",\r\n    \"cmsPageId\": \"{{gen_cms_page_default_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/category",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"category"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: create prod map",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully created all SG system config entities\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "indexing-behavior",
										"value": "disable-indexing",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-product-category\": {\r\n        \"entity\": \"product_category\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"productId\": \"{{catalog_product_disabled}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_freeShip}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_variant}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_props}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_advPrices_id}}\",\r\n                \"categoryId\": \"{{created_category_manual_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: check no mappings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"check data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.meta.total).to.be.eq(0);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"and\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"categoryId\",\n                    \"value\": \"{{created_category_manual_id}}\"\n                }\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"shopgate-go-category-product-mapping"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: re-index cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ids\": [\r\n        \"{{created_category_manual_id}}\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/shopgate/index/categories",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"shopgate",
										"index",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: check 4 mappings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"check data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.meta.total).to.be.eq(4);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"and\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"categoryId\",\n                    \"value\": \"{{created_category_manual_id}}\"\n                }\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"shopgate-go-category-product-mapping"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: check logs are working",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Your test name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"    const lastLine = jsonData.pop()\r",
											"    pm.expect(lastLine).to.contain(\"Removed 0 items. Written 4 items\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{sw_endpoint_api}}/shopgate/log?lines=20",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"shopgate",
										"log"
									],
									"query": [
										{
											"key": "lines",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: create product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created single entity\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "indexing-behavior",
										"value": "disable-indexing",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{created_product_manual_sort_test_id}}\",\r\n    \"name\": \"Main product with manual cat assingment\",\r\n    \"translations\": {\r\n        \"de-DE\": {\r\n            \"name\": \"Main product with manual cat assingment (DE)\"\r\n        }\r\n    },\r\n    \"productNumber\": \"API.MANUAL.CAT.ASSIGNED\",\r\n    \"stock\": 10,\r\n    \"taxId\": \"{{gen_tax_reduced_id}}\",\r\n    \"price\": [\r\n        {\r\n            \"currencyId\": \"{{gen_salesChannel_currency_id}}\",\r\n            \"gross\": 15,\r\n            \"net\": 10,\r\n            \"linked\": false\r\n        }\r\n    ],\r\n    \"categories\": [\r\n        {\r\n            \"id\": \"{{created_category_manual_id}}\"\r\n        }\r\n    ],\r\n    \"visibilities\": [\r\n        {\r\n            \"salesChannelId\": \"{{gen_salesChannel_id}}\",\r\n            \"visibility\": 30\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/product",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"product"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: check 5 mappings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"check data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.meta.total).to.be.eq(5);\r",
											"    const prod = jsonData.data.find(item => item.attributes.productId === pm.environment.get('created_product_manual_sort_test_id'));\r",
											"    pm.expect(prod).to.not.be.undefined;\r",
											"    pm.expect(prod.attributes.sortOrder, 'Product should be in the middle of other products sorted').to.eq(3);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"and\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"categoryId\",\n                    \"value\": \"{{created_category_manual_id}}\"\n                }\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"shopgate-go-category-product-mapping"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: delete product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created single entity\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{sw_endpoint_api}}/product/:productId",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"product",
										":productId"
									],
									"variable": [
										{
											"key": "productId",
											"value": "{{created_product_manual_sort_test_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: check sort of 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"check data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.meta.total).to.be.eq(4);\r",
											"    const prod = jsonData.data.find(item => item.attributes.productId === pm.environment.get('catalog_product_advPrices_id'));\r",
											"    pm.expect(prod).to.not.be.undefined;\r",
											"    pm.expect(prod.attributes.sortOrder, 'Product should be 3rd sorted A-Z eng').to.eq(3);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"and\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"categoryId\",\n                    \"value\": \"{{created_category_manual_id}}\"\n                }\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"shopgate-go-category-product-mapping"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: delete manual cat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created single entity\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{sw_endpoint_api}}/category/:catId",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"category",
										":catId"
									],
									"variable": [
										{
											"key": "catId",
											"value": "{{created_category_manual_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: check no mappings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"check data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.meta.total).to.be.eq(0);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"multi\",\n            \"operator\": \"and\",\n            \"queries\": [\n                {\n                    \"type\": \"equals\",\n                    \"field\": \"categoryId\",\n                    \"value\": \"{{created_category_manual_id}}\"\n                }\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/shopgate-go-category-product-mapping",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"shopgate-go-category-product-mapping"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: Disable logs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully enabled NET Prices\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"e1804791335e4cacb96224dd5ee087a8\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.basicLogging\",\r\n                \"configurationValue\": false,\r\n                \"salesChannelId\": null\r\n            },\r\n            {\r\n                \"id\": \"05c3e035665845539ca49451bac69fc1\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.detailLogging\",\r\n                \"configurationValue\": false,\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						}
					],
					"description": "Checks that the category index API is working & partially test logging"
				},
				{
					"name": "Cross Sell",
					"item": [
						{
							"name": "SW: create active stream",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created single entity\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{created_stream_allActive_id}}\",\r\n    \"name\": \"All active stream\",\r\n    \"filters\": [\r\n        {\r\n            \"type\": \"equals\",\r\n            \"field\": \"active\",\r\n            \"value\": \"1\",\r\n            \"parent\": {\r\n                \"type\": \"multi\",\r\n                \"operator\": \"AND\"\r\n            }\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/product-stream",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"product-stream"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: create CS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully created all SG system config entities\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-product-cross-selling\": {\r\n        \"entity\": \"product_cross_selling\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"productId\": \"{{catalog_product_main_id}}\",\r\n                \"name\": \"Upsell: All active, 3 limit\",\r\n                \"position\": 4,\r\n                \"type\": \"productStream\",\r\n                \"active\": true,\r\n                \"limit\": 3,\r\n                \"productStreamId\": \"{{created_stream_allActive_id}}\",\r\n                \"sortBy\": \"name\",\r\n                \"sortDirection\": \"DESC\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_main_id}}\",\r\n                \"name\": \"Relations: all active\",\r\n                \"position\": 6,\r\n                \"type\": \"productStream\",\r\n                \"active\": true,\r\n                \"limit\": 10,\r\n                \"productStreamId\": \"{{created_stream_allActive_id}}\",\r\n                \"sortBy\": \"name\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_main_id}}\",\r\n                \"name\": \"Disabled list\",\r\n                \"position\": 3,\r\n                \"type\": \"productList\",\r\n                \"active\": false,\r\n                \"assignedProducts\": [\r\n                    {\r\n                        \"productId\": \"{{gen_product_variant_child_id}}\",\r\n                        \"position\": 1\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_main_id}}\",\r\n                \"name\": \"Cross Sell: manual 2, 1 dis, 1 dupe\",\r\n                \"position\": 2,\r\n                \"type\": \"productList\",\r\n                \"active\": true,\r\n                \"assignedProducts\": [\r\n                    {\r\n                        \"productId\": \"{{catalog_product_disabled}}\",\r\n                        \"position\": 2\r\n                    },\r\n                    {\r\n                        \"productId\": \"{{gen_product_variant_child_id}}\",\r\n                        \"position\": 1\r\n                    },\r\n                    {\r\n                        \"productId\": \"{{catalog_product_props}}\",\r\n                        \"position\": 3\r\n                    },\r\n                    {\r\n                        \"productId\": \"{{catalog_product_variant}}\",\r\n                        \"position\": 4\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_main_id}}\",\r\n                \"name\": \"Custom: manual 3\",\r\n                \"position\": 5,\r\n                \"type\": \"productList\",\r\n                \"active\": true,\r\n                \"assignedProducts\": [\r\n                    {\r\n                        \"productId\": \"{{catalog_product_freeShip}}\",\r\n                        \"position\": 1\r\n                    },\r\n                    {\r\n                        \"productId\": \"{{catalog_product_advPrices_id}}\",\r\n                        \"position\": 2\r\n                    },\r\n\r\n                    {\r\n                        \"productId\": \"{{catalog_product_props}}\",\r\n                        \"position\": 3\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_main_id}}\",\r\n                \"name\": \"Not exported\",\r\n                \"position\": 7,\r\n                \"type\": \"productStream\",\r\n                \"active\": true,\r\n                \"productStreamId\": \"{{created_stream_noFreeShip_id}}\",\r\n                \"sortBy\": \"name\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: check CS exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"const jsonObject = xml2Json(responseBody);",
											"pm.test(\"Main Crossell check\", function () {",
											"    pm.expect(jsonObject.items.item.relations.relation).to.be.an('array', 'Where are the sliders?').length(4, 'Should be 4 sliders max');",
											"    pm.expect(jsonObject.items.item.relations.relation[0].$.type).to.be.eq('crosssell');",
											"    pm.expect(jsonObject.items.item.relations.relation[0].uid).to.be.an('array', 'Where be the children 1?').length(2, 'Should be 2. Maybe child displaying?');",
											"    pm.expect(jsonObject.items.item.relations.relation[0].uid[0]).to.be.eq(pm.environment.get('catalog_product_variant'));",
											"    pm.expect(jsonObject.items.item.relations.relation[0].uid[1]).to.be.eq(pm.environment.get('catalog_product_props'));",
											"});",
											"",
											"pm.test(\"Upsell check\", function () {",
											"    pm.expect(jsonObject.items.item.relations.relation[1].$.type).to.be.eq('upsell');",
											"    pm.expect(jsonObject.items.item.relations.relation[1].uid).to.be.an('array', 'Where be the children 2?').length(3, 'All active, 3 limit');",
											"    pm.expect(jsonObject.items.item.relations.relation[1].uid[0]).to.be.eq(pm.environment.get('catalog_product_variant'));",
											"    pm.expect(jsonObject.items.item.relations.relation[1].uid[1]).to.be.eq(pm.environment.get('catalog_product_freeShip'));",
											"    pm.expect(jsonObject.items.item.relations.relation[1].uid[2]).to.be.eq(pm.environment.get('catalog_product_props'));",
											"});",
											"pm.test(\"Custom list check\", function () {",
											"    pm.expect(jsonObject.items.item.relations.relation[2].$.type).to.be.eq('custom');",
											"    pm.expect(jsonObject.items.item.relations.relation[2].label).to.be.an('string').to.be.eq('Custom: manual 3');",
											"    pm.expect(jsonObject.items.item.relations.relation[2].uid).to.be.an('array', 'Where be the children 3?').length(3, '3 manual products');",
											"    pm.expect(jsonObject.items.item.relations.relation[2].uid[0]).to.be.eq(pm.environment.get('catalog_product_freeShip'));",
											"    pm.expect(jsonObject.items.item.relations.relation[2].uid[1]).to.be.eq(pm.environment.get('catalog_product_advPrices_id'));",
											"    pm.expect(jsonObject.items.item.relations.relation[2].uid[2]).to.be.eq(pm.environment.get('catalog_product_props'));",
											"});",
											"pm.test(\"Relation list check\", function () {",
											"    pm.expect(jsonObject.items.item.relations.relation[3].$.type).to.be.eq('relation');",
											"    pm.expect(jsonObject.items.item.relations.relation[3].uid).to.be.an('array', 'Where be the children 4?').length(10, 'All 10 products?');",
											"    pm.expect(jsonObject.items.item.relations.relation[3].uid[0]).to.be.eq(pm.environment.get('created_product_prevPrice_id'));",
											"    pm.expect(jsonObject.items.item.relations.relation[3].uid[1]).to.be.eq(pm.environment.get('created_product_advPrice_noFallback_id'));   ",
											"    pm.expect(jsonObject.items.item.relations.relation[3].uid[2]).to.be.eq(pm.environment.get('created_product_maxPurchaseTen_id'));",
											"    pm.expect(jsonObject.items.item.relations.relation[3].uid[3]).to.be.eq(pm.environment.get('created_product_noStock_backorder_id'));",
											"    pm.expect(jsonObject.items.item.relations.relation[3].uid[4]).to.be.eq(pm.environment.get('created_product_noStock_id'));",
											"    pm.expect(jsonObject.items.item.relations.relation[3].uid[5]).to.be.eq(pm.environment.get('created_product_reducedTax_id'));",
											"    pm.expect(jsonObject.items.item.relations.relation[3].uid[6]).to.be.eq(pm.environment.get('catalog_product_variant'));",
											"    pm.expect(jsonObject.items.item.relations.relation[3].uid[7]).to.be.eq(pm.environment.get('catalog_product_main_id'));",
											"    pm.expect(jsonObject.items.item.relations.relation[3].uid[8]).to.be.eq(pm.environment.get('catalog_product_advPrices_id'));",
											"    pm.expect(jsonObject.items.item.relations.relation[3].uid[9]).to.be.eq(pm.environment.get('catalog_product_props')); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "limit",
											"value": "100",
											"description": "\n",
											"type": "text"
										},
										{
											"key": "offset",
											"value": "0",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{catalog_product_main_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Regular prices",
					"item": [
						{
							"name": "SG: check prices",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.test(\"Checking basic prices\", function () {",
											"    const jsonObject = xml2Json(responseBody);",
											"",
											"    pm.expect(jsonObject.items.item.prices.$, 'Price should have a type').to.haveOwnProperty('type').to.be.eq('gross',' Should be gross property set');",
											"    pm.expect(jsonObject.items.item.prices.price).to.be.eq('19.99');",
											"    pm.expect(jsonObject.items.item.prices.msrp).to.be.undefined;",
											"    pm.expect(jsonObject.items.item.prices.base_price).to.be.eq('Content: 1');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{catalog_product_variant}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Net Prices",
					"item": [
						{
							"name": "SW: Enable exportNetPrices",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully enabled NET Prices\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"ba903ee4d61c414385023e6ef3c1f484\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.exportNetPrices\",\r\n                \"configurationValue\": true,\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: get main product net",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.test(\"Checking basic prices\", function () {",
											"    const jsonObject = xml2Json(responseBody);",
											"",
											"    pm.expect(jsonObject.items.item.prices.$, 'Price should have type net').to.haveOwnProperty('type').to.be.eq('net',' Should be net property set');",
											"    pm.expect(jsonObject.items.item.prices.price).to.be.eq('416.76');",
											"    pm.expect(jsonObject.items.item.prices.base_price).to.be.eq('Content: 1');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "limit",
											"value": "100",
											"description": "\n",
											"type": "text"
										},
										{
											"key": "offset",
											"value": "0",
											"type": "text"
										},
										{
											"key": "uids[]",
											"value": "{{catalog_product_main_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: customer grp tier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.test(\"Checking that customer group tier prices are Net discounted\", function () {",
											"    const jsonObject = xml2Json(responseBody);",
											"",
											"    pm.expect(jsonObject.items.item.prices.$, 'Price should have a type').to.haveOwnProperty('type').to.be.eq('net',' Should be gross property set');",
											"    pm.expect(jsonObject.items.item.prices.price).to.be.eq('798.32');",
											"    pm.expect(jsonObject.items.item.prices.base_price).to.be.eq('Content: 1');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[1].$.threshold).to.be.eq('12');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[1]._).to.be.eq('168.07');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[1].$.type).to.be.eq('fixed');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[1].$, 'Should be a customer group tier price')",
											"    .to.haveOwnProperty('customer_group_uid')",
											"    .to.be.eq(pm.environment.get('gen_customer_group_main_id'), 'Should equal default customer group');",
											"",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[0].$.threshold).to.be.eq('1');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[0].$.max_quantity).to.be.eq('11');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[0]._).to.be.eq('126.05');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[0].$.type).to.be.eq('fixed');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[0].$, 'Should be a customer group tier price')",
											"    .to.haveOwnProperty('customer_group_uid')",
											"    .to.be.eq(pm.environment.get('gen_customer_group_main_id'), 'Should equal default customer group');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{catalog_product_advPrices_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: Disable exportNetPrices",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully disabled NET price export\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"ba903ee4d61c414385023e6ef3c1f484\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.exportNetPrices\",\r\n                \"configurationValue\": false,\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tier Prices",
					"item": [
						{
							"name": "SG: customer grp tier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.test(\"Checking that customer group tier prices are Gross discounted\", function () {",
											"    const jsonObject = xml2Json(responseBody);",
											"",
											"    pm.expect(jsonObject.items.item.prices.$, 'Price should have a type').to.haveOwnProperty('type').to.be.eq('gross',' Should be gross property set');",
											"    pm.expect(jsonObject.items.item.prices.price).to.be.eq('950');",
											"    pm.expect(jsonObject.items.item.prices.base_price).to.be.eq('Content: 1');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[1].$.threshold).to.be.eq('12');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[1]._).to.be.eq('200');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[1].$.type).to.be.eq('fixed');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[1].$, 'Should be a customer group tier price')",
											"    .to.haveOwnProperty('customer_group_uid')",
											"    .to.be.eq(pm.environment.get('gen_customer_group_main_id'), 'Should equal default customer group');",
											"",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[0].$.threshold).to.be.eq('1');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[0].$.max_quantity).to.be.eq('11');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[0]._).to.be.eq('150');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[0].$.type).to.be.eq('fixed');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[0].$, 'Should be a customer group tier price')",
											"    .to.haveOwnProperty('customer_group_uid')",
											"    .to.be.eq(pm.environment.get('gen_customer_group_main_id'), 'Should equal default customer group');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{catalog_product_advPrices_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: complex tier prices",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.test(\"Checking that we have a fallaback tier price\", async () => {",
											"    const jsonObject = await Utility.getJson(pm.response.text());",
											"",
											"",
											"    pm.expect(jsonObject.items.item.prices.price).to.be.eq('28');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[0].$.threshold).to.be.eq('1');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[0]._).to.be.eq('0');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[0].$.type).to.be.eq('fixed');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[0].$, 'Should be a customer group tier price')",
											"    .to.haveOwnProperty('customer_group_uid')",
											"    .to.be.eq(pm.environment.get('created_customerGroup_net_id'), 'Should equal NET group');",
											"",
											"    // this group was created on the fly",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[1].$.threshold).to.be.eq('1');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[1].$.max_quantity).to.be.undefined;",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[1]._).to.be.eq('11');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[1].$.type).to.be.eq('fixed');",
											"    pm.expect(jsonObject.items.item.prices.tier_prices.tier_price[1].$, 'Should be a customer group tier price')",
											"    .to.haveOwnProperty('customer_group_uid')",
											"    .to.be.eq(pm.environment.get('gen_customer_group_main_id'), 'Should equal default customer group');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{created_product_advPrice_noFallback_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Variant export",
					"item": [
						{
							"name": "SG: variant check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"const jsonObject = xml2Json(responseBody);",
											"pm.test('Variant check', function() {",
											"    // variant parent",
											"    const variantProduct = jsonObject.items.item",
											"    pm.expect(variantProduct.children, 'Should have children').to.haveOwnProperty('item');",
											"    pm.expect(variantProduct.children.item).to.be.a('array').to.not.be.empty;",
											"",
											"    // variant child",
											"    const childProduct = Utility.getXmlByUid(variantProduct.children.item, pm.environment.get('gen_product_variant_child_id'));",
											"    pm.expect(childProduct, 'should have identifiers').to.haveOwnProperty('identifiers');",
											"    pm.expect(childProduct.identifiers.identifier.$.type).to.eq('sku', 'Should have SKU identifier only');",
											"    pm.expect(childProduct.attributes.attribute).lengthOf(2, 'Should have M and Red');",
											"",
											"    // created child which was set to be default",
											"    const createdChild = Utility.getXmlByUid(variantProduct.children.item, pm.environment.get('created_product_variant_child_id'));",
											"    pm.expect(createdChild.$.default_child, 'should be default variant').to.eq('1');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{catalog_product_variant}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: set simple",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Has settings changed\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.shopgate_settings).to.be.a('array').to.be.not.empty;",
											"    pm.expect(jsonData.shopgate_settings[0].name).to.eq('product_types_to_export');",
											"    pm.expect(jsonData.shopgate_settings[0].old).to.be.an('array').length(2);",
											"    pm.expect(jsonData.shopgate_settings[0].new).to.eq('simple');",
											"    pm.expect(jsonData.shopgate_settings[1].name).to.eq('shop_is_active');",
											"    pm.expect(jsonData.shopgate_settings[1].old).is.oneOf([0, false]);",
											"    pm.expect(jsonData.shopgate_settings[1].new).to.eq('1');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_set_settings}}",
											"type": "text"
										},
										{
											"key": "shopgate_settings[0][name]",
											"value": "product_types_to_export",
											"type": "text"
										},
										{
											"key": "shopgate_settings[0][value]",
											"value": "simple",
											"type": "text"
										},
										{
											"key": "shopgate_settings[1][name]",
											"value": "shop_is_active",
											"type": "text"
										},
										{
											"key": "shopgate_settings[1][value]",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: ping check change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Ping Pong\", function () {",
											"    pm.expect(jsonData.pong).to.eql('OK');",
											"});",
											"",
											"pm.test('Plugin Versions', function () {",
											"    pm.expect(jsonData.plugin_version).to.be.a('string').to.be.eq(pm.environment.get(\"gen_plugin_version\"));",
											"    pm.expect(jsonData.shopgate_library_version).to.be.a('string').to.be.not.empty;",
											"    pm.expect(jsonData.plugin_info['Shopware core version']).to.be.a('string').to.not.be.empty;",
											"});",
											"pm.test('Configurations check', function () {",
											"    pm.expect(jsonData.configuration.shop_is_active).is.oneOf([0, false]);",
											"    pm.expect(jsonData.configuration.server).to.be.eq('custom');",
											"    pm.expect(jsonData.configuration.product_types_to_export).to.be.a('array').length(1);",
											"    pm.expect(jsonData.configuration.product_types_to_export[0]).to.eq('simple');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_ping}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: no variant exports",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.have.jsonBody('error');",
											"});",
											"pm.test(\"No variant in cart\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error_text).to.eql('buffer is empty');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{catalog_product_variant}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: revert",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Has settings changed\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.shopgate_settings).to.be.a('array').to.be.not.empty;",
											"    pm.expect(jsonData.shopgate_settings[0].name).to.eq('product_types_to_export');",
											"    pm.expect(jsonData.shopgate_settings[0].old).to.be.an('array').length(1);",
											"    pm.expect(jsonData.shopgate_settings[0].new).to.eq('simple,variant');",
											"    // doesn't work anymore",
											"    pm.expect(jsonData.shopgate_settings[1].name).to.eq('shop_is_active');",
											"    pm.expect(jsonData.shopgate_settings[1].old).to.eq(false);",
											"    pm.expect(jsonData.shopgate_settings[1].new).to.eq('0');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_set_settings}}",
											"type": "text"
										},
										{
											"key": "shopgate_settings[0][name]",
											"value": "product_types_to_export",
											"type": "text"
										},
										{
											"key": "shopgate_settings[0][value]",
											"value": "simple,variant",
											"type": "text"
										},
										{
											"key": "shopgate_settings[1][name]",
											"value": "shop_is_active",
											"type": "text"
										},
										{
											"key": "shopgate_settings[1][value]",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tax",
					"item": [
						{
							"name": "SG: check reduced tax",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.test(\"Checking tax class\", function () {",
											"    const jsonObject = xml2Json(responseBody);",
											"",
											"    pm.expect(jsonObject.items.item.tax_class).to.be.a('string').to.eq('tax_' + pm.environment.get('gen_tax_reduced_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{created_product_reducedTax_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Custom Field Export Types",
					"item": [
						{
							"name": "SW: get default config ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get config ID\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.meta.total).to.eql(1);",
											"    const id = jsonData.data[0].id;",
											"    pm.environment.set('gen_exportTypeConfig_id', id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"filter\": [\n        {\n            \"type\": \"equals\",\n            \"field\": \"configurationKey\",\n            \"value\": \"SgateShopgatePluginSW6.config.customFieldTypeExport\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/system-config",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"system-config"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: remove default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{sw_endpoint_api}}/system-config/:id",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"system-config",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{gen_exportTypeConfig_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: empty export conifg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully changed config\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"7f62783355b2452bbd15d22da68811b3\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.customFieldTypeExport\",\r\n                \"configurationValue\": [],\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: check manufacturer fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// functionality is only supported in SW 6.4.10+",
											"if (Utility.version.isLT(pm.environment.get('gen_shopware_version'), '6.4.10.0')){",
											"    return;",
											"}",
											"",
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.test('Check manufacturer', async function() {",
											"    const jsonObject = await Utility.getJson(pm.response.text());",
											"    const properties = jsonObject.items.item.properties.property;",
											"    pm.expect(jsonObject.items.item.manufacturer.title).to.eq('API: simpleOne manufacturer (EN)');",
											"",
											"    pm.expect(properties).to.be.a('array');",
											"    const manufacturer = Utility.getXmlByLabel(properties, 'API Manufacturer Custom Field 0001: text');",
											"    pm.expect(manufacturer).to.be.undefined;",
											"});",
											"",
											"pm.test('Check other props no longer export', async function() {",
											"    const jsonObject = await Utility.getJson(pm.response.text());",
											"    const properties = jsonObject.items.item.properties.property;",
											"     pm.expect(properties).to.be.a('array');",
											"    const integer = Utility.getXmlByLabel(properties, 'API product Custom Field 0001: int');",
											"    pm.expect(integer, 'should have found width').be.undefined;",
											"});",
											"    "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{created_product_prevPrice_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: update config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"configurationValue\": [\n        {\n            \"label\": \"Manufacturers\",\n            \"value\": \"product_manufacturer\"\n        },\n        {\n            \"label\": \"Products\",\n            \"value\": \"product\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/system-config/:id",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"system-config",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "7f62783355b2452bbd15d22da68811b3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: check manuf. fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// functionality is only supported in SW 6.4.10+",
											"if (Utility.version.isLT(pm.environment.get('gen_shopware_version'), '6.4.10.0')){",
											"    return;",
											"}",
											"",
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.test('Check manufacturer', async function() {",
											"    const jsonObject = await Utility.getJson(pm.response.text());",
											"    const properties = jsonObject.items.item.properties.property;",
											"    pm.expect(jsonObject.items.item.manufacturer.title).to.eq('API: simpleOne manufacturer (EN)');",
											"",
											"    pm.expect(properties).to.be.a('array');",
											"    const manufacturer = Utility.getXmlByLabel(properties, 'API Manufacturer Custom Field 0001: text');",
											"    pm.expect(manufacturer).to.not.be.undefined;",
											"});",
											"",
											"pm.test('Check other props export again', async function() {",
											"    const jsonObject = await Utility.getJson(pm.response.text());",
											"    const properties = jsonObject.items.item.properties.property;",
											"     pm.expect(properties).to.be.a('array');",
											"    const integer = Utility.getXmlByLabel(properties, 'API product Custom Field 0001: int');",
											"    pm.expect(integer, 'should have found width').not.be.undefined;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{created_product_prevPrice_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Manufacturer export",
					"item": [
						{
							"name": "SG: no manufacturer props",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.test('Check properties',  async function() {",
											"    const jsonObject = await Utility.getJson(pm.response.text());",
											"    const properties = jsonObject.items.item.properties.property;",
											"    pm.expect(properties).to.be.an('array', 'Should be a property array');",
											"",
											"    const manufacturer = jsonObject.items.item.manufacturer;",
											"    pm.expect(manufacturer).to.not.be.undefined;",
											"    pm.expect(manufacturer.$.uid).to.eq(pm.environment.get('created_manufacturer_simpleOne_id'))",
											"    pm.expect(manufacturer.title).to.eq('API: simpleOne manufacturer (EN)');",
											"",
											"    const name = Utility.getXmlByUid(properties, 'manufacturer_name');",
											"    pm.expect(name, 'Should be no name prop').to.be.undefined;",
											"",
											"    const description = Utility.getXmlByUid(properties, 'manufacturer_description');",
											"    pm.expect(description, 'Should be no desc prop').to.be.undefined;",
											"",
											"    const url = Utility.getXmlByUid(properties, 'manufacturer_mediaUrl');",
											"    pm.expect(url, 'Should be no media url prop').to.be.undefined;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{created_product_prevPrice_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: set config to true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully changed config\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"ed34b97139254e678cbaf9df60bdbc1c\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.manufacturerProductProps\",\r\n                \"configurationValue\": true,\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: check manufacturer props",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.test('Check properties',  async () => {",
											"    const jsonObject = await Utility.getJson(pm.response.text());",
											"",
											"    const manufacturer = jsonObject.items.item.manufacturer;",
											"    pm.expect(manufacturer).to.not.be.null;",
											"    pm.expect(manufacturer.$.uid).to.eql(pm.environment.get('created_manufacturer_simpleOne_id'));",
											"    pm.expect(manufacturer.title).to.eql('API: simpleOne manufacturer (EN)');",
											"",
											"    const properties = jsonObject.items.item.properties.property;",
											"",
											"    pm.expect(properties).to.be.an('array', 'Should be a property array');",
											"    const name = Utility.getXmlByUid(properties, 'manufacturer_name');",
											"    pm.expect(name).to.have.property('label', 'Manufacturer Name');",
											"    pm.expect(name).to.have.property('value', 'API: simpleOne manufacturer (EN)');",
											"",
											"    const description = Utility.getXmlByUid(properties, 'manufacturer_description');",
											"    pm.expect(description).to.have.property('label', 'Manufacturer Description');",
											"    pm.expect(description).to.have.property('value', 'API: some description or another (EN)');",
											"",
											"    const url = Utility.getXmlByUid(properties, 'manufacturer_mediaUrl');",
											"    pm.expect(url).to.have.property('label', 'Manufacturer Media Url');",
											"    pm.expect(url).to.have.property('value').that.includes('200x200@2x.png');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{created_product_prevPrice_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: set config to false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully changed config\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"ed34b97139254e678cbaf9df60bdbc1c\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.manufacturerProductProps\",\r\n                \"configurationValue\": false,\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						}
					],
					"description": "Testing configuration that allow exporting manufacturer data as properties"
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Live shopping",
					"item": [
						{
							"name": "SW: Enable live-shopping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully enabled LiveShopping\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"e52549984567bf14a0b94fc8e38bfa4a\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.isLiveShopping\",\r\n                \"configurationValue\": true,\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: gross cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Check default customer group set for customer\", function () {",
											"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('gen_customer_group_main_id'));",
											"});",
											"// reason for this is because the active line item in cart  are \"free ship\" items",
											"pm.test(\"Check shipping is free\", function () {",
											"    pm.expect(jsonData.shipping_methods).length(5);",
											"    jsonData.shipping_methods.map(method => {",
											"        pm.expect(method.amount_with_tax).is.eq(0, 'Price of all shipping should be 0');",
											"    });",
											"});",
											"pm.test(\"General item check\", function () {",
											"    pm.expect(jsonData.items).length(4, 'Should be 4 items in cart');",
											"});",
											"const items = jsonData.items;",
											"pm.test(\"Check item success\", function () {",
											"    // checking that advanced prices apply to this customer group",
											"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_advPrices_id'));",
											"    pm.expect(item.is_buyable).to.eql(1);",
											"    pm.expect(item.qty_buyable).to.eql(12);",
											"    pm.expect(item.stock_quantity).to.eql(10);",
											"    pm.expect(item.unit_amount).to.eql(100);",
											"    pm.expect(item.unit_amount_with_tax).to.eql(119);",
											"});",
											"pm.test(\"Check item not found\", function () {",
											"    const item = Utility.getByItemNumber(items, '1901dc5e888f4b1ea4168c2c5f005540');",
											"    pm.expect(item.is_buyable).to.eql(0);",
											"    pm.expect(item.error).to.eql(301);",
											"});",
											"pm.test(\"Check item out of stock\", function () {",
											"    const item = Utility.getByItemNumber(items, pm.environment.get('created_product_noStock_id'));",
											"    pm.expect(item.is_buyable).to.eql(0);",
											"    pm.expect(item.error).to.eql(300);",
											"});",
											"pm.test(\"Check item max purchase\", function () {",
											"    const item = Utility.getByItemNumber(items, pm.environment.get('created_product_maxPurchaseTen_id'));",
											"    pm.expect(item.is_buyable).to.eql(0);",
											"    pm.expect(item.qty_buyable).to.eql(10);",
											"    pm.expect(item.stock_quantity).to.eq(50);",
											"    pm.expect(item.unit_amount).to.eql(200);",
											"    pm.expect(item.unit_amount_with_tax).to.eql(238);",
											"    pm.expect(item.error).to.eql(302);",
											"});",
											"",
											"pm.test(\"Check basic coupon code\", function () {",
											"    const coupon = jsonData.external_coupons[0];",
											"    pm.expect(jsonData.external_coupons).length(1);",
											"    pm.expect(coupon.is_valid).to.eq(1);",
											"    pm.expect(coupon.code).to.eq(pm.environment.get('created_promotion_byCode_code'));",
											"    pm.expect(coupon.amount_gross).to.eq(2.25);",
											"    pm.expect(coupon.name).to.eq('API: promo by code');",
											"    pm.expect(coupon.currency).to.eq('EUR');",
											"    pm.expect(coupon.internal_info, 'Internal info should not be empty').to.not.be.empty;",
											"    const internalInfo = JSON.parse(coupon.internal_info);",
											"    pm.expect(internalInfo.promotionId).to.eq(pm.environment.get('created_promotion_byCode_id'));",
											"    pm.expect(internalInfo.itemType).to.eq('coupon');",
											"    Test.checkCouponAmount(coupon);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "{{framework_action_check_cart}}",
											"type": "text"
										},
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "cart[external_customer_id]",
											"value": "{{customer_default_id}}",
											"type": "text"
										},
										{
											"key": "cart[payment_group]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[payment_method]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][country]",
											"value": "BD",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][country]",
											"value": "BD",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number]",
											"value": "{{catalog_product_advPrices_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number_public]",
											"value": "SWDEMO10002",
											"type": "text"
										},
										{
											"key": "cart[items][0][quantity]",
											"value": "12",
											"type": "text"
										},
										{
											"key": "cart[items][0][unit_amount]",
											"value": "100",
											"type": "text"
										},
										{
											"key": "cart[items][0][unit_amount_with_tax]",
											"value": "119",
											"type": "text"
										},
										{
											"key": "cart[items][0][tax_percent]",
											"value": "19",
											"type": "text"
										},
										{
											"key": "cart[items][1][item_number]",
											"value": "1901dc5e888f4b1ea4168c2c5f005540",
											"type": "text"
										},
										{
											"key": "cart[items][1][item_number_public]",
											"value": "SWDEMO10006",
											"type": "text"
										},
										{
											"key": "cart[items][1][quantity]",
											"value": "100",
											"type": "text"
										},
										{
											"key": "cart[items][1][unit_amount]",
											"value": "16.8067",
											"type": "text"
										},
										{
											"key": "cart[items][1][unit_amount_with_tax]",
											"value": "20",
											"type": "text"
										},
										{
											"key": "cart[items][1][tax_percent]",
											"value": "19",
											"type": "text"
										},
										{
											"key": "cart[items][2][item_number]",
											"value": "{{created_product_noStock_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][2][item_number_public]",
											"value": "SGDEMOCHECKCART01",
											"type": "text"
										},
										{
											"key": "cart[items][2][quantity]",
											"value": "50",
											"type": "text"
										},
										{
											"key": "cart[items][2][unit_amount]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "cart[items][2][unit_amount_with_tax]",
											"value": "1.19",
											"type": "text"
										},
										{
											"key": "cart[items][2][tax_percent]",
											"value": "19",
											"type": "text"
										},
										{
											"key": "cart[items][3][item_number]",
											"value": "{{created_product_maxPurchaseTen_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][3][item_number_public]",
											"value": "SGDEMOCHECKCART02",
											"type": "text"
										},
										{
											"key": "cart[items][3][quantity]",
											"value": "50",
											"type": "text"
										},
										{
											"key": "cart[items][3][unit_amount]",
											"value": "200",
											"type": "text"
										},
										{
											"key": "cart[items][3][unit_amount_with_tax]",
											"value": "238",
											"type": "text"
										},
										{
											"key": "cart[items][3][tax_percent]",
											"value": "19",
											"type": "text"
										},
										{
											"key": "cart[external_coupons][0][code]",
											"value": "{{created_promotion_byCode_code}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: different tax rates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Check default customer group set for customer\", function () {",
											"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('gen_customer_group_main_id'));",
											"});",
											"// reason for this is because the active line item in cart  are \"free ship\" items",
											"pm.test(\"Check shipping is free\", function () {",
											"    pm.expect(jsonData.shipping_methods).length(5);",
											"    jsonData.shipping_methods.map(method => {",
											"        pm.expect(method.amount_with_tax).is.eq(0, 'Price of all shipping should be 0');",
											"    });",
											"});",
											"pm.test(\"General item check\", function () {",
											"    pm.expect(jsonData.items).length(2, 'Should be 2 items in cart');",
											"});",
											"const items = jsonData.items;",
											"pm.test(\"Check item success, specific tax was used\", function () {",
											"    // checking that advanced prices apply to this customer group",
											"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_advPrices_id'));",
											"    pm.expect(item.is_buyable).to.eql(1);",
											"    pm.expect(item.qty_buyable).to.eql(12);",
											"    pm.expect(item.stock_quantity).to.eql(10);",
											"    pm.expect(item.unit_amount).to.eql(100);",
											"    // Gross customer, import 110 price + 10% tax",
											"    pm.expect(item.unit_amount_with_tax).to.eql(110);",
											"});",
											"pm.test(\"Check item max purchase, no tax\", function () {",
											"    const item = Utility.getByItemNumber(items, pm.environment.get('created_product_maxPurchaseTen_id'));",
											"    pm.expect(item.is_buyable).to.eql(0);",
											"    pm.expect(item.qty_buyable).to.eql(10);",
											"    pm.expect(item.stock_quantity).to.eq(50);",
											"    pm.expect(item.unit_amount).to.eql(10);",
											"    // 10+0.01% tax",
											"    pm.expect(item.unit_amount_with_tax).to.eql(10.001);",
											"    pm.expect(item.error).to.eql(302);",
											"});",
											"",
											"pm.test(\"Check basic coupon code\", function () {",
											"    const coupon = jsonData.external_coupons[0];",
											"    pm.expect(jsonData.external_coupons).length(1);",
											"    pm.expect(coupon.is_valid).to.eq(1);",
											"    pm.expect(coupon.code).to.eq(pm.environment.get('created_promotion_byCode_code'));",
											"    //pm.expect(coupon.amount_net).to.eq(2.06);",
											"    pm.expect(coupon.amount_gross).to.eq(2.25);",
											"    pm.expect(coupon.name).to.eq('API: promo by code');",
											"    pm.expect(coupon.currency).to.eq('EUR');",
											"    pm.expect(coupon.internal_info, 'Internal info should not be empty').to.not.be.empty;",
											"    const internalInfo = JSON.parse(coupon.internal_info);",
											"    pm.expect(internalInfo.promotionId).to.eq(pm.environment.get('created_promotion_byCode_id'));",
											"    pm.expect(internalInfo.itemType).to.eq('coupon');",
											"    Test.checkCouponAmount(coupon);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "{{framework_action_check_cart}}",
											"type": "text"
										},
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "cart[external_customer_id]",
											"value": "{{customer_default_id}}",
											"type": "text"
										},
										{
											"key": "cart[payment_group]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[payment_method]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][country]",
											"value": "BD",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][country]",
											"value": "BD",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number]",
											"value": "{{catalog_product_advPrices_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number_public]",
											"value": "SWDEMO10002",
											"type": "text"
										},
										{
											"key": "cart[items][0][quantity]",
											"value": "12",
											"type": "text"
										},
										{
											"key": "cart[items][0][unit_amount]",
											"value": "100",
											"type": "text"
										},
										{
											"key": "cart[items][0][unit_amount_with_tax]",
											"value": "110",
											"type": "text"
										},
										{
											"key": "cart[items][0][tax_percent]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "cart[items][1][item_number]",
											"value": "{{created_product_maxPurchaseTen_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][1][item_number_public]",
											"value": "SGDEMOCHECKCART01",
											"type": "text"
										},
										{
											"key": "cart[items][1][quantity]",
											"value": "50",
											"type": "text"
										},
										{
											"key": "cart[items][1][unit_amount]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "cart[items][1][unit_amount_with_tax]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "cart[items][1][tax_percent]",
											"value": "0.01",
											"type": "text"
										},
										{
											"key": "cart[external_coupons][0][code]",
											"value": "{{created_promotion_byCode_code}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: NET cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"if (pm.globals.get('verbose')) {",
											"    console.log(jsonData);",
											"}",
											"",
											"pm.test(\"Check default customer group set for customer\", function () {",
											"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('created_customerGroup_net_id'));",
											"});",
											"// reason for this is because the active line item in cart  are \"free ship\" items",
											"pm.test(\"Check shipping is free\", function () {",
											"    pm.expect(jsonData.shipping_methods).length(6);",
											"    jsonData.shipping_methods.map(method => {",
											"        pm.expect(method.amount_with_tax).is.eq(0, 'Price of all shipping should be 0');",
											"    });",
											"});",
											"pm.test(\"General item check\", function () {",
											"    pm.expect(jsonData.items).length(2, 'Should be 2 items in cart');",
											"});",
											"const items = jsonData.items;",
											"// checks that advanced prices do not apply to this customer group",
											"pm.test(\"Check item success\", function () {",
											"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_advPrices_id'));",
											"    pm.expect(item.is_buyable).to.eql(1);",
											"    pm.expect(item.qty_buyable).to.eql(12);",
											"    pm.expect(item.stock_quantity).to.eql(10);",
											"    pm.expect(item.unit_amount).to.eql(721.29);",
											"    // Net or Gross cart matters not, we calcluate taxes manually off of Net amount",
											"    pm.expect(item.unit_amount_with_tax).to.eql(858.335);",
											"});",
											"pm.test(\"Check item max purchase\", function () {",
											"    const item = Utility.getByItemNumber(items, pm.environment.get('created_product_maxPurchaseTen_id'));",
											"    pm.expect(item.is_buyable).to.eql(0);",
											"    pm.expect(item.qty_buyable).to.eql(10);",
											"    pm.expect(item.stock_quantity).to.eq(50);",
											"    pm.expect(item.error).to.eql(302);",
											"    pm.expect(item.unit_amount).to.eql(798.32);",
											"    pm.expect(item.unit_amount_with_tax).to.eql(950.001);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "{{framework_action_check_cart}}",
											"type": "text"
										},
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "cart[external_customer_id]",
											"value": "{{created_customer_withCustomGrp_id}}",
											"type": "text"
										},
										{
											"key": "cart[payment_group]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[payment_method]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][country]",
											"value": "BD",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][country]",
											"value": "BD",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number]",
											"value": "{{catalog_product_advPrices_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number_public]",
											"value": "SWDEMO10002",
											"type": "text"
										},
										{
											"key": "cart[items][0][quantity]",
											"value": "12",
											"type": "text"
										},
										{
											"key": "cart[items][0][unit_amount]",
											"value": "721.29",
											"type": "text"
										},
										{
											"key": "cart[items][0][unit_amount_with_tax]",
											"value": "858.34",
											"type": "text"
										},
										{
											"key": "cart[items][0][tax_percent]",
											"value": "19.00",
											"type": "text"
										},
										{
											"key": "cart[items][1][item_number]",
											"value": "{{created_product_maxPurchaseTen_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][1][item_number_public]",
											"value": "SGDEMOCHECKCART02",
											"type": "text"
										},
										{
											"key": "cart[items][1][quantity]",
											"value": "50",
											"type": "text"
										},
										{
											"key": "cart[items][1][unit_amount]",
											"value": "798.32",
											"type": "text"
										},
										{
											"key": "cart[items][1][unit_amount_with_tax]",
											"value": "950",
											"type": "text"
										},
										{
											"key": "cart[items][1][tax_percent]",
											"value": "19.00",
											"type": "text"
										},
										{
											"key": "cart[items][1][currency]",
											"value": "EUR",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: USA ship promo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Check default customer group set for customer\", function () {",
											"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('gen_customer_group_main_id'));",
											"});",
											"// reason for this is because the active line item in cart  are \"free ship\" items",
											"pm.test(\"Check shipping is free\", function () {",
											"    pm.expect(jsonData.shipping_methods).length(5);",
											"    jsonData.shipping_methods.map(method => {",
											"        pm.expect(method.amount_with_tax).is.eq(0, 'Price of all shipping should be 0');",
											"    });",
											"});",
											"pm.test(\"General item check\", function () {",
											"    pm.expect(jsonData.items).length(1, 'Should be 4 items in cart');",
											"});",
											"pm.test(\"Check item success\", function () {",
											"    const item = Utility.getByItemNumber(jsonData.items, pm.environment.get('catalog_product_advPrices_id'));",
											"    pm.expect(item.is_buyable).to.eql(1);",
											"    pm.expect(item.qty_buyable).to.eql(1);",
											"    pm.expect(item.stock_quantity).to.eql(10);",
											"    pm.expect(item.unit_amount).to.eql(672.27);",
											"    // 672.27*1.19",
											"    pm.expect(item.unit_amount_with_tax).to.eql(800.001);",
											"});",
											"",
											"pm.test(\"Check USA customer auto rule is handled\", function () {",
											"    const coupon = Utility.getByName(jsonData.external_coupons, 'API: promo by Billing Country USA');",
											"    pm.expect(jsonData.external_coupons).length(2);",
											"    pm.expect(coupon.is_valid).to.eq(1);",
											"    pm.expect(coupon.not_valid_message).to.eq(null);",
											"    pm.expect(coupon.code).to.be.a('string').to.eq(pm.environment.get('created_discount_customerUSA_cart_1_id'));",
											"    //pm.expect(coupon.amount_net).to.eq(67.23);",
											"    pm.expect(coupon.amount_gross).to.eq(80);",
											"    pm.expect(coupon.name).to.eq('API: promo by Billing Country USA');",
											"    pm.expect(coupon.currency).to.eq('EUR');",
											"    pm.expect(coupon.internal_info, 'Internal info should not be empty').to.not.be.empty;",
											"    const internalInfo = JSON.parse(coupon.internal_info);",
											"    pm.expect(internalInfo.promotionId).to.eq(pm.environment.get('created_promotion_customerUSA_id'));",
											"    pm.expect(internalInfo.itemType).to.eq('cartRule');",
											"    Test.checkCouponAmount(coupon);",
											"});",
											"",
											"pm.test(\"Check not valid coupon\", function () {",
											"    const coupon = Utility.getByName(jsonData.external_coupons, 'Not valid coupon');",
											"    pm.expect(coupon.is_valid).to.eq(false);",
											"    pm.expect(coupon.not_valid_message).to.eq('Promotion with code NOT-VALID not found!');",
											"    pm.expect(coupon.code).to.eq('NOT-VALID');",
											"    //pm.expect(coupon.amount_net).to.eq('1.0');",
											"    pm.expect(coupon.amount_gross).to.eq('1.5');",
											"    pm.expect(coupon.name).to.eq('Not valid coupon');",
											"    pm.expect(coupon.currency).to.eq('EUR');",
											"    pm.expect(coupon.internal_info, 'Internal info should be empty').to.be.eq('[]');",
											"    Test.checkCouponAmount(coupon);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "{{framework_action_check_cart}}",
											"type": "text"
										},
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "cart[external_customer_id]",
											"value": "{{customer_default_id}}",
											"type": "text"
										},
										{
											"key": "cart[payment_group]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[payment_method]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][city]",
											"value": "Phoenix",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][country]",
											"value": "US",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][state]",
											"value": "US-AZ",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][country]",
											"value": "BD",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number]",
											"value": "{{catalog_product_advPrices_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number_public]",
											"value": "SWDEMO10002",
											"type": "text"
										},
										{
											"key": "cart[items][0][quantity]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "cart[items][0][unit_amount]",
											"value": "672.27",
											"type": "text"
										},
										{
											"key": "cart[items][0][unit_amount_with_tax]",
											"value": "800",
											"type": "text"
										},
										{
											"key": "cart[items][0][tax_percent]",
											"value": "19",
											"type": "text"
										},
										{
											"key": "cart[external_coupons][0][is_valid]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "cart[external_coupons][0][code]",
											"value": "NOT-VALID",
											"type": "text"
										},
										{
											"key": "cart[external_coupons][0][name]",
											"value": "Not valid coupon",
											"type": "text"
										},
										{
											"key": "cart[external_coupons][0][amount_net]",
											"value": "1.0",
											"description": "supposed to not happen to have both values",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[external_coupons][0][amount_gross]",
											"value": "1.5",
											"type": "text"
										},
										{
											"key": "cart[external_coupons][0][tax_type]",
											"value": "auto",
											"type": "text"
										},
										{
											"key": "cart[external_coupons][0][currency]",
											"value": "EUR",
											"type": "text"
										},
										{
											"key": "cart[external_coupons][1][is_valid]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "cart[external_coupons][1][code]",
											"value": "{{created_discount_customerUSA_cart_1_id}}",
											"description": "test non-coupon properly handled",
											"type": "text"
										},
										{
											"key": "cart[external_coupons][1][name]",
											"value": "Perfectly valid rule",
											"type": "text"
										},
										{
											"key": "cart[external_coupons][1][amount_net]",
											"value": "2.0",
											"type": "text"
										},
										{
											"key": "cart[external_coupons][1][amount_gross]",
											"value": "2.5",
											"type": "text"
										},
										{
											"key": "cart[external_coupons][1][tax_type]",
											"value": "auto",
											"type": "text"
										},
										{
											"key": "cart[external_coupons][1][currency]",
											"value": "EUR",
											"type": "text"
										},
										{
											"key": "cart[external_coupons][1][internal_info]",
											"value": "{\"itemType\":\"cartRule\",\"promotionId\":\"3e226aa33c486a291338478679382ab1\",\"discountId\":\"9c9b73c4076e2d8d2926c827598089cb\"}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG:  Shipping Gross  tax",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Check default customer group set for customer\", function () {",
											"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('gen_customer_group_main_id'));",
											"});",
											"",
											"pm.test(\"Check express\", function () {",
											"    const express = Utility.getById(jsonData.shipping_methods, pm.environment.get('gen_shippingMethod_express'));",
											"    pm.expect(express.title).to.eq('Express');",
											"    pm.expect(express.amount_with_tax).to.eq(0); // should not be less than 0",
											"    pm.expect(express.tax_percent).to.eq(19);",
											"});",
											"",
											"pm.test(\"Check standard\", function () {",
											"    pm.expect(jsonData.shipping_methods).length(5);",
											"    const standard = Utility.getById(jsonData.shipping_methods, pm.environment.get('gen_shippingMethod_standard'));",
											"    pm.expect(standard.title).to.eq('Standard');",
											"    pm.expect(standard.amount_with_tax).to.eq(0); // should not be less than 0",
											"    pm.expect(standard.tax_percent).to.eq(19);",
											"});",
											"",
											"",
											"pm.test(\"Check ship tax auto\", function () {",
											"    pm.expect(jsonData.shipping_methods).length(5);",
											"    const taxAuto = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxAuto'));",
											"    pm.expect(taxAuto.title).to.eq('API: shipping tax Auto');",
											"    pm.expect(taxAuto.amount).to.eq(4.49); // confirmed incorrect, uses 7% + 19%",
											"    pm.expect(taxAuto.amount_with_tax).to.eq(5);",
											"    pm.expect(taxAuto.tax_percent).to.eq(19);",
											"});",
											"pm.test(\"Check ship tax highest\", function () {",
											"    const taxHighest = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxHighest'));",
											"    pm.expect(taxHighest.title).to.eq('API: shipping tax Highest');",
											"    pm.expect(taxHighest.amount).to.eq(4.29); // confirmed incorrect",
											"    pm.expect(taxHighest.amount_with_tax).to.eq(5.1);",
											"    pm.expect(taxHighest.tax_percent).to.eq(19);",
											"});",
											"pm.test(\"Check ship tax fixed\", function () {",
											"    const taxFixed = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxFixed'));",
											"    pm.expect(taxFixed.title).to.eq('API: shipping tax Fixed');",
											"    pm.expect(taxFixed.amount).to.eq(4.86); // confirmed incorrect",
											"    pm.expect(taxFixed.amount_with_tax).to.eq(5.2);",
											"    pm.expect(taxFixed.tax_percent).to.eq(7);",
											"});",
											"",
											"// no need to check items, we covered that thoroughly",
											"pm.test(\"General item check\", function () {",
											"    pm.expect(jsonData.items).length(2, 'Should be 2 item in cart');",
											"});",
											"",
											"pm.test(\"Check basic coupon code\", function () {",
											"    const coupon = jsonData.external_coupons[0];",
											"    pm.expect(jsonData.external_coupons).length(1);",
											"    pm.expect(coupon.is_valid).to.eq(1);",
											"    pm.expect(coupon.code).to.eq(pm.environment.get('created_promotion_byCode_code'));",
											"    pm.expect(coupon.amount_gross).to.eq(2.25);",
											"    pm.expect(coupon.name).to.eq('API: promo by code');",
											"    pm.expect(coupon.currency).to.eq('EUR');",
											"    pm.expect(coupon.internal_info, 'Internal info should not be empty').to.not.be.empty;",
											"    const internalInfo = JSON.parse(coupon.internal_info);",
											"    pm.expect(internalInfo.promotionId).to.eq(pm.environment.get('created_promotion_byCode_id'));",
											"    pm.expect(internalInfo.itemType).to.eq('coupon');",
											"    Test.checkCouponAmount(coupon);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "{{framework_action_check_cart}}",
											"type": "text"
										},
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "cart[external_customer_id]",
											"value": "{{customer_default_id}}",
											"type": "text"
										},
										{
											"key": "cart[payment_group]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[payment_method]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][country]",
											"value": "BD",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][country]",
											"value": "BD",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number]",
											"value": "{{catalog_product_main_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][0][quantity]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "cart[items][0][unit_amount]",
											"value": "100",
											"type": "text"
										},
										{
											"key": "cart[items][1][unit_amount_with_tax]",
											"value": "125",
											"type": "text"
										},
										{
											"key": "cart[items][0][tax_percent]",
											"value": "25",
											"type": "text"
										},
										{
											"key": "cart[items][1][item_number]",
											"value": "{{created_product_reducedTax_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][1][item_number_public]",
											"value": "SWDEMO10006",
											"type": "text"
										},
										{
											"key": "cart[items][1][quantity]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "cart[items][1][unit_amount]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "cart[items][1][tax_percent]",
											"value": "20",
											"type": "text"
										},
										{
											"key": "cart[external_coupons][0][code]",
											"value": "{{created_promotion_byCode_code}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: no tax percent (DE)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const items = jsonData.items;",
											"pm.test(\"Check standard tax\", function () {",
											"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_advPrices_id'));",
											"    pm.expect(item.is_buyable).to.eql(1);",
											"    pm.expect(item.qty_buyable).to.eql(12);",
											"    pm.expect(item.stock_quantity).to.eql(10);",
											"    pm.expect(item.unit_amount).to.eql(721.29);",
											"    pm.expect(item.unit_amount_with_tax).to.eql(858.335); // 19% tax",
											"});",
											"",
											"pm.test(\"Check reduced tax\", function () {",
											"    const item = Utility.getByItemNumber(items, pm.environment.get('created_product_reducedTax_id'));",
											"    pm.expect(item.is_buyable).to.eql(1);",
											"    pm.expect(item.qty_buyable).to.eql(1);",
											"    pm.expect(item.stock_quantity).to.eql(100);",
											"    pm.expect(item.unit_amount).to.eql(100);",
											"    pm.expect(item.unit_amount_with_tax).to.eql(107); // 7% tax",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "{{framework_action_check_cart}}",
											"type": "text"
										},
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "cart[external_customer_id]",
											"value": "{{created_customer_withCustomGrp_id}}",
											"type": "text"
										},
										{
											"key": "cart[payment_group]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[payment_method]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][country]",
											"value": "BD",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][country]",
											"value": "DE",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number]",
											"value": "{{catalog_product_advPrices_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number_public]",
											"value": "SWDEMO10002",
											"type": "text"
										},
										{
											"key": "cart[items][0][quantity]",
											"value": "12",
											"type": "text"
										},
										{
											"key": "cart[items][0][unit_amount]",
											"value": "721.29",
											"type": "text"
										},
										{
											"key": "cart[items][0][unit_amount_with_tax]",
											"value": "858.34",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][0][tax_percent]",
											"value": "0.00",
											"type": "text"
										},
										{
											"key": "cart[items][1][item_number]",
											"value": "{{created_product_reducedTax_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][1][quantity]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "cart[items][1][unit_amount]",
											"value": "100",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: no tax percent (AT)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const items = jsonData.items;",
											"// checks that advanced prices do not apply to this customer group",
											"pm.test(\"Check standard tax\", function () {",
											"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_advPrices_id'));",
											"    pm.expect(item.is_buyable).to.eql(1);",
											"    pm.expect(item.qty_buyable).to.eql(12);",
											"    pm.expect(item.stock_quantity).to.eql(10);",
											"    pm.expect(item.unit_amount).to.eql(721.29);",
											"    pm.expect(item.unit_amount_with_tax).to.eql(865.548); // 20% tax",
											"});",
											"",
											"",
											"pm.test(\"Check reduced tax\", function () {",
											"    const item = Utility.getByItemNumber(items, pm.environment.get('created_product_reducedTax_id'));",
											"    pm.expect(item.is_buyable).to.eql(1);",
											"    pm.expect(item.qty_buyable).to.eql(1);",
											"    pm.expect(item.stock_quantity).to.eql(100);",
											"    pm.expect(item.unit_amount).to.eql(100);",
											"    pm.expect(item.unit_amount_with_tax).to.eql(113); // 13% tax",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "{{framework_action_check_cart}}",
											"type": "text"
										},
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "cart[external_customer_id]",
											"value": "{{created_customer_withCustomGrp_id}}",
											"type": "text"
										},
										{
											"key": "cart[payment_group]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[payment_method]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][country]",
											"value": "BD",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][country]",
											"value": "AT",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][phone]",
											"value": "12345678",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number]",
											"value": "{{catalog_product_advPrices_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number_public]",
											"value": "SWDEMO10002",
											"type": "text"
										},
										{
											"key": "cart[items][0][quantity]",
											"value": "12",
											"type": "text"
										},
										{
											"key": "cart[items][0][unit_amount]",
											"value": "721.29",
											"type": "text"
										},
										{
											"key": "cart[items][0][unit_amount_with_tax]",
											"value": "858.34",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][0][tax_percent]",
											"value": "0.00",
											"type": "text"
										},
										{
											"key": "cart[items][1][item_number]",
											"value": "{{created_product_reducedTax_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][1][quantity]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "cart[items][1][unit_amount]",
											"value": "100",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: Disable live-shopping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully disabled Live Shopping\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"e52549984567bf14a0b94fc8e38bfa4a\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.isLiveShopping\",\r\n                \"configurationValue\": false,\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Shipping",
					"item": [
						{
							"name": "Gross",
							"item": [
								{
									"name": "SG: shipping 1 item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check default customer group set for customer\", function () {",
													"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('gen_customer_group_main_id'));",
													"});",
													"",
													"pm.test(\"Check ship tax auto\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const taxAuto = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxAuto'));",
													"    pm.expect(taxAuto.title).to.eq('API: shipping tax Auto');",
													"    pm.expect(taxAuto.amount_with_tax).to.eq(5); // because 1 item",
													"    pm.expect(taxAuto.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax highest\", function () {",
													"    const taxHighest = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxHighest'));",
													"    pm.expect(taxHighest.title).to.eq('API: shipping tax Highest');",
													"    pm.expect(taxHighest.amount_with_tax).to.eq(5.1); // because 1 item",
													"    pm.expect(taxHighest.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax fixed\", function () {",
													"    const taxFixed = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxFixed'));",
													"    pm.expect(taxFixed.title).to.eq('API: shipping tax Fixed');",
													"    pm.expect(taxFixed.amount_with_tax).to.eq(5.2); // because 1 item",
													"    pm.expect(taxFixed.tax_percent).to.eq(7);",
													"});",
													"",
													"pm.test(\"General item check\", function () {",
													"    pm.expect(jsonData.items).length(1, 'Should be 1 item in cart');",
													"});",
													"const items = jsonData.items;",
													"pm.test(\"Check item success\", function () {",
													"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_main_id'));",
													"    pm.expect(item.unit_amount).to.eql(416.765);",
													"    pm.expect(item.unit_amount_with_tax).to.eql(495.95);",
													"    pm.expect(item.is_buyable).to.eql(1);",
													"    pm.expect(item.qty_buyable).to.eql(1);",
													"    pm.expect(item.stock_quantity).to.eql(10);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "{{framework_action_check_cart}}",
													"type": "text"
												},
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "cart[external_customer_id]",
													"value": "{{customer_default_id}}",
													"description": "gross default grp",
													"type": "text"
												},
												{
													"key": "cart[payment_group]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[payment_method]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][country]",
													"value": "BD",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][country]",
													"value": "BD",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number]",
													"value": "{{catalog_product_main_id}}",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number_public]",
													"value": "SWDEMO10002",
													"type": "text"
												},
												{
													"key": "cart[items][0][quantity]",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG: shipping 2 items",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check default customer group set for customer\", function () {",
													"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('gen_customer_group_main_id'));",
													"});",
													"",
													"pm.test(\"Check ship tax auto\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const taxAuto = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxAuto'));",
													"    pm.expect(taxAuto.title).to.eq('API: shipping tax Auto');",
													"    pm.expect(taxAuto.amount_with_tax).to.eq(8); // because 2 item+",
													"    pm.expect(taxAuto.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax highest\", function () {",
													"    const taxHighest = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxHighest'));",
													"    pm.expect(taxHighest.title).to.eq('API: shipping tax Highest');",
													"    pm.expect(taxHighest.amount_with_tax).to.eq(8.1); // because 2 item+",
													"    pm.expect(taxHighest.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax fixed\", function () {",
													"    const taxFixed = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxFixed'));",
													"    pm.expect(taxFixed.title).to.eq('API: shipping tax Fixed');",
													"    pm.expect(taxFixed.amount_with_tax).to.eq(8.2); // because shipping 2 item+",
													"    pm.expect(taxFixed.tax_percent).to.eq(7);",
													"});",
													"",
													"pm.test(\"General item check\", function () {",
													"    pm.expect(jsonData.items).length(1, 'Should be 1 item in cart');",
													"});",
													"const items = jsonData.items;",
													"pm.test(\"Check item success\", function () {",
													"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_main_id'));",
													"    // gross 495.95-19%",
													"    pm.expect(item.unit_amount).to.eql(416.765);",
													"    pm.expect(item.unit_amount_with_tax).to.eql(495.95);",
													"    pm.expect(item.is_buyable).to.eql(1);",
													"    pm.expect(item.qty_buyable).to.eql(2);",
													"    pm.expect(item.stock_quantity).to.eql(10);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "{{framework_action_check_cart}}",
													"type": "text"
												},
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "cart[external_customer_id]",
													"value": "{{customer_default_id}}",
													"type": "text"
												},
												{
													"key": "cart[payment_group]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[payment_method]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][country]",
													"value": "BD",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][country]",
													"value": "BD",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number]",
													"value": "{{catalog_product_main_id}}",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number_public]",
													"value": "SWDEMO10002",
													"type": "text"
												},
												{
													"key": "cart[items][0][quantity]",
													"value": "2",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG: shipping GB",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check default customer group set for customer\", function () {",
													"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('gen_customer_group_main_id'));",
													"});",
													"",
													"pm.test(\"Check ship tax auto\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const taxAuto = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxAuto'));",
													"    pm.expect(taxAuto.title).to.eq('API: shipping tax Auto');",
													"    pm.expect(taxAuto.amount_with_tax).to.eq(8); // because 2 item+",
													"    pm.expect(taxAuto.tax_percent).to.eq(20);",
													"});",
													"pm.test(\"Check ship tax highest\", function () {",
													"    const taxHighest = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxHighest'));",
													"    pm.expect(taxHighest.title).to.eq('API: shipping tax Highest');",
													"    pm.expect(taxHighest.amount_with_tax).to.eq(4.1); // because shipping GB",
													"    pm.expect(taxHighest.tax_percent).to.eq(20);",
													"});",
													"pm.test(\"Check ship tax fixed\", function () {",
													"    const taxFixed = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxFixed'));",
													"    pm.expect(taxFixed.title).to.eq('API: shipping tax Fixed');",
													"    pm.expect(taxFixed.amount_with_tax).to.eq(4.2); // because shipping GB",
													"    pm.expect(taxFixed.tax_percent).to.eq(5);",
													"});",
													"",
													"pm.test(\"General item check\", function () {",
													"    pm.expect(jsonData.items).length(1, 'Should be 1 item in cart');",
													"});",
													"const items = jsonData.items;",
													"pm.test(\"Check item success\", function () {",
													"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_main_id'));",
													"    pm.expect(item.unit_amount).to.eql(413.292);",
													"    pm.expect(item.unit_amount_with_tax).to.eql(495.95);",
													"    pm.expect(item.is_buyable).to.eql(1);",
													"    pm.expect(item.qty_buyable).to.eql(2);",
													"    pm.expect(item.stock_quantity).to.eql(10);",
													"});",
													"",
													"pm.test(\"payment method check\", function () {",
													"    const payments = jsonData.payment_methods;",
													"    pm.expect(payments).lengthOf(3, 'Should have 3 payment methods');",
													"    pm.expect(Utility.getById(payments, 'handler_shopware_cashpayment'), 'COD').to.not.be.undefined;",
													"    pm.expect(Utility.getById(payments, 'handler_shopware_prepayment'), 'PREPAY').to.not.be.undefined;",
													"    pm.expect(Utility.getById(payments, 'handler_shopware_invoicepayment'), 'INV_PAY').to.not.be.undefined;",
													"    pm.expect(Utility.getById(payments, 'handler_shopware_defaultpayment_', false), 'API').to.be.undefined;",
													"    pm.expect(Utility.getById(payments, 'handler_shopgate_generichandler'), 'SG').to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "{{framework_action_check_cart}}",
													"type": "text"
												},
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "cart[external_customer_id]",
													"value": "{{customer_default_id}}",
													"type": "text"
												},
												{
													"key": "cart[payment_group]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[payment_method]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][country]",
													"value": "GB",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][country]",
													"value": "GB",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number]",
													"value": "{{catalog_product_main_id}}",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number_public]",
													"value": "SWDEMO10002",
													"type": "text"
												},
												{
													"key": "cart[items][0][quantity]",
													"value": "2",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG: shipping US",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check default customer group set for customer\", function () {",
													"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('gen_customer_group_main_id'));",
													"});",
													"",
													"pm.test(\"Check ship tax auto\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const taxAuto = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxAuto'));",
													"    pm.expect(taxAuto.title).to.eq('API: shipping tax Auto');",
													"    pm.expect(taxAuto.amount_with_tax).to.eq(4); // because shipping USA",
													"    pm.expect(taxAuto.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax highest\", function () {",
													"    const taxHighest = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxHighest'));",
													"    pm.expect(taxHighest.title).to.eq('API: shipping tax Highest');",
													"    pm.expect(taxHighest.amount_with_tax).to.eq(8.1); // because 2 item+",
													"    pm.expect(taxHighest.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax fixed\", function () {",
													"    const taxFixed = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxFixed'));",
													"    pm.expect(taxFixed.title).to.eq('API: shipping tax Fixed');",
													"    pm.expect(taxFixed.amount_with_tax).to.eq(8.2); // because 2 item+",
													"    pm.expect(taxFixed.tax_percent).to.eq(7);",
													"});",
													"",
													"pm.test(\"General item check\", function () {",
													"    pm.expect(jsonData.items).length(1, 'Should be 1 item in cart');",
													"});",
													"const items = jsonData.items;",
													"pm.test(\"Check item success\", function () {",
													"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_main_id'));",
													"    pm.expect(item.unit_amount).to.eql(416.765);",
													"    pm.expect(item.unit_amount_with_tax).to.eql(495.95);",
													"    pm.expect(item.is_buyable).to.eql(1);",
													"    pm.expect(item.qty_buyable).to.eql(2);",
													"    pm.expect(item.stock_quantity).to.eql(10);",
													"});",
													"",
													"pm.test(\"payment method check\", function () {",
													"    const payments = jsonData.payment_methods;",
													"    pm.expect(payments).lengthOf(4, 'Should have 4 payment methods');",
													"    pm.expect(Utility.getById(payments, 'handler_shopware_cashpayment'), 'COD').to.not.be.undefined;",
													"    pm.expect(Utility.getById(payments, 'handler_shopware_prepayment'), 'PREPAY').to.not.be.undefined;",
													"    pm.expect(Utility.getById(payments, 'handler_shopware_invoicepayment'), 'INV_PAY').to.not.be.undefined;",
													"    pm.expect(Utility.getById(payments, 'handler_shopware_defaultpayment_', false), 'API').to.not.be.undefined;",
													"    pm.expect(Utility.getById(payments, 'handler_shopgate_generichandler'), 'SG').to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "{{framework_action_check_cart}}",
													"type": "text"
												},
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "cart[external_customer_id]",
													"value": "{{customer_default_id}}",
													"type": "text"
												},
												{
													"key": "cart[payment_group]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[payment_method]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][country]",
													"value": "DE",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][country]",
													"value": "US",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number]",
													"value": "{{catalog_product_main_id}}",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number_public]",
													"value": "SWDEMO10002",
													"type": "text"
												},
												{
													"key": "cart[items][0][quantity]",
													"value": "2",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG: shipping promo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check default customer group set for customer\", function () {",
													"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('gen_customer_group_main_id'));",
													"});",
													"",
													"pm.test(\"Check express\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const express = Utility.getById(jsonData.shipping_methods, pm.environment.get('gen_shippingMethod_express'));",
													"    pm.expect(express.title).to.eq('Express');",
													"    pm.expect(express.amount_with_tax).to.eq(0); // should not be less than 0",
													"    pm.expect(express.tax_percent).to.eq(19);",
													"});",
													"",
													"pm.test(\"Check standard\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const standard = Utility.getById(jsonData.shipping_methods, pm.environment.get('gen_shippingMethod_standard'));",
													"    pm.expect(standard.title).to.eq('Standard');",
													"    pm.expect(standard.amount_with_tax).to.eq(0); // should not be less than 0",
													"    pm.expect(standard.tax_percent).to.eq(19);",
													"});",
													"",
													"// checks complex shipping discount",
													"// current solution is to handle discounts in shipping price",
													"pm.test(\"Check ship tax auto\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const taxAuto = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxAuto'));",
													"    pm.expect(taxAuto.title).to.eq('API: shipping tax Auto');",
													"    pm.expect(taxAuto.amount_with_tax).to.eq(1.5); // 4 - 1.5 - 1",
													"    pm.expect(taxAuto.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax highest\", function () {",
													"    const taxHighest = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxHighest'));",
													"    pm.expect(taxHighest.title).to.eq('API: shipping tax Highest');",
													"    pm.expect(taxHighest.amount_with_tax).to.eq(5.6); //8.1 - 1.5 - 1",
													"    pm.expect(taxHighest.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax fixed\", function () {",
													"    const taxFixed = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxFixed'));",
													"    pm.expect(taxFixed.title).to.eq('API: shipping tax Fixed');",
													"    pm.expect(taxFixed.amount_with_tax).to.eq(5.7); //8.2 - 1.5 - 1",
													"    pm.expect(taxFixed.tax_percent).to.eq(7);",
													"});",
													"",
													"pm.test(\"General item check\", function () {",
													"    pm.expect(jsonData.items).length(1, 'Should be 1 item in cart');",
													"});",
													"const items = jsonData.items;",
													"pm.test(\"Check item success\", function () {",
													"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_main_id'));",
													"    pm.expect(item.unit_amount).to.eql(416.765);",
													"    pm.expect(item.unit_amount_with_tax).to.eql(495.95);",
													"    pm.expect(item.is_buyable).to.eql(1);",
													"    pm.expect(item.qty_buyable).to.eql(2);",
													"    pm.expect(item.stock_quantity).to.eql(10);",
													"});",
													"",
													"pm.test(\"Cart rule check\", function () {",
													"    pm.expect(jsonData.external_coupons).length(1, 'Should have 1 discount');",
													"    const rule = Utility.getByName(jsonData.external_coupons, 'API: promo by Billing Country USA');",
													"    pm.expect(rule.amount_gross).to.eq(99.19);",
													"    pm.expect(rule.currency).to.eq('EUR');",
													"    Test.checkCouponAmount(rule);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "{{framework_action_check_cart}}",
													"type": "text"
												},
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "cart[external_customer_id]",
													"value": "{{customer_default_id}}",
													"type": "text"
												},
												{
													"key": "cart[payment_group]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[payment_method]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][country]",
													"value": "US",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][country]",
													"value": "US",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number]",
													"value": "{{catalog_product_main_id}}",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number_public]",
													"value": "SWDEMO10002",
													"type": "text"
												},
												{
													"key": "cart[items][0][quantity]",
													"value": "2",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG: complex tax",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check default customer group set for customer\", function () {",
													"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('gen_customer_group_main_id'));",
													"});",
													"",
													"pm.test(\"Check express\", function () {",
													"    const express = Utility.getById(jsonData.shipping_methods, pm.environment.get('gen_shippingMethod_express'));",
													"    pm.expect(express.title).to.eq('Express');",
													"    pm.expect(express.amount_with_tax).to.eq(0); // should not be less than 0",
													"    pm.expect(express.tax_percent).to.eq(19);",
													"});",
													"",
													"pm.test(\"Check standard\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const standard = Utility.getById(jsonData.shipping_methods, pm.environment.get('gen_shippingMethod_standard'));",
													"    pm.expect(standard.title).to.eq('Standard');",
													"    pm.expect(standard.amount_with_tax).to.eq(0); // should not be less than 0",
													"    pm.expect(standard.tax_percent).to.eq(19);",
													"});",
													"",
													"// checks complex shipping discount",
													"// current solution is to handle discounts in shipping price",
													"pm.test(\"Check ship tax auto\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const taxAuto = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxAuto'));",
													"    pm.expect(taxAuto.title).to.eq('API: shipping tax Auto');",
													"    pm.expect(taxAuto.amount).to.eq(4.49); // 7% & 19% tax calculates to 0.51 by SW",
													"    pm.expect(taxAuto.amount_with_tax).to.eq(5);",
													"    pm.expect(taxAuto.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax highest\", function () {",
													"    const taxHighest = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxHighest'));",
													"    pm.expect(taxHighest.title).to.eq('API: shipping tax Highest');",
													"    pm.expect(taxHighest.amount).to.eq(4.29); // 5.1 - 19% (0.81)",
													"    pm.expect(taxHighest.amount_with_tax).to.eq(5.1);",
													"    pm.expect(taxHighest.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax fixed\", function () {",
													"    const taxFixed = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxFixed'));",
													"    pm.expect(taxFixed.title).to.eq('API: shipping tax Fixed');",
													"    pm.expect(taxFixed.amount).to.eq(4.86); // 5.2 - 7% (0.34)",
													"    pm.expect(taxFixed.amount_with_tax).to.eq(5.2);",
													"    pm.expect(taxFixed.tax_percent).to.eq(7);",
													"});",
													"pm.test(\"General item check\", function () {",
													"    pm.expect(jsonData.items).length(2, 'Should be 2 item in cart');",
													"});",
													"const items = jsonData.items;",
													"pm.test(\"Check item success\", function () {",
													"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_main_id'));",
													"    pm.expect(item.unit_amount).to.eql(416.765); // not confirmed",
													"    pm.expect(item.unit_amount_with_tax).to.eql(495.95);",
													"    pm.expect(item.is_buyable).to.eql(1);",
													"    pm.expect(item.qty_buyable).to.eql(1);",
													"    pm.expect(item.stock_quantity).to.eql(10);",
													"});",
													"",
													"pm.test(\"Check reduced tax item\", function () {",
													"    const item = Utility.getByItemNumber(items, pm.environment.get('created_product_reducedTax_id'));",
													"    pm.expect(item.unit_amount).to.eql(747.664); // not confirmed",
													"    pm.expect(item.unit_amount_with_tax).to.eql(800);",
													"    pm.expect(item.is_buyable).to.eql(1);",
													"    pm.expect(item.qty_buyable).to.eql(1);",
													"    pm.expect(item.stock_quantity).to.eql(100);",
													"});",
													"",
													"pm.test(\"Check basic coupon code\", function () {",
													"    const coupon = jsonData.external_coupons[0];",
													"    pm.expect(jsonData.external_coupons).length(1);",
													"    pm.expect(coupon.is_valid).to.eq(1);",
													"    pm.expect(coupon.code).to.eq(pm.environment.get('created_promotion_byCode_code'));",
													"    // pm.expect(coupon.amount_net).to.eq(2.02); // taking this on faith that it's 7% - 19%",
													"    pm.expect(coupon.amount_gross).to.eq(2.25);",
													"    pm.expect(coupon.name).to.eq('API: promo by code');",
													"    pm.expect(coupon.currency).to.eq('EUR');",
													"    pm.expect(coupon.internal_info, 'Internal info should not be empty').to.not.be.empty;",
													"    const internalInfo = JSON.parse(coupon.internal_info);",
													"    pm.expect(internalInfo.promotionId).to.eq(pm.environment.get('created_promotion_byCode_id'));",
													"    pm.expect(internalInfo.itemType).to.eq('coupon');",
													"    Test.checkCouponAmount(coupon);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "{{framework_action_check_cart}}",
													"type": "text"
												},
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "cart[external_customer_id]",
													"value": "{{customer_default_id}}",
													"type": "text"
												},
												{
													"key": "cart[payment_group]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[payment_method]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][country]",
													"value": "BD",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][country]",
													"value": "BD",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number]",
													"value": "{{catalog_product_main_id}}",
													"type": "text"
												},
												{
													"key": "cart[items][0][quantity]",
													"value": "1",
													"type": "text"
												},
												{
													"key": "cart[items][0][unit_amount]",
													"value": "100",
													"type": "text",
													"disabled": true
												},
												{
													"key": "cart[items][1][unit_amount_with_tax]",
													"value": "125",
													"type": "text",
													"disabled": true
												},
												{
													"key": "cart[items][0][tax_percent]",
													"value": "25",
													"type": "text",
													"disabled": true
												},
												{
													"key": "cart[items][1][item_number]",
													"value": "{{created_product_reducedTax_id}}",
													"type": "text"
												},
												{
													"key": "cart[items][1][item_number_public]",
													"value": "SWDEMO10006",
													"type": "text"
												},
												{
													"key": "cart[items][1][quantity]",
													"value": "1",
													"type": "text"
												},
												{
													"key": "cart[items][1][unit_amount]",
													"value": "10",
													"type": "text",
													"disabled": true
												},
												{
													"key": "cart[items][1][tax_percent]",
													"value": "20",
													"type": "text",
													"disabled": true
												},
												{
													"key": "cart[external_coupons][0][code]",
													"value": "{{created_promotion_byCode_code}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG: shipping 5k+",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check default customer group set for customer\", function () {",
													"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('gen_customer_group_main_id'));",
													"});",
													"",
													"pm.test(\"Check ship grandTotal\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(6);",
													"    const taxFixed = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_cart5k'));",
													"    pm.expect(taxFixed.title).to.eq('API: shipping cart 5k+');",
													"    pm.expect(taxFixed.amount_with_tax).to.eq(3.83);",
													"    pm.expect(taxFixed.tax_percent).to.eq(19);",
													"});",
													"",
													"pm.test(\"General item check\", function () {",
													"    pm.expect(jsonData.items).length(1, 'Should be 1 item in cart');",
													"});",
													"const items = jsonData.items;",
													"pm.test(\"Check item success\", function () {",
													"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_main_id'));",
													"    pm.expect(item.unit_amount).to.eql(416.765);",
													"    pm.expect(item.unit_amount_with_tax).to.eql(495.95);",
													"    pm.expect(item.is_buyable).to.eql(1);",
													"    pm.expect(item.qty_buyable).to.eql(11);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "{{framework_action_check_cart}}",
													"type": "text"
												},
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "cart[external_customer_id]",
													"value": "{{customer_default_id}}",
													"type": "text"
												},
												{
													"key": "cart[payment_group]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[payment_method]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][country]",
													"value": "BD",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][country]",
													"value": "BD",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number]",
													"value": "{{catalog_product_main_id}}",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number_public]",
													"value": "SWDEMO10002",
													"type": "text"
												},
												{
													"key": "cart[items][0][quantity]",
													"value": "11",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "NET",
							"item": [
								{
									"name": "SG: shipping 1 item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check default customer group set for customer\", function () {",
													"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('created_customerGroup_net_id'));",
													"});",
													"",
													"pm.test(\"Check ship tax auto\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const taxAuto = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxAuto'));",
													"    pm.expect(taxAuto.title).to.eq('API: shipping tax Auto');",
													"    pm.expect(taxAuto.amount).to.eq(4); // because 1 item",
													"    pm.expect(taxAuto.amount_with_tax).to.eq(4.76); // not tested",
													"    pm.expect(taxAuto.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax highest\", function () {",
													"    const taxHighest = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxHighest'));",
													"    pm.expect(taxHighest.title).to.eq('API: shipping tax Highest');",
													"    pm.expect(taxHighest.amount).to.eq(4.1); // because 1 item",
													"    pm.expect(taxHighest.amount_with_tax).to.eq(4.88); // not tested",
													"    pm.expect(taxHighest.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax fixed\", function () {",
													"    const taxFixed = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxFixed'));",
													"    pm.expect(taxFixed.title).to.eq('API: shipping tax Fixed');",
													"    pm.expect(taxFixed.amount).to.eq(4.2); // because 1 item",
													"    pm.expect(taxFixed.amount_with_tax).to.eq(4.49); // not tested",
													"    pm.expect(taxFixed.tax_percent).to.eq(7);",
													"});",
													"",
													"pm.test(\"General item check\", function () {",
													"    pm.expect(jsonData.items).length(1, 'Should be 1 item in cart');",
													"});",
													"const items = jsonData.items;",
													"pm.test(\"Check item success\", function () {",
													"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_main_id'));",
													"    pm.expect(item.is_buyable).to.eql(1);",
													"    pm.expect(item.qty_buyable).to.eql(1);",
													"    pm.expect(item.unit_amount).to.eql(416.76);",
													"    // 416.76+19%",
													"    pm.expect(item.unit_amount_with_tax).to.eql(495.944);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "{{framework_action_check_cart}}",
													"type": "text"
												},
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "cart[external_customer_id]",
													"value": "{{created_customer_withCustomGrp_id}}",
													"type": "text"
												},
												{
													"key": "cart[payment_group]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[payment_method]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][country]",
													"value": "BD",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][country]",
													"value": "BD",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number]",
													"value": "{{catalog_product_main_id}}",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number_public]",
													"value": "SWDEMO10002",
													"type": "text"
												},
												{
													"key": "cart[items][0][quantity]",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG: shipping 2 items",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check default customer group set for customer\", function () {",
													"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('created_customerGroup_net_id'));",
													"});",
													"",
													"pm.test(\"Check ship tax auto\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const taxAuto = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxAuto'));",
													"    pm.expect(taxAuto.title).to.eq('API: shipping tax Auto');",
													"    pm.expect(taxAuto.amount).to.eq(7); // because 2 item+",
													"    pm.expect(taxAuto.amount_with_tax).to.eq(8.33); // not tested",
													"    pm.expect(taxAuto.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax highest\", function () {",
													"    const taxHighest = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxHighest'));",
													"    pm.expect(taxHighest.title).to.eq('API: shipping tax Highest');",
													"    pm.expect(taxHighest.amount).to.eq(7.1); // because 2 item+",
													"    pm.expect(taxHighest.amount_with_tax).to.eq(8.45); // not tested",
													"    pm.expect(taxHighest.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax fixed\", function () {",
													"    const taxFixed = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxFixed'));",
													"    pm.expect(taxFixed.title).to.eq('API: shipping tax Fixed');",
													"    pm.expect(taxFixed.amount).to.eq(7.2); // because shipping 2 item+",
													"    pm.expect(taxFixed.amount_with_tax).to.eq(7.7); // not tested",
													"    pm.expect(taxFixed.tax_percent).to.eq(7);",
													"});",
													"",
													"pm.test(\"General item check\", function () {",
													"    pm.expect(jsonData.items).length(1, 'Should be 1 item in cart');",
													"});",
													"const items = jsonData.items;",
													"pm.test(\"Check item success\", function () {",
													"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_main_id'));",
													"    pm.expect(item.is_buyable).to.eql(1);",
													"    pm.expect(item.qty_buyable).to.eql(2);",
													"    pm.expect(item.unit_amount).to.eql(416.76);",
													"    pm.expect(item.unit_amount_with_tax).to.eql(495.945);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "{{framework_action_check_cart}}",
													"type": "text"
												},
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "cart[external_customer_id]",
													"value": "{{created_customer_withCustomGrp_id}}",
													"type": "text"
												},
												{
													"key": "cart[payment_group]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[payment_method]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][country]",
													"value": "BD",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][country]",
													"value": "BD",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number]",
													"value": "{{catalog_product_main_id}}",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number_public]",
													"value": "SWDEMO10002",
													"type": "text"
												},
												{
													"key": "cart[items][0][quantity]",
													"value": "2",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG: shipping GB",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check default customer group set for customer\", function () {",
													"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('created_customerGroup_net_id'));",
													"});",
													"",
													"pm.test(\"Check ship tax auto\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const taxAuto = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxAuto'));",
													"    pm.expect(taxAuto.title).to.eq('API: shipping tax Auto');",
													"    pm.expect(taxAuto.amount).to.eq(7); // because 2 item+",
													"    pm.expect(taxAuto.amount_with_tax).to.eq(8.4); // not tested",
													"    pm.expect(taxAuto.tax_percent).to.eq(20);",
													"});",
													"pm.test(\"Check ship tax highest\", function () {",
													"    const taxHighest = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxHighest'));",
													"    pm.expect(taxHighest.title).to.eq('API: shipping tax Highest');",
													"    pm.expect(taxHighest.amount).to.eq(3.1); // because shipping GB",
													"    pm.expect(taxHighest.amount_with_tax).to.eq(3.72); // not tested",
													"    pm.expect(taxHighest.tax_percent).to.eq(20);",
													"});",
													"pm.test(\"Check ship tax fixed\", function () {",
													"    const taxFixed = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxFixed'));",
													"    pm.expect(taxFixed.title).to.eq('API: shipping tax Fixed');",
													"    pm.expect(taxFixed.amount).to.eq(3.2); // because shipping GB",
													"    pm.expect(taxFixed.amount_with_tax).to.eq(3.36); // not tested",
													"    pm.expect(taxFixed.tax_percent).to.eq(5);",
													"});",
													"",
													"pm.test(\"General item check\", function () {",
													"    pm.expect(jsonData.items).length(1, 'Should be 1 item in cart');",
													"});",
													"const items = jsonData.items;",
													"pm.test(\"Check item success\", function () {",
													"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_main_id'));",
													"    pm.expect(item.is_buyable).to.eql(1);",
													"    pm.expect(item.qty_buyable).to.eql(2);",
													"    pm.expect(item.unit_amount).to.eql(416.76);",
													"    // 416.76+20%",
													"    pm.expect(item.unit_amount_with_tax).to.eql(500.112);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "{{framework_action_check_cart}}",
													"type": "text"
												},
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "cart[external_customer_id]",
													"value": "{{created_customer_withCustomGrp_id}}",
													"type": "text"
												},
												{
													"key": "cart[payment_group]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[payment_method]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][country]",
													"value": "GB",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][country]",
													"value": "GB",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number]",
													"value": "{{catalog_product_main_id}}",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number_public]",
													"value": "SWDEMO10002",
													"type": "text"
												},
												{
													"key": "cart[items][0][quantity]",
													"value": "2",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG: shipping US",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check default customer group set for customer\", function () {",
													"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('created_customerGroup_net_id'));",
													"});",
													"",
													"pm.test(\"Check ship tax auto\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const taxAuto = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxAuto'));",
													"    pm.expect(taxAuto.title).to.eq('API: shipping tax Auto');",
													"    pm.expect(taxAuto.amount).to.eq(3); // because shipping USA",
													"    pm.expect(taxAuto.amount_with_tax).to.eq(3.57); // not tested",
													"    pm.expect(taxAuto.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax highest\", function () {",
													"    const taxHighest = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxHighest'));",
													"    pm.expect(taxHighest.title).to.eq('API: shipping tax Highest');",
													"    pm.expect(taxHighest.amount).to.eq(7.1); // because 2 item+",
													"    pm.expect(taxHighest.amount_with_tax).to.eq(8.45); // not tested",
													"    pm.expect(taxHighest.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax fixed\", function () {",
													"    const taxFixed = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxFixed'));",
													"    pm.expect(taxFixed.title).to.eq('API: shipping tax Fixed');",
													"    pm.expect(taxFixed.amount).to.eq(7.2); // because 2 item+",
													"    pm.expect(taxFixed.amount_with_tax).to.eq(7.7); // not tested",
													"    pm.expect(taxFixed.tax_percent).to.eq(7);",
													"});",
													"",
													"pm.test(\"General item check\", function () {",
													"    pm.expect(jsonData.items).length(1, 'Should be 1 item in cart');",
													"});",
													"const items = jsonData.items;",
													"pm.test(\"Check item success\", function () {",
													"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_main_id'));",
													"    pm.expect(item.is_buyable).to.eql(1);",
													"    pm.expect(item.qty_buyable).to.eql(2);",
													"    pm.expect(item.unit_amount).to.eql(416.76);",
													"    pm.expect(item.unit_amount_with_tax).to.eql(495.945);",
													"});",
													"",
													"pm.test(\"payment method check\", function () {",
													"    const payments = jsonData.payment_methods;",
													"    pm.expect(payments).lengthOf(4, 'Should have 4 payment methods');",
													"    pm.expect(Utility.getById(payments, 'handler_shopware_cashpayment'), 'COD').to.not.be.undefined;",
													"    pm.expect(Utility.getById(payments, 'handler_shopware_prepayment'), 'PREPAY').to.not.be.undefined;",
													"    pm.expect(Utility.getById(payments, 'handler_shopware_invoicepayment'), 'INV_PAY').to.not.be.undefined;",
													"    pm.expect(Utility.getById(payments, 'handler_shopware_defaultpayment_', false), 'API').to.not.be.undefined;",
													"    pm.expect(Utility.getById(payments, 'handler_shopgate_generichandler'), 'SG').to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "{{framework_action_check_cart}}",
													"type": "text"
												},
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "cart[external_customer_id]",
													"value": "{{created_customer_withCustomGrp_id}}",
													"type": "text"
												},
												{
													"key": "cart[payment_group]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[payment_method]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][country]",
													"value": "DE",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][country]",
													"value": "US",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number]",
													"value": "{{catalog_product_main_id}}",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number_public]",
													"value": "SWDEMO10002",
													"type": "text"
												},
												{
													"key": "cart[items][0][quantity]",
													"value": "2",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG: shipping promo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check default customer group set for customer\", function () {",
													"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('created_customerGroup_net_id'));",
													"});",
													"",
													"pm.test(\"Check express\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const express = Utility.getById(jsonData.shipping_methods, pm.environment.get('gen_shippingMethod_express'));",
													"    pm.expect(express.title).to.eq('Express');",
													"    pm.expect(express.amount).to.eq(0);",
													"    pm.expect(express.amount_with_tax).to.eq(0); // should not be less than 0",
													"    pm.expect(express.tax_percent).to.eq(19);",
													"});",
													"",
													"pm.test(\"Check standard\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const standard = Utility.getById(jsonData.shipping_methods, pm.environment.get('gen_shippingMethod_standard'));",
													"    pm.expect(standard.title).to.eq('Standard');",
													"    pm.expect(standard.amount).to.eq(0);",
													"    pm.expect(standard.amount_with_tax).to.eq(0); // should not be less than 0",
													"    pm.expect(standard.tax_percent).to.eq(19);",
													"});",
													"",
													"// checks complex shipping discount",
													"// current solution is to handle discounts in shipping price",
													"pm.test(\"Check ship tax auto\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const taxAuto = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxAuto'));",
													"    pm.expect(taxAuto.title).to.eq('API: shipping tax Auto');",
													"    pm.expect(taxAuto.amount).to.eq(0.5); // 3 - 1.5 - 1",
													"    pm.expect(taxAuto.amount_with_tax).to.eq(1.07); // not tested",
													"    pm.expect(taxAuto.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax highest\", function () {",
													"    const taxHighest = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxHighest'));",
													"    pm.expect(taxHighest.title).to.eq('API: shipping tax Highest');",
													"    pm.expect(taxHighest.amount).to.eq(4.6); //7.1 - 1.5 - 1",
													"    pm.expect(taxHighest.amount_with_tax).to.eq(5.95); // not tested",
													"    pm.expect(taxHighest.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax fixed\", function () {",
													"    const taxFixed = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxFixed'));",
													"    pm.expect(taxFixed.title).to.eq('API: shipping tax Fixed');",
													"    pm.expect(taxFixed.amount).to.eq(4.7); //7.2 - 1.5 - 1",
													"    pm.expect(taxFixed.amount_with_tax).to.eq(5.2); // not tested",
													"    pm.expect(taxFixed.tax_percent).to.eq(7);",
													"});",
													"",
													"pm.test(\"General item check\", function () {",
													"    pm.expect(jsonData.items).length(1, 'Should be 1 item in cart');",
													"});",
													"const items = jsonData.items;",
													"pm.test(\"Check item success\", function () {",
													"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_main_id'));",
													"    pm.expect(item.is_buyable).to.eql(1);",
													"    pm.expect(item.qty_buyable).to.eql(2);",
													"    pm.expect(item.unit_amount).to.eql(416.76);",
													"    pm.expect(item.unit_amount_with_tax).to.eql(495.945);",
													"});",
													"",
													"pm.test(\"Cart rule check\", function () {",
													"    pm.expect(jsonData.external_coupons).length(1, 'Should have 1 discount');",
													"    const rule = Utility.getByName(jsonData.external_coupons, 'API: promo by Billing Country USA');",
													"    // 416.76*0.20",
													"    pm.expect(rule.amount_net).to.eq(83.352);",
													"    pm.expect(rule.currency).to.eq('EUR');",
													"    Test.checkCouponAmount(rule);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "{{framework_action_check_cart}}",
													"type": "text"
												},
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "cart[external_customer_id]",
													"value": "{{created_customer_withCustomGrp_id}}",
													"type": "text"
												},
												{
													"key": "cart[payment_group]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[payment_method]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][country]",
													"value": "US",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][country]",
													"value": "US",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number]",
													"value": "{{catalog_product_main_id}}",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number_public]",
													"value": "SWDEMO10002",
													"type": "text"
												},
												{
													"key": "cart[items][0][quantity]",
													"value": "2",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG: complex tax",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check default customer group set for customer\", function () {",
													"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('created_customerGroup_net_id'));",
													"});",
													"",
													"pm.test(\"Check express\", function () {",
													"    const express = Utility.getById(jsonData.shipping_methods, pm.environment.get('gen_shippingMethod_express'));",
													"    pm.expect(express.title).to.eq('Express');",
													"    pm.expect(express.amount_with_tax).to.eq(0); // should not be less than 0",
													"    pm.expect(express.tax_percent).to.eq(19);",
													"});",
													"",
													"pm.test(\"Check standard\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const standard = Utility.getById(jsonData.shipping_methods, pm.environment.get('gen_shippingMethod_standard'));",
													"    pm.expect(standard.title).to.eq('Standard');",
													"    pm.expect(standard.amount_with_tax).to.eq(0); // should not be less than 0",
													"    pm.expect(standard.tax_percent).to.eq(19);",
													"});",
													"",
													"// checks complex shipping discount",
													"// current solution is to handle discounts in shipping price",
													"pm.test(\"Check ship tax auto\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const taxAuto = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxAuto'));",
													"    pm.expect(taxAuto.title).to.eq('API: shipping tax Auto');",
													"    pm.expect(taxAuto.amount).to.eq(4.00);",
													"    pm.expect(taxAuto.amount_with_tax).to.eq(4.44); // 4 + 0.26 (19%) + 0.18 (7%)",
													"    pm.expect(taxAuto.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax highest\", function () {",
													"    const taxHighest = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxHighest'));",
													"    pm.expect(taxHighest.title).to.eq('API: shipping tax Highest');",
													"    pm.expect(taxHighest.amount).to.eq(4.1);",
													"    pm.expect(taxHighest.amount_with_tax).to.eq(4.88); // 4.1 + 0.78 (19%)",
													"    pm.expect(taxHighest.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax fixed\", function () {",
													"    const taxFixed = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxFixed'));",
													"    pm.expect(taxFixed.title).to.eq('API: shipping tax Fixed');",
													"    pm.expect(taxFixed.amount).to.eq(4.2);",
													"    pm.expect(taxFixed.amount_with_tax).to.eq(4.49); // 4.2 + 0.29 (7%)",
													"    pm.expect(taxFixed.tax_percent).to.eq(7);",
													"});",
													"pm.test(\"General item check\", function () {",
													"    pm.expect(jsonData.items).length(2, 'Should be 2 item in cart');",
													"});",
													"const items = jsonData.items;",
													"pm.test(\"Check item success\", function () {",
													"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_main_id'));",
													"    pm.expect(item.is_buyable).to.eql(1);",
													"    pm.expect(item.qty_buyable).to.eql(1);",
													"    pm.expect(item.unit_amount).to.eql(416.76);",
													"    // 416.76+19%",
													"    pm.expect(item.unit_amount_with_tax).to.eql(495.944);",
													"});",
													"",
													"pm.test(\"Check reduced tax item\", function () {",
													"    const item = Utility.getByItemNumber(items, pm.environment.get('created_product_reducedTax_id'));",
													"    pm.expect(item.is_buyable).to.eql(1);",
													"    pm.expect(item.qty_buyable).to.eql(1);",
													"    pm.expect(item.unit_amount).to.eql(798.32);",
													"    // 798.32+7%",
													"    pm.expect(item.unit_amount_with_tax).to.eql(854.202);",
													"});",
													"",
													"pm.test(\"Check basic coupon code\", function () {",
													"    const coupon = jsonData.external_coupons[0];",
													"    pm.expect(jsonData.external_coupons).length(1);",
													"    pm.expect(coupon.is_valid).to.eq(1);",
													"    pm.expect(coupon.code).to.eq(pm.environment.get('created_promotion_byCode_code'));",
													"    pm.expect(coupon.amount_net).to.eq(2.25);",
													"    //pm.expect(coupon.amount_gross).to.eq(2.5); // taking this on faith",
													"    pm.expect(coupon.name).to.eq('API: promo by code');",
													"    pm.expect(coupon.currency).to.eq('EUR');",
													"    pm.expect(coupon.internal_info, 'Internal info should not be empty').to.not.be.empty;",
													"    const internalInfo = JSON.parse(coupon.internal_info);",
													"    pm.expect(internalInfo.promotionId).to.eq(pm.environment.get('created_promotion_byCode_id'));",
													"    pm.expect(internalInfo.itemType).to.eq('coupon');",
													"    Test.checkCouponAmount(coupon);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "{{framework_action_check_cart}}",
													"type": "text"
												},
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "cart[external_customer_id]",
													"value": "{{created_customer_withCustomGrp_id}}",
													"type": "text"
												},
												{
													"key": "cart[payment_group]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[payment_method]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][country]",
													"value": "BD",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][country]",
													"value": "BD",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number]",
													"value": "{{catalog_product_main_id}}",
													"type": "text"
												},
												{
													"key": "cart[items][0][quantity]",
													"value": "1",
													"type": "text"
												},
												{
													"key": "cart[items][1][item_number]",
													"value": "{{created_product_reducedTax_id}}",
													"type": "text"
												},
												{
													"key": "cart[items][1][item_number_public]",
													"value": "SWDEMO10006",
													"type": "text"
												},
												{
													"key": "cart[items][1][quantity]",
													"value": "1",
													"type": "text"
												},
												{
													"key": "cart[external_coupons][0][code]",
													"value": "{{created_promotion_byCode_code}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Selected shipping",
							"item": [
								{
									"name": "SG: ship only coupon",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check express\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const express = Utility.getById(jsonData.shipping_methods, pm.environment.get('gen_shippingMethod_express'));",
													"    pm.expect(express.title).to.eq('Express');",
													"    pm.expect(express.amount_with_tax).to.eq(0); // should not be less than 0",
													"    pm.expect(express.tax_percent).to.eq(19);",
													"});",
													"",
													"pm.test(\"Check standard\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const standard = Utility.getById(jsonData.shipping_methods, pm.environment.get('gen_shippingMethod_standard'));",
													"    pm.expect(standard.title).to.eq('Standard');",
													"    pm.expect(standard.amount_with_tax).to.eq(0); // should not be less than 0",
													"    pm.expect(standard.tax_percent).to.eq(19);",
													"});",
													"",
													"// checks complex shipping discount",
													"// current solution is to handle discounts in shipping price",
													"pm.test(\"Check ship tax auto\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const taxAuto = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxAuto'));",
													"    pm.expect(taxAuto.title).to.eq('API: shipping tax Auto');",
													"    pm.expect(taxAuto.amount_with_tax).to.eq(4.5); // 5 - 10%",
													"    pm.expect(taxAuto.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax highest\", function () {",
													"    const taxHighest = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxHighest'));",
													"    pm.expect(taxHighest.title).to.eq('API: shipping tax Highest');",
													"    pm.expect(taxHighest.amount_with_tax).to.eq(4.59); //5.1 - 10%",
													"    pm.expect(taxHighest.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax fixed\", function () {",
													"    const taxFixed = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxFixed'));",
													"    pm.expect(taxFixed.title).to.eq('API: shipping tax Fixed');",
													"    pm.expect(taxFixed.amount_with_tax).to.eq(4.68); //5.2 - 10%",
													"    pm.expect(taxFixed.tax_percent).to.eq(7);",
													"});",
													"",
													"pm.test(\"General item check\", function () {",
													"    pm.expect(jsonData.items).length(1, 'Should be 1 item in cart');",
													"});",
													"",
													"pm.test(\"Cart rule check\", function () {",
													"    pm.expect(jsonData.external_coupons).length(1, 'Should have 1 discount');",
													"    const rule = Utility.getByName(jsonData.external_coupons, 'API: ship only promo by code');",
													"    pm.expect(rule, 'Could not locate Ship Only rule').to.not.be.undefined;",
													"    pm.expect(rule.code).to.eq(pm.environment.get('created_promotion_shipOnly_code'));",
													"    pm.expect(rule.is_valid).to.eq(1);",
													"    pm.expect(rule.amount_gross).to.eq(0);",
													"    pm.expect(rule.currency).to.eq('EUR');",
													"    Test.checkCouponAmount(rule);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "{{framework_action_check_cart}}",
													"type": "text"
												},
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "cart[external_customer_id]",
													"value": "{{customer_default_id}}",
													"type": "text"
												},
												{
													"key": "cart[payment_group]",
													"value": "PRE",
													"type": "text"
												},
												{
													"key": "cart[payment_method]",
													"value": "PRE",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][country]",
													"value": "DE",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][country]",
													"value": "DE",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number]",
													"value": "{{catalog_product_main_id}}",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number_public]",
													"value": "SWDEMO10002",
													"type": "text"
												},
												{
													"key": "cart[items][0][quantity]",
													"value": "1",
													"type": "text"
												},
												{
													"key": "cart[external_coupons][0][code]",
													"value": "{{created_promotion_shipOnly_code}}",
													"description": "25% ship discount",
													"type": "text"
												},
												{
													"key": "cart[external_coupons][0][order_index]",
													"value": "0",
													"type": "text"
												},
												{
													"key": "cart[shipping_infos][name]",
													"value": "{{created_shipping_taxFixed}}",
													"type": "text"
												},
												{
													"key": "cart[shipping_infos][display_name]",
													"value": "API: shipping tax Fixed",
													"type": "text"
												},
												{
													"key": "cart[shipping_infos][amount]",
													"value": "8.90",
													"type": "text"
												},
												{
													"key": "cart[shipping_infos][weight]",
													"value": "0.17",
													"type": "text"
												},
												{
													"key": "cart[shipping_group]",
													"value": "OTHER",
													"type": "text"
												},
												{
													"key": "cart[shipping_type]",
													"value": "PLUGINAPI",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										},
										"description": "SW6M-46 checks that individual shipping only discounts are still exported"
									},
									"response": []
								},
								{
									"name": "SG: ship only coupon /w 0 ship",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check express\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const express = Utility.getById(jsonData.shipping_methods, pm.environment.get('gen_shippingMethod_express'));",
													"    pm.expect(express.title).to.eq('Express');",
													"    pm.expect(express.amount_with_tax).to.eq(0); // should not be less than 0",
													"    pm.expect(express.tax_percent).to.eq(19);",
													"});",
													"",
													"pm.test(\"Check standard\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const standard = Utility.getById(jsonData.shipping_methods, pm.environment.get('gen_shippingMethod_standard'));",
													"    pm.expect(standard.title).to.eq('Standard');",
													"    pm.expect(standard.amount_with_tax).to.eq(0); // should not be less than 0",
													"    pm.expect(standard.tax_percent).to.eq(19);",
													"});",
													"",
													"// checks complex shipping discount",
													"// current solution is to handle discounts in shipping price",
													"pm.test(\"Check ship tax auto\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    const taxAuto = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxAuto'));",
													"    pm.expect(taxAuto.title).to.eq('API: shipping tax Auto');",
													"    pm.expect(taxAuto.amount_with_tax).to.eq(4.5); // 5 - 10%",
													"    pm.expect(taxAuto.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax highest\", function () {",
													"    const taxHighest = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxHighest'));",
													"    pm.expect(taxHighest.title).to.eq('API: shipping tax Highest');",
													"    pm.expect(taxHighest.amount_with_tax).to.eq(4.59); //5.1 - 10%",
													"    pm.expect(taxHighest.tax_percent).to.eq(19);",
													"});",
													"pm.test(\"Check ship tax fixed\", function () {",
													"    const taxFixed = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxFixed'));",
													"    pm.expect(taxFixed.title).to.eq('API: shipping tax Fixed');",
													"    pm.expect(taxFixed.amount_with_tax).to.eq(4.68); //5.2 - 10%",
													"    pm.expect(taxFixed.tax_percent).to.eq(7);",
													"});",
													"",
													"pm.test(\"General item check\", function () {",
													"    pm.expect(jsonData.items).length(1, 'Should be 1 item in cart');",
													"});",
													"",
													"pm.test(\"Cart rule check\", function () {",
													"    pm.expect(jsonData.external_coupons).length(1, 'Should have 1 rejected discount');",
													"    const rule = jsonData.external_coupons[0];",
													"    pm.expect(rule, 'Could not locate Ship Only rule').to.not.be.undefined;",
													"    pm.expect(rule.is_valid).to.eq(false);",
													"    Test.checkCouponAmount(rule);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "{{framework_action_check_cart}}",
													"type": "text"
												},
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "cart[external_customer_id]",
													"value": "{{customer_default_id}}",
													"type": "text"
												},
												{
													"key": "cart[payment_group]",
													"value": "PRE",
													"type": "text"
												},
												{
													"key": "cart[payment_method]",
													"value": "PRE",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][country]",
													"value": "DE",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][country]",
													"value": "DE",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number]",
													"value": "{{catalog_product_main_id}}",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number_public]",
													"value": "SWDEMO10002",
													"type": "text"
												},
												{
													"key": "cart[items][0][quantity]",
													"value": "1",
													"type": "text"
												},
												{
													"key": "cart[external_coupons][0][code]",
													"value": "{{created_promotion_shipOnly_code}}",
													"description": "25% ship discount",
													"type": "text"
												},
												{
													"key": "cart[external_coupons][0][order_index]",
													"value": "0",
													"type": "text"
												},
												{
													"key": "cart[shipping_infos][name]",
													"value": "{{gen_shippingMethod_express}}",
													"type": "text"
												},
												{
													"key": "cart[shipping_infos][display_name]",
													"value": "Express",
													"type": "text"
												},
												{
													"key": "cart[shipping_infos][amount]",
													"value": "0",
													"type": "text"
												},
												{
													"key": "cart[shipping_infos][weight]",
													"value": "0.17",
													"type": "text"
												},
												{
													"key": "cart[shipping_group]",
													"value": "OTHER",
													"type": "text"
												},
												{
													"key": "cart[shipping_type]",
													"value": "PLUGINAPI",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										},
										"description": "SW6M-46 checks that individual shipping only discounts are still exported"
									},
									"response": []
								},
								{
									"name": "SG: ship + cart coupon (gross)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check default customer group set for customer\", function () {",
													"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('gen_customer_group_main_id'));",
													"});",
													"",
													"pm.test(\"Check shipping methods\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    // all shipping free because item is discounted 100%",
													"    jsonData.shipping_methods.map(shippingMethod => ",
													"        pm.expect(shippingMethod.amount_with_tax).to.eq(0, shippingMethod.title + ' method should be free')",
													"    );",
													"});",
													"",
													"pm.test(\"General item check\", function () {",
													"    pm.expect(jsonData.items).length(1, 'Should be 1 item in cart');",
													"});",
													"const items = jsonData.items;",
													"pm.test(\"Check item success\", function () {",
													"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_main_id'));",
													"    pm.expect(item.unit_amount).to.eql(416.765);",
													"    pm.expect(item.unit_amount_with_tax).to.eql(495.95);",
													"    pm.expect(item.is_buyable).to.eql(1);",
													"    pm.expect(item.qty_buyable).to.eql(1);",
													"});",
													"",
													"pm.test(\"Cart rule check\", function () {",
													"    pm.expect(jsonData.external_coupons).length(1, 'Should have 1 discount');",
													"    const rule = Utility.getByCode(jsonData.external_coupons, pm.environment.get('created_promotion_shipCart_code'));",
													"    pm.expect(rule.amount_gross).to.eq(99.19);",
													"    pm.expect(rule.currency).to.eq('EUR');",
													"    Test.checkCouponAmount(rule);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "{{framework_action_check_cart}}",
													"type": "text"
												},
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "cart[external_customer_id]",
													"value": "{{customer_default_id}}",
													"type": "text"
												},
												{
													"key": "cart[payment_group]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[payment_method]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][country]",
													"value": "DE",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][country]",
													"value": "DE",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number]",
													"value": "{{catalog_product_main_id}}",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number_public]",
													"value": "Main Product",
													"type": "text"
												},
												{
													"key": "cart[items][0][quantity]",
													"value": "1",
													"type": "text"
												},
												{
													"key": "cart[external_coupons][0][code]",
													"value": "{{created_promotion_shipCart_code}}",
													"type": "text"
												},
												{
													"key": "cart[external_coupons][0][order_index]",
													"value": "0",
													"type": "text"
												},
												{
													"key": "cart[shipping_infos][name]",
													"value": "{{created_shipping_taxFixed}}",
													"type": "text"
												},
												{
													"key": "cart[shipping_infos][display_name]",
													"value": "API: shipping tax Fixed",
													"type": "text"
												},
												{
													"key": "cart[shipping_infos][amount]",
													"value": "8.90",
													"type": "text"
												},
												{
													"key": "cart[shipping_infos][weight]",
													"value": "0.17",
													"type": "text"
												},
												{
													"key": "cart[shipping_group]",
													"value": "OTHER",
													"type": "text"
												},
												{
													"key": "cart[shipping_type]",
													"value": "PLUGINAPI",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG: ship + cart coupon (net)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check default customer group set for customer\", function () {",
													"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('created_customerGroup_net_id'));",
													"});",
													"",
													"pm.test(\"Check shipping methods\", function () {",
													"    pm.expect(jsonData.shipping_methods).length(5);",
													"    // all shipping free because item is discounted 100%",
													"    jsonData.shipping_methods.map(shippingMethod =>  {",
													"        pm.expect(shippingMethod.amount).to.eq(0, shippingMethod.title + ' method should be free');",
													"        pm.expect(shippingMethod.amount_with_tax).to.eq(0, shippingMethod.title + ' method should be free');",
													"    }",
													"    );",
													"});",
													"",
													"pm.test(\"General item check\", function () {",
													"    pm.expect(jsonData.items).length(1, 'Should be 1 item in cart');",
													"});",
													"const items = jsonData.items;",
													"pm.test(\"Check item success\", function () {",
													"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_main_id'));",
													"    pm.expect(item.unit_amount).to.eql(416.76);",
													"    pm.expect(item.unit_amount_with_tax).to.eql(495.944);",
													"    pm.expect(item.is_buyable).to.eql(1);",
													"    pm.expect(item.qty_buyable).to.eql(1);",
													"});",
													"",
													"pm.test(\"Cart rule check\", function () {",
													"    pm.expect(jsonData.external_coupons).length(1, 'Should have 1 discount');",
													"    const rule = Utility.getByCode(jsonData.external_coupons, pm.environment.get('created_promotion_shipCart_code'));",
													"    pm.expect(rule.amount_net).to.eq(83.352);",
													"    pm.expect(rule.currency).to.eq('EUR');",
													"    Test.checkCouponAmount(rule);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "action",
													"value": "{{framework_action_check_cart}}",
													"type": "text"
												},
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "cart[external_customer_id]",
													"value": "{{created_customer_withCustomGrp_id}}",
													"type": "text"
												},
												{
													"key": "cart[payment_group]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[payment_method]",
													"value": "COD",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[invoice_address][country]",
													"value": "DE",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][gender]",
													"value": "{{customer_default_gender}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][first_name]",
													"value": "{{customer_default_firstName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][last_name]",
													"value": "{{customer_default_lastName}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][street_1]",
													"value": "{{customer_default_street1}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][city]",
													"value": "{{customer_default_city}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][zipcode]",
													"value": "{{customer_default_zip}}",
													"type": "text"
												},
												{
													"key": "cart[delivery_address][country]",
													"value": "DE",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number]",
													"value": "{{catalog_product_main_id}}",
													"type": "text"
												},
												{
													"key": "cart[items][0][item_number_public]",
													"value": "Main Product",
													"type": "text"
												},
												{
													"key": "cart[items][0][quantity]",
													"value": "1",
													"type": "text"
												},
												{
													"key": "cart[external_coupons][0][code]",
													"value": "{{created_promotion_shipCart_code}}",
													"type": "text"
												},
												{
													"key": "cart[external_coupons][0][order_index]",
													"value": "0",
													"type": "text"
												},
												{
													"key": "cart[shipping_infos][name]",
													"value": "{{created_shipping_taxFixed}}",
													"type": "text"
												},
												{
													"key": "cart[shipping_infos][display_name]",
													"value": "API: shipping tax Fixed",
													"type": "text"
												},
												{
													"key": "cart[shipping_infos][amount]",
													"value": "8.90",
													"type": "text"
												},
												{
													"key": "cart[shipping_infos][weight]",
													"value": "0.17",
													"type": "text"
												},
												{
													"key": "cart[shipping_group]",
													"value": "OTHER",
													"type": "text"
												},
												{
													"key": "cart[shipping_type]",
													"value": "PLUGINAPI",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "SG-153 related tests. Checking shipping selection + applying different promotions for shipping, shipping + cart"
						}
					]
				},
				{
					"name": "Tag",
					"item": [
						{
							"name": "SG: check tag item rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Check tag coupon code\", function () {",
											"    const coupon = jsonData.external_coupons[0];",
											"    pm.expect(jsonData.external_coupons).length(1);",
											"    pm.expect(coupon.is_valid).to.eq(1);",
											"    pm.expect(coupon.code).to.eq(pm.environment.get('created_promotion_tagCode_code'));",
											"    pm.expect(coupon.amount_net).to.eq(2.33);",
											"    pm.expect(coupon.name).to.eq('API: tag 1 code');",
											"    pm.expect(coupon.currency).to.eq('EUR');",
											"    pm.expect(coupon.internal_info, 'Internal info should not be empty').to.not.be.empty;",
											"    const internalInfo = JSON.parse(coupon.internal_info);",
											"    pm.expect(internalInfo.promotionId).to.eq(pm.environment.get('created_promotion_tagCode_id'));",
											"    pm.expect(internalInfo.itemType).to.eq('coupon');",
											"    Test.checkCouponAmount(coupon);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "{{framework_action_check_cart}}",
											"type": "text"
										},
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "cart[external_customer_id]",
											"value": "{{created_customer_withCustomGrp_id}}",
											"type": "text"
										},
										{
											"key": "cart[payment_group]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[payment_method]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][country]",
											"value": "BD",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][country]",
											"value": "BD",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number]",
											"value": "{{catalog_product_freeShip}}",
											"type": "text"
										},
										{
											"key": "cart[items][0][quantity]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "cart[external_coupons][0][code]",
											"value": "{{created_promotion_tagCode_code}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Require phone",
					"item": [
						{
							"name": "SW: set req. phone cfg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully enabled configs\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"98b54d4b87b74abca0afc59c95312dd2\",\r\n                \"configurationKey\": \"core.loginRegistration.phoneNumberFieldRequired\",\r\n                \"configurationValue\": true,\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\"\r\n            },\r\n            {\r\n                \"id\": \"53c783b675e2a6398f5fc30e37daf103\",\r\n                \"configurationKey\": \"core.loginRegistration.showPhoneNumberField\",\r\n                \"configurationValue\": true,\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: cart error check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Should have constraint error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(999);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const city = pm.variables.replaceIn('{{$randomCity}}');\r",
											"pm.environment.set('gen_rand_city_name', city);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "{{framework_action_check_cart}}",
											"type": "text"
										},
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "cart[external_customer_id]",
											"value": "{{customer_default_id}}",
											"type": "text"
										},
										{
											"key": "cart[payment_group]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[payment_method]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][country]",
											"value": "BD",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][street_1]",
											"value": "{{$randomStreetAddress}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][city]",
											"value": "{{gen_rand_city_name}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][country]",
											"value": "BD",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number]",
											"value": "{{catalog_product_main_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number_public]",
											"value": "SWDEMO10002",
											"type": "text"
										},
										{
											"key": "cart[items][0][quantity]",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: cart (main cust)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const city = pm.variables.replaceIn('{{$randomCity}}');\r",
											"pm.environment.set('gen_rand_city_name', city);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "{{framework_action_check_cart}}",
											"type": "text"
										},
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "cart[external_customer_id]",
											"value": "{{customer_default_id}}",
											"type": "text"
										},
										{
											"key": "cart[payment_group]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[payment_method]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][country]",
											"value": "BD",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][gender]",
											"value": "f",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][city]",
											"value": "{{gen_rand_city_name}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][country]",
											"value": "BD",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][custom_fields][0][internal_field_name]",
											"value": "phone_number",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][custom_fields][1][internal_field_name]",
											"value": "phoneNumber",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][custom_fields][0][value]",
											"value": "112233445",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][custom_fields][1][value]",
											"value": "112233",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number]",
											"value": "{{catalog_product_main_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number_public]",
											"value": "SWDEMO10002",
											"type": "text"
										},
										{
											"key": "cart[items][0][quantity]",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: check phone #",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"phone number must be set\", function () {\r",
											"    pm.expect(jsonData.total).to.eq(1, 'should be one address created');\r",
											"    pm.expect(jsonData.data[0]).to.haveOwnProperty('phoneNumber').to.eq('112233445');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n        {\r\n            \"type\": \"multi\",\r\n            \"operator\": \"and\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"customerId\",\r\n                    \"value\": \"{{customer_default_id}}\"\r\n                },\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"city\",\r\n                    \"value\": \"{{gen_rand_city_name}}\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/customer-address",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"customer-address"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: check gender map",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Check customer data\", function () {",
											"    pm.expect(jsonData.user_data.mail).to.eql(pm.environment.get('userEmail'));",
											"    pm.expect(jsonData.user_data.gender).to.eql('m');",
											"});",
											"",
											"pm.test(\"Check gender\", function () {",
											"    const customAddress = jsonData.addresses.find(address => address.city === pm.environment.get('gen_rand_city_name'));",
											"    pm.expect(customAddress).to.not.be.undefined;",
											"    pm.expect(customAddress.gender).to.eq('f');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_customer}}",
											"type": "text"
										},
										{
											"key": "user",
											"value": "{{userEmail}}",
											"type": "text"
										},
										{
											"key": "pass",
											"value": "{{userPass}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: unset req. phone cfg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully enabled configs\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"98b54d4b87b74abca0afc59c95312dd2\",\r\n                \"configurationKey\": \"core.loginRegistration.phoneNumberFieldRequired\",\r\n                \"configurationValue\": false,\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Language Switch",
					"item": [
						{
							"name": "SWS: login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"get customer context token\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    if (Utility.version.isLT(pm.environment.get('gen_shopware_version'), '6.6.0.0')) {\r",
											"        pm.expect(jsonData.contextToken).to.be.a('string');\r",
											"        pm.environment.set(\"gen_customer_t1_contextToken\", jsonData.contextToken);\r",
											"    } else {\r",
											"        pm.response.to.have.header(\"Sw-Context-Token\");\r",
											"        pm.environment.set(\"gen_customer_t1_contextToken\", pm.response.headers.get('Sw-Context-Token'));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{gen_salesChannel_access_key}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "sw-access-key",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "sw-context-token",
										"value": "test-context",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{userEmail}}\",\n  \"password\": \"{{userPass}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_store_api}}/account/login",
									"host": [
										"{{sw_endpoint_store_api}}"
									],
									"path": [
										"account",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "SWS: change lang to DE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{gen_salesChannel_access_key}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "sw-access-key",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "sw-context-token",
										"value": "{{gen_customer_t1_contextToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"languageId\": \"{{gen_language_german_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_store_api}}/context",
									"host": [
										"{{sw_endpoint_store_api}}"
									],
									"path": [
										"context"
									]
								},
								"description": "Used for switching the context. A typical example would be changing the language or changing the currency."
							},
							"response": [
								{
									"name": "Returns the context token. Use that as your `sw-context-token` header for subsequent requests.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "sw-access-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": "(Required) Content type of the request"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"description": "(Required) Accepted response content types"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currencyId\": \"2b0a109853b1a8ae77dabcf72990b431\",\n  \"languageId\": \"d811b87a5242988d8cbbd9fada308e3d\",\n  \"billingAddressId\": \"7cfcdeed98824455f2a8bc93444344dc\",\n  \"shippingAddressId\": \"1828fda1ee2b103321072849e380f363\",\n  \"paymentMethodId\": \"ae2f1299a1d9bfdea99710e8b0d5f270\",\n  \"shippingMethodId\": \"82253ccf157ef325ccdb29b042ad7dab\",\n  \"countryId\": \"2f7eff01192d8dedc8f666c2e359c3c7\",\n  \"countryStateId\": \"3c2e02453634dd61b718c64af7fae578\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/context",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"context"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"contextToken\": \"reprehenderit ad Excepteur\"\n}"
								}
							]
						},
						{
							"name": "SG: cart (check EN)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Check default customer group set for customer\", function () {",
											"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('gen_customer_group_main_id'));",
											"});",
											"",
											"pm.test(\"Check ship tax auto\", function () {",
											"    const taxAuto = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxAuto'));",
											"    pm.expect(taxAuto.title).to.eq('API: shipping tax Auto');",
											"});",
											"pm.test(\"Check ship tax highest\", function () {",
											"    const taxHighest = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxHighest'));",
											"    pm.expect(taxHighest.title).to.eq('API: shipping tax Highest');",
											"});",
											"pm.test(\"Check ship tax fixed\", function () {",
											"    const taxFixed = Utility.getById(jsonData.shipping_methods, pm.environment.get('created_shipping_taxFixed'));",
											"    pm.expect(taxFixed.title).to.eq('API: shipping tax Fixed');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "action",
											"value": "{{framework_action_check_cart}}",
											"type": "text"
										},
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "cart[external_customer_id]",
											"value": "{{customer_default_id}}",
											"type": "text"
										},
										{
											"key": "cart[payment_group]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[payment_method]",
											"value": "COD",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[invoice_address][country]",
											"value": "BD",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][gender]",
											"value": "{{customer_default_gender}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][first_name]",
											"value": "{{customer_default_firstName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][last_name]",
											"value": "{{customer_default_lastName}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][street_1]",
											"value": "{{customer_default_street1}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][city]",
											"value": "{{customer_default_city}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][zipcode]",
											"value": "{{customer_default_zip}}",
											"type": "text"
										},
										{
											"key": "cart[delivery_address][country]",
											"value": "BD",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number]",
											"value": "{{catalog_product_advPrices_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][0][item_number_public]",
											"value": "SWDEMO10002",
											"type": "text"
										},
										{
											"key": "cart[items][0][quantity]",
											"value": "12",
											"type": "text"
										},
										{
											"key": "cart[items][0][unit_amount]",
											"value": "630.25",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][0][unit_amount_with_tax]",
											"value": "750",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][1][item_number]",
											"value": "1901dc5e888f4b1ea4168c2c5f005540",
											"type": "text"
										},
										{
											"key": "cart[items][1][item_number_public]",
											"value": "SWDEMO10006",
											"type": "text"
										},
										{
											"key": "cart[items][1][quantity]",
											"value": "100",
											"type": "text"
										},
										{
											"key": "cart[items][1][unit_amount]",
											"value": "16.8067",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][1][unit_amount_with_tax]",
											"value": "20",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][2][item_number]",
											"value": "{{created_product_noStock_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][2][item_number_public]",
											"value": "SGDEMOCHECKCART01",
											"type": "text"
										},
										{
											"key": "cart[items][2][quantity]",
											"value": "50",
											"type": "text"
										},
										{
											"key": "cart[items][2][unit_amount]",
											"value": "1",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][2][unit_amount_with_tax]",
											"value": "1.19",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][3][item_number]",
											"value": "{{created_product_maxPurchaseTen_id}}",
											"type": "text"
										},
										{
											"key": "cart[items][3][item_number_public]",
											"value": "SGDEMOCHECKCART02",
											"type": "text"
										},
										{
											"key": "cart[items][3][quantity]",
											"value": "50",
											"type": "text"
										},
										{
											"key": "cart[items][3][unit_amount]",
											"value": "672.27",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[items][3][unit_amount_with_tax]",
											"value": "850",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cart[external_coupons][0][code]",
											"value": "{{created_promotion_byCode_code}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "SW6M-47 desktop session language affects our check_cart translations (e.g. shipping labels)"
				},
				{
					"name": "SG: cart (main cust)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Check default customer group set for customer\", function () {",
									"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('gen_customer_group_main_id'));",
									"});",
									"",
									"// reason for this is because the active line item in cart  are \"free ship\" items",
									"pm.test(\"Check shipping is free\", function () {",
									"    pm.expect(jsonData.shipping_methods).length(6);",
									"    jsonData.shipping_methods.map(method => {",
									"        pm.expect(method.amount_with_tax).is.eq(0, 'Price of all shipping should be 0');",
									"    });",
									"});",
									"pm.test(\"General item check\", function () {",
									"    pm.expect(jsonData.items).length(4, 'Should be 4 items in cart');",
									"});",
									"const items = jsonData.items;",
									"pm.test(\"Check item success\", function () {",
									"    // checking that advanced prices apply to this customer group",
									"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_advPrices_id'));",
									"    pm.expect(item.is_buyable).to.eql(1);",
									"    pm.expect(item.qty_buyable).to.eql(12);",
									"    pm.expect(item.stock_quantity).to.eql(10);",
									"    // 750 - (1436.97/12)",
									"    pm.expect(item.unit_amount).to.eql(630.252);",
									"    pm.expect(item.unit_amount_with_tax).to.eql(750);",
									"});",
									"pm.test(\"Check item not found\", function () {",
									"    const item = Utility.getByItemNumber(items, '1901dc5e888f4b1ea4168c2c5f005540');",
									"    pm.expect(item.is_buyable).to.eql(0);",
									"    pm.expect(item.error).to.eql(301);",
									"});",
									"pm.test(\"Check item out of stock\", function () {",
									"    const item = Utility.getByItemNumber(items, pm.environment.get('created_product_noStock_id'));",
									"    pm.expect(item.is_buyable).to.eql(0);",
									"    pm.expect(item.error).to.eql(300);",
									"});",
									"",
									"pm.test(\"payment method check\", function () {",
									"    const payments = jsonData.payment_methods;",
									"    pm.expect(payments).lengthOf(3, 'Should have 3 payment methods');",
									"    pm.expect(Utility.getById(payments, 'handler_shopware_cashpayment'), 'COD').to.not.be.undefined;",
									"    pm.expect(Utility.getById(payments, 'handler_shopware_prepayment'), 'PREPAY').to.not.be.undefined;",
									"    pm.expect(Utility.getById(payments, 'handler_shopware_invoicepayment'), 'INV_PAY').to.not.be.undefined;",
									"    pm.expect(Utility.getById(payments, 'handler_shopgate_generichandler'), 'SG').to.be.undefined;",
									"});",
									"",
									"pm.test(\"Check item max purchase\", function () {",
									"    const item = Utility.getByItemNumber(items, pm.environment.get('created_product_maxPurchaseTen_id'));",
									"    pm.expect(item.is_buyable).to.eql(0);",
									"    pm.expect(item.qty_buyable).to.eql(10);",
									"    pm.expect(item.stock_quantity).to.eq(50);",
									"    pm.expect(item.unit_amount).to.eql(672.269);",
									"    pm.expect(item.unit_amount_with_tax).to.eql(800);",
									"    pm.expect(item.error).to.eql(302);",
									"});",
									"",
									"pm.test(\"Check basic coupon code\", function () {",
									"    const coupon = jsonData.external_coupons[0];",
									"    pm.expect(jsonData.external_coupons).length(1);",
									"    pm.expect(coupon.is_valid).to.eq(1);",
									"    pm.expect(coupon.code).to.eq(pm.environment.get('created_promotion_byCode_code'));",
									"    pm.expect(coupon.amount_gross).to.eq(2.25);",
									"    pm.expect(coupon.name).to.eq('API: promo by code');",
									"    pm.expect(coupon.currency).to.eq('EUR');",
									"    pm.expect(coupon.internal_info, 'Internal info should not be empty').to.not.be.empty;",
									"    const internalInfo = JSON.parse(coupon.internal_info);",
									"    pm.expect(internalInfo.promotionId).to.eq(pm.environment.get('created_promotion_byCode_id'));",
									"    pm.expect(internalInfo.itemType).to.eq('coupon');",
									"    Test.checkCouponAmount(coupon);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "*/*"
							},
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "action",
									"value": "{{framework_action_check_cart}}",
									"type": "text"
								},
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "cart[external_customer_id]",
									"value": "{{customer_default_id}}",
									"type": "text"
								},
								{
									"key": "cart[payment_group]",
									"value": "COD",
									"type": "text"
								},
								{
									"key": "cart[payment_method]",
									"value": "COD",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][gender]",
									"value": "{{customer_default_gender}}",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][first_name]",
									"value": "{{customer_default_firstName}}",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][last_name]",
									"value": "{{customer_default_lastName}}",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][street_1]",
									"value": "{{customer_default_street1}}",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][city]",
									"value": "{{customer_default_city}}",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][zipcode]",
									"value": "{{customer_default_zip}}",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][country]",
									"value": "BD",
									"type": "text"
								},
								{
									"key": "cart[delivery_address][gender]",
									"value": "{{customer_default_gender}}",
									"type": "text"
								},
								{
									"key": "cart[delivery_address][first_name]",
									"value": "{{customer_default_firstName}}",
									"type": "text"
								},
								{
									"key": "cart[delivery_address][last_name]",
									"value": "{{customer_default_lastName}}",
									"type": "text"
								},
								{
									"key": "cart[delivery_address][street_1]",
									"value": "{{customer_default_street1}}",
									"type": "text"
								},
								{
									"key": "cart[delivery_address][city]",
									"value": "{{customer_default_city}}",
									"type": "text"
								},
								{
									"key": "cart[delivery_address][zipcode]",
									"value": "{{customer_default_zip}}",
									"type": "text"
								},
								{
									"key": "cart[delivery_address][country]",
									"value": "BD",
									"type": "text"
								},
								{
									"key": "cart[items][0][item_number]",
									"value": "{{catalog_product_advPrices_id}}",
									"type": "text"
								},
								{
									"key": "cart[items][0][item_number_public]",
									"value": "SWDEMO10002",
									"type": "text"
								},
								{
									"key": "cart[items][0][quantity]",
									"value": "12",
									"type": "text"
								},
								{
									"key": "cart[items][0][unit_amount]",
									"value": "630.25",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cart[items][0][unit_amount_with_tax]",
									"value": "750",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cart[items][1][item_number]",
									"value": "1901dc5e888f4b1ea4168c2c5f005540",
									"type": "text"
								},
								{
									"key": "cart[items][1][item_number_public]",
									"value": "SWDEMO10006",
									"type": "text"
								},
								{
									"key": "cart[items][1][quantity]",
									"value": "100",
									"type": "text"
								},
								{
									"key": "cart[items][1][unit_amount]",
									"value": "16.8067",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cart[items][1][unit_amount_with_tax]",
									"value": "20",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cart[items][2][item_number]",
									"value": "{{created_product_noStock_id}}",
									"type": "text"
								},
								{
									"key": "cart[items][2][item_number_public]",
									"value": "SGDEMOCHECKCART01",
									"type": "text"
								},
								{
									"key": "cart[items][2][quantity]",
									"value": "50",
									"type": "text"
								},
								{
									"key": "cart[items][2][unit_amount]",
									"value": "1",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cart[items][2][unit_amount_with_tax]",
									"value": "1.19",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cart[items][3][item_number]",
									"value": "{{created_product_maxPurchaseTen_id}}",
									"type": "text"
								},
								{
									"key": "cart[items][3][item_number_public]",
									"value": "SGDEMOCHECKCART02",
									"type": "text"
								},
								{
									"key": "cart[items][3][quantity]",
									"value": "50",
									"type": "text"
								},
								{
									"key": "cart[items][3][unit_amount]",
									"value": "672.27",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cart[items][3][unit_amount_with_tax]",
									"value": "850",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cart[external_coupons][0][code]",
									"value": "{{created_promotion_byCode_code}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: cart (NET grp)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"if (pm.globals.get('verbose')) {",
									"    console.log(jsonData);",
									"}",
									"",
									"pm.test(\"Check default customer group set for customer\", function () {",
									"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('created_customerGroup_net_id'));",
									"});",
									"// reason for this is because the active line item in cart  are \"free ship\" items",
									"pm.test(\"Check shipping is free\", function () {",
									"    pm.expect(jsonData.shipping_methods).length(6);",
									"    jsonData.shipping_methods.map(method => {",
									"        pm.expect(method.amount_with_tax).is.eq(0, 'Price of all shipping should be 0');",
									"    });",
									"});",
									"pm.test(\"General item check\", function () {",
									"    pm.expect(jsonData.items).length(2, 'Should be 2 items in cart');",
									"});",
									"const items = jsonData.items;",
									"// checks that advanced prices do not apply to this customer group",
									"pm.test(\"Check item success\", function () {",
									"    const item = Utility.getByItemNumber(items, pm.environment.get('catalog_product_advPrices_id'));",
									"    pm.expect(item.is_buyable).to.eql(1);",
									"    pm.expect(item.qty_buyable).to.eql(12);",
									"    pm.expect(item.stock_quantity).to.eql(10);",
									"    pm.expect(item.unit_amount).to.eql(798.32);",
									"    pm.expect(item.unit_amount_with_tax).to.eql(950.001);",
									"});",
									"pm.test(\"Check item max purchase\", function () {",
									"    const item = Utility.getByItemNumber(items, pm.environment.get('created_product_maxPurchaseTen_id'));",
									"    pm.expect(item.is_buyable).to.eql(0);",
									"    pm.expect(item.qty_buyable).to.eql(10);",
									"    pm.expect(item.stock_quantity).to.eq(50);",
									"    pm.expect(item.error).to.eql(302);",
									"    pm.expect(item.unit_amount).to.eql(798.32);",
									"    pm.expect(item.unit_amount_with_tax).to.eql(950.001);",
									"});",
									"",
									"pm.test(\"payment method check\", function () {",
									"    const payments = jsonData.payment_methods;",
									"    pm.expect(payments).lengthOf(3, 'Should have 3 payment methods');",
									"    pm.expect(Utility.getById(payments, 'handler_shopware_cashpayment'), 'COD').to.not.be.undefined;",
									"    pm.expect(Utility.getById(payments, 'handler_shopware_prepayment'), 'PREPAY').to.not.be.undefined;",
									"    pm.expect(Utility.getById(payments, 'handler_shopware_invoicepayment'), 'INV_PAY').to.not.be.undefined;",
									"    pm.expect(Utility.getById(payments, 'handler_shopgate_generichandler'), 'SG').to.be.undefined;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "*/*"
							},
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "action",
									"value": "{{framework_action_check_cart}}",
									"type": "text"
								},
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "cart[external_customer_id]",
									"value": "{{created_customer_withCustomGrp_id}}",
									"type": "text"
								},
								{
									"key": "cart[payment_group]",
									"value": "COD",
									"type": "text"
								},
								{
									"key": "cart[payment_method]",
									"value": "COD",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][gender]",
									"value": "{{customer_default_gender}}",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][first_name]",
									"value": "{{customer_default_firstName}}",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][last_name]",
									"value": "{{customer_default_lastName}}",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][street_1]",
									"value": "{{customer_default_street1}}",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][city]",
									"value": "{{customer_default_city}}",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][zipcode]",
									"value": "{{customer_default_zip}}",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][country]",
									"value": "BD",
									"type": "text"
								},
								{
									"key": "cart[delivery_address][gender]",
									"value": "{{customer_default_gender}}",
									"type": "text"
								},
								{
									"key": "cart[delivery_address][first_name]",
									"value": "{{customer_default_firstName}}",
									"type": "text"
								},
								{
									"key": "cart[delivery_address][last_name]",
									"value": "{{customer_default_lastName}}",
									"type": "text"
								},
								{
									"key": "cart[delivery_address][street_1]",
									"value": "{{customer_default_street1}}",
									"type": "text"
								},
								{
									"key": "cart[delivery_address][city]",
									"value": "{{customer_default_city}}",
									"type": "text"
								},
								{
									"key": "cart[delivery_address][zipcode]",
									"value": "{{customer_default_zip}}",
									"type": "text"
								},
								{
									"key": "cart[delivery_address][country]",
									"value": "BD",
									"type": "text"
								},
								{
									"key": "cart[items][0][item_number]",
									"value": "{{catalog_product_advPrices_id}}",
									"type": "text"
								},
								{
									"key": "cart[items][0][item_number_public]",
									"value": "SWDEMO10002",
									"type": "text"
								},
								{
									"key": "cart[items][0][quantity]",
									"value": "12",
									"type": "text"
								},
								{
									"key": "cart[items][0][unit_amount]",
									"value": "721.29",
									"type": "text"
								},
								{
									"key": "cart[items][0][unit_amount_with_tax]",
									"value": "858.34",
									"type": "text"
								},
								{
									"key": "cart[items][1][item_number]",
									"value": "{{created_product_maxPurchaseTen_id}}",
									"type": "text"
								},
								{
									"key": "cart[items][1][item_number_public]",
									"value": "SGDEMOCHECKCART02",
									"type": "text"
								},
								{
									"key": "cart[items][1][quantity]",
									"value": "50",
									"type": "text"
								},
								{
									"key": "cart[items][1][unit_amount]",
									"value": "798.32",
									"type": "text"
								},
								{
									"key": "cart[items][1][unit_amount_with_tax]",
									"value": "950",
									"type": "text"
								},
								{
									"key": "cart[items][1][tax_percent]",
									"value": "19.00",
									"type": "text"
								},
								{
									"key": "cart[items][1][currency]",
									"value": "EUR",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: cart USA ship promo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Check default customer group set for customer\", function () {",
									"    pm.expect(jsonData.customer.customer_groups[0].id).to.eql(pm.environment.get('gen_customer_group_main_id'));",
									"});",
									"pm.test(\"Check shipping methods\", function () {",
									"    pm.expect(jsonData.shipping_methods).length(5);",
									"    // all shipping free because item is FreeShip",
									"    jsonData.shipping_methods.map(shippingMethod => ",
									"        pm.expect(shippingMethod.amount_with_tax).to.eq(",
									"            0, shippingMethod.title + ' method should be free'",
									"        )",
									"    );",
									"});",
									"pm.test(\"General item check\", function () {",
									"    pm.expect(jsonData.items).length(1, 'Should be 4 items in cart');",
									"});",
									"pm.test(\"Check item success\", function () {",
									"    const item = Utility.getByItemNumber(jsonData.items, pm.environment.get('catalog_product_advPrices_id'));",
									"    pm.expect(item.is_buyable).to.eql(1);",
									"    pm.expect(item.qty_buyable).to.eql(1);",
									"    pm.expect(item.stock_quantity).to.eql(10);",
									"    pm.expect(item.unit_amount).to.eql(672.269);",
									"    pm.expect(item.unit_amount_with_tax).to.eql(800);",
									"});",
									"",
									"pm.test(\"Check USA customer auto rule is handled\", function () {",
									"    const coupon = Utility.getByName(jsonData.external_coupons, 'API: promo by Billing Country USA');",
									"    pm.expect(jsonData.external_coupons).length(2);",
									"    pm.expect(coupon.is_valid).to.eq(1);",
									"    pm.expect(coupon.not_valid_message).to.eq(null);",
									"    pm.expect(coupon.code).to.be.a('string').to.eq(pm.environment.get('created_discount_customerUSA_cart_1_id'));",
									"    //pm.expect(coupon.amount_net).to.eq(67.23);",
									"    pm.expect(coupon.amount_gross).to.eq(80);",
									"    pm.expect(coupon.name).to.eq('API: promo by Billing Country USA');",
									"    pm.expect(coupon.currency).to.eq('EUR');",
									"    pm.expect(coupon.internal_info, 'Internal info should not be empty').to.not.be.empty;",
									"    const internalInfo = JSON.parse(coupon.internal_info);",
									"    pm.expect(internalInfo.promotionId).to.eq(pm.environment.get('created_promotion_customerUSA_id'));",
									"    pm.expect(internalInfo.itemType).to.eq('cartRule');",
									"    Test.checkCouponAmount(coupon);",
									"});",
									"",
									"pm.test(\"Check not valid coupon\", function () {",
									"    const coupon = Utility.getByName(jsonData.external_coupons, 'Not valid coupon');",
									"    pm.expect(coupon.is_valid).to.eq(false);",
									"    pm.expect(coupon.not_valid_message).to.eq('Promotion with code NOT-VALID not found!');",
									"    pm.expect(coupon.code).to.eq('NOT-VALID');",
									"    //pm.expect(coupon.amount_net).to.eq('1.0');",
									"    pm.expect(coupon.amount_gross).to.eq('1.5');",
									"    pm.expect(coupon.name).to.eq('Not valid coupon');",
									"    pm.expect(coupon.currency).to.eq('EUR');",
									"    pm.expect(coupon.internal_info, 'Internal info should be empty').to.be.eq('[]');",
									"    Test.checkCouponAmount(coupon);",
									"});",
									"",
									"pm.test(\"payment method check\", function () {",
									"    const payments = jsonData.payment_methods;",
									"    pm.expect(payments).lengthOf(3, 'Should have 3 payment methods');",
									"    pm.expect(Utility.getById(payments, 'handler_shopware_cashpayment'), 'COD').to.not.be.undefined;",
									"    pm.expect(Utility.getById(payments, 'handler_shopware_prepayment'), 'PREPAY').to.not.be.undefined;",
									"    pm.expect(Utility.getById(payments, 'handler_shopware_invoicepayment'), 'INV_PAY').to.not.be.undefined;",
									"    pm.expect(Utility.getById(payments, 'handler_shopgate_generichandler'), 'SG').to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "*/*"
							},
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "action",
									"value": "{{framework_action_check_cart}}",
									"type": "text"
								},
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "cart[external_customer_id]",
									"value": "{{customer_default_id}}",
									"type": "text"
								},
								{
									"key": "cart[payment_group]",
									"value": "COD",
									"type": "text"
								},
								{
									"key": "cart[payment_method]",
									"value": "COD",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][gender]",
									"value": "{{customer_default_gender}}",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][first_name]",
									"value": "{{customer_default_firstName}}",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][last_name]",
									"value": "{{customer_default_lastName}}",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][street_1]",
									"value": "{{customer_default_street1}}",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][city]",
									"value": "Phoenix",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][zipcode]",
									"value": "{{customer_default_zip}}",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][country]",
									"value": "US",
									"type": "text"
								},
								{
									"key": "cart[invoice_address][state]",
									"value": "US-AZ",
									"type": "text"
								},
								{
									"key": "cart[delivery_address][gender]",
									"value": "{{customer_default_gender}}",
									"type": "text"
								},
								{
									"key": "cart[delivery_address][first_name]",
									"value": "{{customer_default_firstName}}",
									"type": "text"
								},
								{
									"key": "cart[delivery_address][last_name]",
									"value": "{{customer_default_lastName}}",
									"type": "text"
								},
								{
									"key": "cart[delivery_address][street_1]",
									"value": "{{customer_default_street1}}",
									"type": "text"
								},
								{
									"key": "cart[delivery_address][city]",
									"value": "{{customer_default_city}}",
									"type": "text"
								},
								{
									"key": "cart[delivery_address][zipcode]",
									"value": "{{customer_default_zip}}",
									"type": "text"
								},
								{
									"key": "cart[delivery_address][country]",
									"value": "BD",
									"type": "text"
								},
								{
									"key": "cart[items][0][item_number]",
									"value": "{{catalog_product_advPrices_id}}",
									"type": "text"
								},
								{
									"key": "cart[items][0][item_number_public]",
									"value": "SWDEMO10002",
									"type": "text"
								},
								{
									"key": "cart[items][0][quantity]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "cart[external_coupons][0][is_valid]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "cart[external_coupons][0][code]",
									"value": "NOT-VALID",
									"type": "text"
								},
								{
									"key": "cart[external_coupons][0][name]",
									"value": "Not valid coupon",
									"type": "text"
								},
								{
									"key": "cart[external_coupons][0][amount_net]",
									"value": "1.0",
									"description": "should not happen that it will pass both",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cart[external_coupons][0][amount_gross]",
									"value": "1.5",
									"type": "text"
								},
								{
									"key": "cart[external_coupons][0][tax_type]",
									"value": "auto",
									"type": "text"
								},
								{
									"key": "cart[external_coupons][0][currency]",
									"value": "EUR",
									"type": "text"
								},
								{
									"key": "cart[external_coupons][1][is_valid]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "cart[external_coupons][1][code]",
									"value": "{{created_discount_customerUSA_cart_1_id}}",
									"description": "test non-coupon properly handled",
									"type": "text"
								},
								{
									"key": "cart[external_coupons][1][name]",
									"value": "Perfectly valid rule",
									"type": "text"
								},
								{
									"key": "cart[external_coupons][1][amount_net]",
									"value": "2.0",
									"type": "text"
								},
								{
									"key": "cart[external_coupons][1][amount_gross]",
									"value": "2.5",
									"type": "text"
								},
								{
									"key": "cart[external_coupons][1][tax_type]",
									"value": "auto",
									"type": "text"
								},
								{
									"key": "cart[external_coupons][1][currency]",
									"value": "EUR",
									"type": "text"
								},
								{
									"key": "cart[external_coupons][1][internal_info]",
									"value": "{\"itemType\":\"cartRule\",\"promotionId\":\"3e226aa33c486a291338478679382ab1\",\"discountId\":\"9c9b73c4076e2d8d2926c827598089cb\"}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Review",
			"item": [
				{
					"name": "All Channel Setting",
					"item": [
						{
							"name": "SW: set review channel export",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully set configs\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{gen_config_sg_export_allChannelReviews_id}}\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.exportAllChannelReviews\",\r\n                \"configurationValue\": true\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								},
								"description": "Set data protection acceptance to required - this config check makes sure our register customer does not fail if this flag is enabled."
							},
							"response": []
						},
						{
							"name": "SG: all reviews",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"const jsonObject = xml2Json(responseBody);",
											"const reviews = jsonObject.reviews.review;",
											"pm.test(\"general check\", function () {",
											"    pm.expect(reviews).length(6, 'Expecting all reviews');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_reviews}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: unset review channel export",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully set configs\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"{{gen_config_sg_export_allChannelReviews_id}}\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.exportAllChannelReviews\",\r\n                \"configurationValue\": false\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								},
								"description": "Set data protection acceptance to required - this config check makes sure our register customer does not fail if this flag is enabled."
							},
							"response": []
						}
					],
					"description": "Testing config to enable/disable export from all sales channels instead of specific ones"
				},
				{
					"name": "SG: reviews (main)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');",
									"const now = moment().subtract(2, 'hours').format('YYYY-MM-DD');",
									"",
									"pm.test(\"Not an error\", function () {",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"const jsonObject = xml2Json(responseBody);",
									"const reviews = jsonObject.reviews.review;",
									"pm.test(\"general check\", function () {",
									"    pm.expect(reviews).length(3, 'Expecting only 3 reviews');",
									"});",
									"",
									"pm.test(\"childReviewOne\", function () {",
									"    const childReviewOne = Utility.getXmlByUid(reviews, pm.environment.get('product_review_child_id'));",
									"    pm.expect(childReviewOne).to.have.property('item_uid').to.eq(pm.environment.get('gen_product_variant_child_id'));",
									"    pm.expect(childReviewOne.score).to.eq('7'); // 3.7*2=7.4",
									"    pm.expect(childReviewOne.reviewer_name).to.eq('*****');",
									"    pm.expect(childReviewOne.title).to.eq('German Title');",
									"    pm.expect(childReviewOne.text).to.eq('German Content');",
									"    pm.expect(childReviewOne).to.haveOwnProperty('date').to.eq(now);",
									"});",
									"pm.test(\"propReviewOne\", function () {",
									"    const propReviewOne = Utility.getXmlByUid(reviews, pm.environment.get('product_review_props_id'));",
									"    pm.expect(propReviewOne).to.have.property('item_uid').to.eq(pm.environment.get('catalog_product_props'));",
									"    pm.expect(propReviewOne.score).to.eq('9'); // 4.4*2=8.8",
									"    pm.expect(propReviewOne.title).to.eq('Main product review');",
									"    pm.expect(propReviewOne.reviewer_name).to.eq('*****');",
									"    pm.expect(propReviewOne.text).to.eq('Main product long content');",
									"    pm.expect(propReviewOne).to.haveOwnProperty('date').to.eq(now);",
									"});",
									"pm.test(\"disabled product ReviewOne\", function () {",
									"    const disabledProdReviewOne = Utility.getXmlByUid(reviews, pm.environment.get('product_review_disabled_id'));",
									"    pm.expect(disabledProdReviewOne).to.have.property('item_uid').to.eq(pm.environment.get('catalog_product_disabled'));",
									"    pm.expect(disabledProdReviewOne.score).to.eq('4'); //2*2=4",
									"    pm.expect(disabledProdReviewOne.reviewer_name).to.eq('*****');",
									"    pm.expect(disabledProdReviewOne.title).to.be.a('string').to.not.be.empty;",
									"    pm.expect(disabledProdReviewOne.text).to.be.a('string').to.not.be.empty;",
									"    pm.expect(disabledProdReviewOne).to.haveOwnProperty('date').to.eq(now);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_get_reviews}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: reviews (uids main)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not an error\", function () {",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"have reviews\", function () {",
									"    const jsonObject = xml2Json(responseBody);",
									"    pm.expect(jsonObject.reviews.review).length(2, 'Expecting only 2 reviews');",
									"    pm.expect(jsonObject.reviews.review[0].$.uid).to.eq(pm.environment.get('product_review_disabled_id'));",
									"    pm.expect(jsonObject.reviews.review[1].$.uid).to.eq(pm.environment.get('product_review_child_id'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_get_reviews}}",
									"type": "text"
								},
								{
									"key": "uids[0]",
									"value": "{{product_review_disabled_id}}",
									"type": "text"
								},
								{
									"key": "uids[1]",
									"value": "{{product_review_freeShip_id}}",
									"description": "wrong salesChannel",
									"type": "text"
								},
								{
									"key": "uids[2]",
									"value": "{{product_review_freeShip_disabled_id}}",
									"description": "disabled review + wrong salesChannel",
									"type": "text"
								},
								{
									"key": "uids[3]",
									"value": "{{product_review_freeShip_id}}",
									"description": "wrong salesChannel",
									"type": "text"
								},
								{
									"key": "uids[4]",
									"value": "{{product_review_child_id}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: reviews (limit)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');",
									"const now = moment().subtract(2, 'hours').format('YYYY-MM-DD');",
									"",
									"pm.test(\"Not an error\", function () {",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"const jsonObject = xml2Json(responseBody);",
									"const reviews = jsonObject.reviews.review;",
									"pm.test(\"general check\", function () {",
									"    pm.expect(reviews).length(2, 'Expecting only 2 reviews');",
									"});",
									"",
									"pm.test(\"childReviewOne\", function () {",
									"    const childReviewOne = Utility.getXmlByUid(reviews, pm.environment.get('product_review_child_id'));",
									"    pm.expect(childReviewOne).to.have.property('item_uid').to.eq(pm.environment.get('gen_product_variant_child_id'));",
									"    pm.expect(childReviewOne.score).to.eq('7');",
									"    pm.expect(childReviewOne.reviewer_name).to.eq('*****');",
									"    pm.expect(childReviewOne.title).to.eq('German Title');",
									"    pm.expect(childReviewOne.text).to.eq('German Content');",
									"    pm.expect(childReviewOne).to.haveOwnProperty('date').to.eq(now);",
									"});",
									"pm.test(\"propReviewOne\", function () {",
									"    const propReviewOne = Utility.getXmlByUid(reviews, pm.environment.get('product_review_props_id'));",
									"    pm.expect(propReviewOne).to.have.property('item_uid').to.eq(pm.environment.get('catalog_product_props'));",
									"    pm.expect(propReviewOne.score).to.eq('9');",
									"    pm.expect(propReviewOne.title).to.eq('Main product review');",
									"    pm.expect(propReviewOne.reviewer_name).to.eq('*****');",
									"    pm.expect(propReviewOne.text).to.eq('Main product long content');",
									"    pm.expect(propReviewOne).to.haveOwnProperty('date').to.eq(now);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_get_reviews}}",
									"type": "text"
								},
								{
									"key": "limit",
									"value": "2",
									"type": "text"
								},
								{
									"key": "offset",
									"value": "0",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: reviews (offset)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');",
									"const now = moment().subtract(2, 'hours').format('YYYY-MM-DD');",
									"",
									"pm.test(\"Not an error\", function () {",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"have reviews\", function () {",
									"    const jsonObject = xml2Json(responseBody);",
									"    pm.expect(jsonObject.reviews.review.$.uid).to.eq(pm.environment.get('product_review_disabled_id'));",
									"    pm.expect(jsonObject.reviews.review).to.have.property('item_uid').to.eq(pm.environment.get('catalog_product_disabled'));",
									"    pm.expect(jsonObject.reviews.review.score).to.eq('4');",
									"    pm.expect(jsonObject.reviews.review.reviewer_name).to.eq('*****');",
									"    pm.expect(jsonObject.reviews.review.title).to.be.a('string').to.not.be.empty;",
									"    pm.expect(jsonObject.reviews.review.text).to.be.a('string').to.not.be.empty;",
									"    pm.expect(jsonObject.reviews.review).to.haveOwnProperty('date').to.eq(now);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_get_reviews}}",
									"type": "text"
								},
								{
									"key": "limit",
									"value": "2",
									"type": "text"
								},
								{
									"key": "offset",
									"value": "2",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Order",
			"item": [
				{
					"name": "1 - 2 - addOrder (status)",
					"item": [
						{
							"name": "SG: addOrder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Order added properly\", function () {",
											"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Save order id\", function () {",
											"    const order_number = Utility.getRequestVariableValue('order_number');",
											"    pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_add_order}}",
											"type": "text"
										},
										{
											"key": "order_number",
											"value": "0001",
											"type": "text"
										},
										{
											"key": "debug_log",
											"value": "1",
											"type": "text"
										},
										{
											"key": "use_errorhandler",
											"value": "1",
											"type": "text"
										},
										{
											"key": "use_shutdown_handler",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: check order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"One order found\", function () {\r",
											"    pm.expect(jsonData.total).to.eql(1);\r",
											"});\r",
											"\r",
											"const order = jsonData.data[0];\r",
											"pm.test(\"Status is still open\", function() {    \r",
											"    pm.expect(order.deliveries).to.have.length(1, 'Should have one delivery');\r",
											"    pm.expect(Utility.getMachineStateName(order.deliveries[0])).to.eq('open');\r",
											"});\r",
											"\r",
											"pm.test(\"Payment status is still open\", function() {    \r",
											"    pm.expect(order.transactions).to.have.length(1, 'Should have one payment transaction');\r",
											"    pm.expect(Utility.getMachineStateName(order.transactions[0])).to.eq('open');\r",
											"});\r",
											"\r",
											"pm.test(\"Check order data\", function () {\r",
											"    pm.expect(order.shippingTotal).to.eql(6.1);\r",
											"    pm.expect(order.affiliateCode).to.eql(null);\r",
											"    pm.expect(order.campaignCode).to.eql(null);\r",
											"    pm.expect(order.orderCustomer.email).to.eql('test@example.com');\r",
											"    pm.expect(order.orderCustomer.customFields).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Custom Field data for order good\", function () {\r",
											"    pm.expect(order.customFields, 'Should be also mapped:').to.haveOwnProperty('unmapped_custom_field');\r",
											"    pm.expect(order.customFields).to.haveOwnProperty('api_order_custom_field_int_0001').to.eq(13);\r",
											"    pm.expect(order.customFields).to.haveOwnProperty('api_order_custom_field_float_0001').to.eq(11.5);\r",
											"    pm.expect(order.customFields).to.haveOwnProperty('api_order_custom_field_bool_0001').to.eq(true);\r",
											"    pm.expect(order.customFields).to.haveOwnProperty('api_order_custom_field_text_0001').to.eq('mapped string value');\r",
											"});\r",
											"pm.test(\"Billing custom field data is good\", function () {\r",
											"    pm.expect(order.billingAddress.customFields).to.haveOwnProperty('api_address_custom_field_int_0001').to.eq(17);\r",
											"    pm.expect(order.billingAddress.customFields).to.haveOwnProperty('api_address_custom_field_float_0001').to.eq(3.3);\r",
											"    pm.expect(order.billingAddress.customFields).to.haveOwnProperty('api_address_custom_field_bool_0001').to.eq(false);\r",
											"    pm.expect(order.billingAddress.customFields).to.haveOwnProperty('api_address_custom_field_text_0001').to.eq('mapped string value as well');\r",
											"    pm.expect(order.billingAddress.customFields, 'Should be also mapped:').to.haveOwnProperty('unmapped_field');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n        {\r\n            \"type\": \"equals\",\r\n            \"field\": \"id\",\r\n            \"value\": \"{{gen_order_0001_id}}\"\r\n        }\r\n    ],\r\n    \"associations\": {\r\n        \"billingAddress\": {},\r\n        \"deliveries\": {\r\n            \"associations\": {\r\n                \"stateMachineState\": {}\r\n            }\r\n        },\r\n        \"transactions\": {\r\n            \"associations\": {\r\n                \"stateMachineState\": {}\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/order",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"order"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: addOrder (status & guest)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Order added properly\", function () {",
											"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Save order id\", function () {",
											"    const order_number = Utility.getRequestVariableValue('order_number');",
											"    pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_add_order}}",
											"type": "text"
										},
										{
											"key": "order_number",
											"value": "0002",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: check order (status & guest)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"const order = jsonData.data[0];\r",
											"pm.test(\"Check order data\", function () {\r",
											"    pm.expect(order.shippingTotal).to.eql(6.1);\r",
											"    pm.expect(order.affiliateCode).to.eql(null);\r",
											"    pm.expect(order.campaignCode).to.eql(null);\r",
											"    pm.expect(order.orderCustomer.email).to.eql('guest_customer@apite.io');\r",
											"    pm.expect(order.orderCustomer.customFields).to.eql(null);\r",
											"    pm.expect(order.customFields).to.eql(null);\r",
											"    pm.expect(order.billingAddress.customFields).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Shipping status is shipped\", function() {    \r",
											"    pm.expect(order.deliveries).to.have.length(1, 'Should have one shipping delivery');\r",
											"    pm.expect(Utility.getMachineStateName(order.deliveries[0])).to.eq('shipped');\r",
											"});\r",
											"\r",
											"pm.test(\"Payment status is paid\", function() {    \r",
											"    pm.expect(order.transactions).to.have.length(1, 'Should have one payment transaction');\r",
											"    pm.expect(Utility.getMachineStateName(order.transactions[0])).to.eq('paid');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n        {\r\n          \"type\": \"equals\",\r\n          \"field\": \"id\",\r\n          \"value\": \"{{gen_order_0002_id}}\"\r\n        }\r\n    ],\r\n    \"associations\":{\r\n        \"billingAddress\":{},\r\n        \"deliveries\": {\r\n            \"associations\": {\r\n                \"stateMachineState\": {}\r\n            }\r\n        },\r\n        \"transactions\": {\r\n            \"associations\": {\r\n                \"stateMachineState\": {}\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/order",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"order"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3 - promo",
					"item": [
						{
							"name": "SG: addOrder (promos)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Order added properly\", function () {",
											"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Save order id\", function () {",
											"    const order_number = Utility.getRequestVariableValue('order_number');",
											"    pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_add_order}}",
											"type": "text"
										},
										{
											"key": "order_number",
											"value": "0003",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: get last order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Not an error\", function () {",
											"    pm.expect(jsonData.error).to.eq(0);",
											"    pm.expect(jsonData.orders).to.be.length(1);",
											"});",
											"",
											"const order = jsonData.orders[0];",
											"pm.test(\"Basic order data\", function () {",
											"    pm.expect(order.external_order_id).to.eql(pm.environment.get('gen_order_0003_id'));",
											"    pm.expect(order.status_name).to.eq('Open');",
											"    pm.expect(order.mail).to.eq(pm.environment.get('userEmail'));",
											"    pm.expect(order.phone).to.eq('+1-111-111-1111');",
											"    pm.expect(order.currency).to.eq('EUR');",
											"    pm.expect(order.is_paid).to.eq(0);",
											"    pm.expect(order.payment_method).to.eq('Vorkasse (Eigene Abwicklung)');",
											"    pm.expect(order.payment_time).to.eq('2022-01-20T11:14:03+00:00');",
											"    pm.expect(order.is_shipping_completed).to.eq(0);",
											"});",
											"",
											"pm.test(\"Custom Fields\", function () {",
											"    pm.expect(order.custom_fields).to.be.length(1);",
											"    const field = order.custom_fields[0];",
											"    pm.expect(field.label).to.eq('customer_comment');",
											"    pm.expect(field.internal_field_name).to.eq('customer_comment');",
											"    pm.expect(field.value).to.eq('My order comment');",
											"});",
											"",
											"pm.test(\"Billing Address check\", function () {",
											"    const address = order.invoice_address;",
											"    pm.expect(address.is_invoice_address).to.eq(1);",
											"    pm.expect(address.is_delivery_address).to.eq(0);",
											"    pm.expect(address.first_name).to.eq('First Name');",
											"    pm.expect(address.last_name).to.eq('Last Name');",
											"    pm.expect(address.gender).to.eq('f');",
											"    pm.expect(address.birthday).to.eq(null);",
											"    pm.expect(address.company).to.eq('My Company 1');",
											"    pm.expect(address.street_1).to.eq('My Street 1 A');",
											"    pm.expect(address.street_2).to.eq('My Street 2 A');",
											"    pm.expect(address.zipcode).to.eq('27404');",
											"    pm.expect(address.city).to.eq('Phoenix');",
											"    pm.expect(address.country).to.eq('US');",
											"    pm.expect(address.state).to.eq('US-AZ');",
											"    pm.expect(address.phone).to.eq('+1-111-111-1111');",
											"});",
											"",
											"pm.test(\"Shipping Address check\", function () {",
											"    const address = order.delivery_address;",
											"    pm.expect(address.is_invoice_address).to.eq(0);",
											"    pm.expect(address.is_delivery_address).to.eq(1);",
											"    pm.expect(address.first_name).to.eq('Bank');",
											"    pm.expect(address.last_name).to.eq('Payment');",
											"    pm.expect(address.gender).to.eq('m');",
											"    pm.expect(address.birthday).to.eq(null);",
											"    pm.expect(address.company).to.eq('My Company 2');",
											"    pm.expect(address.street_1).to.eq('My Street 1 B');",
											"    pm.expect(address.street_2).to.eq('My Street 2 B');",
											"    pm.expect(address.zipcode).to.eq('27404');",
											"    pm.expect(address.city).to.eq('Frankenbostel');",
											"    pm.expect(address.country).to.eq('GB');",
											"    pm.expect(address.state).to.eq('GB-ABC');",
											"    pm.expect(address.phone).to.eq('+2-111-111-1111');",
											"});",
											"",
											"pm.test(\"Delivery notes\", function () {",
											"    pm.expect(order.delivery_notes).to.be.length(1);",
											"    const note = order.delivery_notes[0];",
											"    pm.expect(note.shipping_service_id).to.eq('OTHER');",
											"    pm.expect(note.shipping_service_name).to.eq('Express');",
											"    pm.expect(note.tracking_number).to.eq('');",
											"    pm.expect(note.shipping_time).to.eq(null);",
											"});",
											"",
											"pm.test(\"Taxes\", function () {",
											"    pm.expect(order.order_taxes).to.be.length(1);",
											"    const tax = order.order_taxes[0];",
											"    pm.expect(tax.label).to.eq('plus 20% VAT');",
											"    pm.expect(tax.tax_percent).to.eq(20);",
											"    pm.expect(tax.amount).to.eq(77.68); // 78.28 - 0.6 (20% ship tax)",
											"});",
											"",
											"pm.test(\"Promotion by code check\", function () {",
											"    pm.expect(order.external_coupons).to.be.length(4);",
											"    const coupon = Utility.getByName(order.external_coupons, 'API: promo by code');",
											"    pm.expect(coupon, 'Could not locate coupon by code').to.not.be.undefined;",
											"    pm.expect(coupon.code).to.eq(pm.environment.get('created_promotion_byCode_code'));",
											"    pm.expect(coupon.name).to.eq('API: promo by code');",
											"    pm.expect(coupon.amount).to.eq(2.25);",
											"    pm.expect(coupon.currency).to.eq('EUR');",
											"    pm.expect(coupon.is_free_shipping).to.eq(null);",
											"    const internalInfo = JSON.parse(coupon.internal_info);",
											"    pm.expect(internalInfo.promotionId).to.eq(pm.environment.get('created_promotion_byCode_id'));",
											"    pm.expect(internalInfo.itemType).to.eq('coupon');",
											"    pm.expect(internalInfo.promotionId).to.eq(pm.environment.get('created_promotion_byCode_id'));",
											"    Test.checkCouponAmount(coupon);",
											"});",
											"pm.test(\"Auto Promo 10% discount check\", function () {",
											"    const promoDiscount = Utility.getByName(order.external_coupons, 'API: promo by Billing Country USA');",
											"    pm.expect(promoDiscount, 'Could not locate 10% promo discount').to.not.be.undefined;",
											"    pm.expect(promoDiscount.code).to.not.be.null;",
											"    pm.expect(promoDiscount.name).to.eq('API: promo by Billing Country USA');",
											"    pm.expect(promoDiscount.amount).to.eq(52.05);",
											"    pm.expect(promoDiscount.currency).to.eq('EUR');",
											"    pm.expect(promoDiscount.is_free_shipping).to.eq(null);",
											"    const internalInfo = JSON.parse(promoDiscount.internal_info);",
											"    pm.expect(internalInfo.promotionId).to.eq(pm.environment.get('created_promotion_customerUSA_id'));",
											"    pm.expect(internalInfo.itemType).to.eq('cartRule');",
											"    pm.expect(internalInfo.promotionId).to.eq(pm.environment.get('created_promotion_customerUSA_id'));",
											"    pm.expect(internalInfo.discountId).to.eq(pm.environment.get('created_discount_customerUSA_cart_1_id'));",
											"    Test.checkCouponAmount(promoDiscount);",
											"});",
											"    ",
											"pm.test(\"Shipping discount 1 check\", function () {",
											"    const shippingDiscount = Utility.getByName(order.external_coupons, 'discount shipping costs 1');",
											"    pm.expect(shippingDiscount, 'Could not locate shipping discount').to.not.be.undefined;",
											"    pm.expect(shippingDiscount.code).to.eq('1');",
											"    pm.expect(shippingDiscount.name).to.eq('discount shipping costs 1');",
											"    pm.expect(shippingDiscount.amount).to.eq(1.0);",
											"    pm.expect(shippingDiscount.currency).to.eq('EUR');",
											"    pm.expect(shippingDiscount.is_free_shipping).to.eq(null);",
											"    Test.checkCouponAmount(shippingDiscount);",
											"});",
											"",
											"pm.test(\"Shipping discount 2 check\", function () {",
											"    const shippingDiscount = Utility.getByName(order.external_coupons, 'discount shipping costs 2');",
											"    pm.expect(shippingDiscount, 'Could not locate shipping discount').to.not.be.undefined;",
											"    pm.expect(shippingDiscount.code).to.eq('2');",
											"    pm.expect(shippingDiscount.name).to.eq('discount shipping costs 2');",
											"    pm.expect(shippingDiscount.amount).to.eq(1.5);",
											"    pm.expect(shippingDiscount.currency).to.eq('EUR');",
											"    pm.expect(shippingDiscount.is_free_shipping).to.eq(null);",
											"    Test.checkCouponAmount(shippingDiscount);",
											"});",
											"",
											"pm.test(\"Item check\", function () {",
											"    pm.expect(order.items).to.be.length(2);",
											"    const product = Utility.getByName(order.items, 'Main product');",
											"    pm.expect(product, 'Could not find main product').to.not.be.undefined;",
											"    pm.expect(product.item_number).to.eq(pm.environment.get('catalog_product_main_id'));",
											"    pm.expect(product.item_number_public).to.eq('SWDEMO10001');",
											"    pm.expect(product.quantity).to.eq(1);",
											"    pm.expect(product.unit_amount).to.eq(413.29);",
											"    pm.expect(product.unit_amount_with_tax).to.eq(495.95);",
											"    pm.expect(product.tax_percent).to.eq(20);",
											"    pm.expect(product.currency).to.eq('EUR');",
											"    pm.expect(product.description).to.have.string('Lorem ipsum');",
											"    const variantChild = Utility.getByName(order.items, 'API: Variant Child (Red-M)');",
											"    pm.expect(variantChild, 'Could not find variant child').to.not.be.undefined;",
											"    pm.expect(variantChild.item_number_public).to.eq('SG.DEMO.CHILD.1');",
											"    pm.expect(variantChild.item_number).to.eq(pm.environment.get('created_product_variant_child_id'));",
											"    pm.expect(variantChild.quantity).to.eq(1);",
											"    pm.expect(variantChild.unit_amount).to.eq(20.42);",
											"    pm.expect(variantChild.unit_amount_with_tax).to.eq(24.5);",
											"    pm.expect(variantChild.tax_percent).to.eq(20);",
											"    pm.expect(variantChild.currency).to.eq('EUR');",
											"    pm.expect(variantChild.description).to.have.string('Lorem ipsum');",
											"});",
											"",
											"pm.test(\"Shipping extra cost check\", function () {",
											"    pm.expect(order.extra_costs).to.be.length(1);",
											"    const extraCost = order.extra_costs[0];",
											"    pm.expect(extraCost.type).to.eq('shipping');",
											"    pm.expect(extraCost.tax_percent).to.eq(20);",
											"    pm.expect(extraCost.amount).to.eq(6.1); // 6.1 + 0.6(20% ship tax) - 1 (promo 1) - 1.5 (promo2)",
											"    pm.expect(extraCost.label).to.eq('plus shipping costs');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_orders}}",
											"type": "text"
										},
										{
											"key": "customer_token",
											"value": "{{customer_default_id}}",
											"type": "text"
										},
										{
											"key": "limit",
											"value": "1",
											"type": "text"
										},
										{
											"key": "offset",
											"value": "0",
											"type": "text"
										},
										{
											"key": "customer_language",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: get deliveryId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Your test name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.total).to.eql(1);\r",
											"    const delivery = jsonData.data[0];\r",
											"    pm.expect(delivery.trackingCodes, 'Tracking codes should be empty').to.be.a('array').to.be.length(0);\r",
											"    pm.environment.set(\"gen_order_0003_delivery_id\", delivery.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n        { \r\n            \"type\": \"multi\", \r\n            \"operator\": \"and\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"orderId\",\r\n                    \"value\": \"{{gen_order_0003_id}}\"\r\n                },\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"shippingCosts.unitPrice\",\r\n                    \"value\": 6.10\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/order-delivery",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"order-delivery"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: ship order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status is now shipped\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.technicalName).to.eql('shipped');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sendMail\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/order_delivery/{{gen_order_0003_delivery_id}}/state/ship",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"order_delivery",
										"{{gen_order_0003_delivery_id}}",
										"state",
										"ship"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: set tracking codes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"trackingCodes\": [\"test-code-1\", \"test-code-2\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/order/{{gen_order_0003_id}}/deliveries/{{gen_order_0003_delivery_id}}",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"order",
										"{{gen_order_0003_id}}",
										"deliveries",
										"{{gen_order_0003_delivery_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: check delivery",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Not an error\", function () {",
											"    pm.expect(jsonData.error).to.eq(0);",
											"    pm.expect(jsonData.orders).to.be.length(1);",
											"});",
											"",
											"const order = jsonData.orders[0];",
											"pm.test(\"Basic order data\", function () {",
											"    pm.expect(order.external_order_id).to.eql(pm.environment.get('gen_order_0003_id'));",
											"    pm.expect(order.status_name).to.eq('Open');",
											"});",
											"",
											"pm.test(\"Delivery notes\", function () {",
											"    pm.expect(order.delivery_notes).to.be.length(1);",
											"    const note = order.delivery_notes[0];",
											"    pm.expect(note.shipping_service_id).to.eq('OTHER');",
											"    pm.expect(note.shipping_service_name).to.eq('Express');",
											"    pm.expect(note.tracking_number).to.eq('test-code-1, test-code-2');",
											"    pm.expect(note.shipping_time).to.be.a('string').to.not.be.empty;",
											"    const time = moment(note.shipping_time);",
											"    pm.expect(time.isValid()).to.eq(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_orders}}",
											"type": "text"
										},
										{
											"key": "customer_token",
											"value": "{{customer_default_id}}",
											"type": "text"
										},
										{
											"key": "limit",
											"value": "1",
											"type": "text"
										},
										{
											"key": "offset",
											"value": "0",
											"type": "text"
										},
										{
											"key": "customer_language",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4 - 5 - update",
					"item": [
						{
							"name": "SG: initial order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Order added properly\", function () {",
											"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Save order id\", function () {",
											"    const order_number = Utility.getRequestVariableValue('order_number');",
											"    pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_add_order}}",
											"type": "text"
										},
										{
											"key": "order_number",
											"value": "0004",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: get order+SG",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test validity of import\", function () {\r",
											"    pm.expect(jsonData.total).to.eql(1);\r",
											"    const swOrder = jsonData.data[0];\r",
											"    pm.expect(swOrder.extensions, ' Should have a Shopgate order attached').to.haveOwnProperty('shopgateOrder');\r",
											"    const order = swOrder.extensions.shopgateOrder;\r",
											"    pm.expect(order.isSent, 'Should not be sent').to.eq(false);\r",
											"    pm.expect(order.isCancelled, 'Should not be cancelled').to.eq(false);\r",
											"    pm.expect(order.isPaid, 'Should not be paid').to.eq(false);\r",
											"    pm.expect(order.isTest, 'Should not be test').to.eq(false);\r",
											"\r",
											"    // rewrite is necessary\r",
											"    pm.environment.set(\"gen_shopgateOrder_0004_id\", order.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n        {\r\n            \"type\": \"equals\",\r\n            \"field\": \"id\",\r\n            \"value\": \"{{gen_order_0004_id}}\"\r\n        }\r\n    ],\r\n    \"associations\": {\r\n        \"shopgateOrder\": {}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/order",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"order"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: update SG order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// The only reason we need this is to trick Mockoon to load an \"updated\" order\r",
											"pm.test(\"Successfully updated shopgate order entry\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-shopgate-order\": {\r\n        \"entity\": \"shopgate_order\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n             {\r\n                \"id\": \"{{gen_shopgateOrder_0004_id}}\",\r\n                \"shopgateOrderNumber\": \"0005\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: non-update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Order not updated\", function () {",
											"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_update_order}}",
											"type": "text"
										},
										{
											"key": "order_number",
											"value": "0005",
											"type": "text"
										},
										{
											"key": "payment",
											"value": "0",
											"type": "text"
										},
										{
											"key": "shipping",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: get order (not updated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"One order found\", function () {\r",
											"    pm.expect(jsonData.total).to.eql(1);\r",
											"});\r",
											"\r",
											"const swOrder = jsonData.data[0];\r",
											"pm.test(\"Status is still open\", function() {    \r",
											"    pm.expect(swOrder.deliveries).to.have.length(1, 'Should have one delivery');\r",
											"    pm.expect(Utility.getMachineStateName(swOrder.deliveries[0])).to.eq('open');\r",
											"});\r",
											"\r",
											"pm.test(\"Payment status is still open\", function() {    \r",
											"    pm.expect(swOrder.transactions).to.have.length(1, 'Should have one payment transaction');\r",
											"    pm.expect(Utility.getMachineStateName(swOrder.transactions[0])).to.eq('open');\r",
											"});\r",
											"\r",
											"pm.test(\"Shopgate order check\", function() {\r",
											"    pm.expect(swOrder.extensions, 'Should have a Shopgate order attached').to.haveOwnProperty('shopgateOrder');\r",
											"    const order = swOrder.extensions.shopgateOrder;\r",
											"    pm.expect(order.isSent, 'Should not be sent').to.eq(false);\r",
											"    pm.expect(order.isCancelled, 'Should not be cancelled').to.eq(false);\r",
											"    pm.expect(order.isPaid, 'Should not be paid').to.eq(false);\r",
											"    pm.expect(order.isTest, 'Should not be test').to.eq(false);\r",
											"    pm.expect(order.shopgateOrderNumber).to.eq('0005', 'Should be an updated SG order to grab 0005 instead of 0004');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n        {\r\n            \"type\": \"equals\",\r\n            \"field\": \"id\",\r\n            \"value\": \"{{gen_order_0004_id}}\"\r\n        }\r\n    ],\r\n    \"associations\": {\r\n        \"shopgateOrder\": {},\r\n        \"deliveries\": {\r\n            \"associations\": {\r\n                \"stateMachineState\": {}\r\n            }\r\n        },\r\n        \"transactions\": {\r\n            \"associations\": {\r\n                \"stateMachineState\": {}\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/order",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"order"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Order not updated\", function () {",
											"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_update_order}}",
											"type": "text"
										},
										{
											"key": "order_number",
											"value": "0005",
											"type": "text"
										},
										{
											"key": "payment",
											"value": "1",
											"type": "text"
										},
										{
											"key": "shipping",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: get order (updated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"One order found\", function () {\r",
											"    pm.expect(jsonData.total).to.eql(1);\r",
											"});\r",
											"\r",
											"const swOrder = jsonData.data[0];\r",
											"pm.test(\"Shipping status is shipped\", function() {    \r",
											"    pm.expect(swOrder.deliveries).to.have.length(1, 'Should have one shipping delivery');\r",
											"    pm.expect(Utility.getMachineStateName(swOrder.deliveries[0])).to.eq('shipped');\r",
											"});\r",
											"\r",
											"pm.test(\"Payment status is paid\", function() {    \r",
											"    pm.expect(swOrder.transactions).to.have.length(1, 'Should have one payment transaction');\r",
											"    pm.expect(Utility.getMachineStateName(swOrder.transactions[0])).to.eq('paid');\r",
											"});\r",
											"\r",
											"pm.test(\"Shopgate order check\", function() {\r",
											"    pm.expect(swOrder.extensions, 'Should have a Shopgate order attached').to.haveOwnProperty('shopgateOrder');\r",
											"    const order = swOrder.extensions.shopgateOrder;\r",
											"    pm.expect(order.isSent, 'Should not be sent').to.eq(false);\r",
											"    pm.expect(order.isCancelled, 'Should not be cancelled').to.eq(false);\r",
											"    pm.expect(order.isPaid, 'Should be paid').to.eq(true);\r",
											"    pm.expect(order.isTest, 'Should not be test').to.eq(false);\r",
											"    pm.expect(order.shopgateOrderNumber).to.eq('0005', 'Should be an updated SG order to grab 0005 instead of 0004');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n        {\r\n            \"type\": \"equals\",\r\n            \"field\": \"id\",\r\n            \"value\": \"{{gen_order_0004_id}}\"\r\n        }\r\n    ],\r\n    \"associations\": {\r\n        \"shopgateOrder\": {},\r\n        \"deliveries\": {\r\n            \"associations\": {\r\n                \"stateMachineState\": {}\r\n            }\r\n        },\r\n        \"transactions\": {\r\n            \"associations\": {\r\n                \"stateMachineState\": {}\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/order",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"order"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "6 - 7 - live shopping",
					"item": [
						{
							"name": "SW: Enable live-shop",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully enabled LiveShopping\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"e52549984567bf14a0b94fc8e38bfa4a\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.isLiveShopping\",\r\n                \"configurationValue\": true,\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: add order (gross)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Order added properly\", function () {",
											"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Save order id\", function () {",
											"    const order_number = Utility.getRequestVariableValue('order_number');",
											"    pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_add_order}}",
											"type": "text"
										},
										{
											"key": "order_number",
											"value": "0006",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: check last order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Not an error\", function () {",
											"    pm.expect(jsonData.error).to.eq(0);",
											"    pm.expect(jsonData.orders).to.be.length(1);",
											"});",
											"",
											"const order = jsonData.orders[0];",
											"pm.test(\"Basic order data\", function () {",
											"    /**",
											"     * 147.7 just items Gross - 125+12+10.7",
											"     * 153.8 for items & shipping Gross - 125+12+10.7+6.10",
											"     * 124.96 for item + shipping GROSS 100 + 10 + 10 + (6.10 - 1.03 - 0.08 -  - 0.03)",
											"     */",
											"    pm.expect(order.amount_items_gross).to.eq(147.7);",
											"    pm.expect(order.amount_complete_gross).to.eq(153.8);",
											"    pm.expect(order.amount_complete_net).to.eq(124.96);",
											"});",
											"",
											"pm.test(\"Item check\", function () {",
											"    pm.expect(order.items).to.be.length(3);",
											"    const product = Utility.getByName(order.items, 'Main product');",
											"    pm.expect(product, 'Could not find main product').to.not.be.undefined;",
											"    pm.expect(product.item_number).to.eq(pm.environment.get('catalog_product_main_id'));",
											"    pm.expect(product.item_number_public).to.eq('SWDEMO10001');",
											"    pm.expect(product.quantity).to.eq(1);",
											"    pm.expect(product.unit_amount).to.eq(100.00);",
											"    pm.expect(product.unit_amount_with_tax).to.eq(125.00);",
											"    pm.expect(product.tax_percent).to.eq(25);",
											"    pm.expect(product.currency).to.eq('EUR');",
											"    pm.expect(product.description).to.have.string('Lorem ipsum');",
											"",
											"    const variantChild = Utility.getByName(order.items, 'API: Variant Child (Red-M)');",
											"    pm.expect(variantChild, 'Could not find variant child').to.not.be.undefined;",
											"    pm.expect(variantChild.item_number_public).to.eq('SG.DEMO.CHILD.1');",
											"    pm.expect(variantChild.item_number).to.eq(pm.environment.get('created_product_variant_child_id'));",
											"    pm.expect(variantChild.quantity).to.eq(1);",
											"    pm.expect(variantChild.unit_amount).to.eq(10.00);",
											"    pm.expect(variantChild.unit_amount_with_tax).to.eq(12.00);",
											"    pm.expect(variantChild.tax_percent).to.eq(20);",
											"    pm.expect(variantChild.currency).to.eq('EUR');",
											"    pm.expect(variantChild.description).to.have.string('Lorem ipsum');",
											"",
											"    const reducedProduct = Utility.getByName(order.items, 'API: reduced tax product');",
											"    pm.expect(reducedProduct, 'Could not find reduced price product').to.not.be.undefined;",
											"    pm.expect(reducedProduct.item_number_public).to.eq('SG.DEMO.REDUCED.TAX.PROD');",
											"    pm.expect(reducedProduct.item_number).to.eq(pm.environment.get('created_product_reducedTax_id'));",
											"    pm.expect(reducedProduct.quantity).to.eq(1);",
											"    pm.expect(reducedProduct.unit_amount).to.eq(10.00);",
											"    pm.expect(reducedProduct.unit_amount_with_tax).to.eq(10.70);",
											"    pm.expect(reducedProduct.tax_percent).to.eq(7);",
											"    pm.expect(reducedProduct.currency).to.eq('EUR');",
											"});",
											"",
											"pm.test(\"Taxes\", function () {",
											"    pm.expect(order.order_taxes).to.be.length(3);",
											"    const taxOne = Utility.getByLabel(order.order_taxes, 'plus 25% VAT');",
											"    pm.expect(taxOne.tax_percent).to.eq(25);",
											"    pm.expect(taxOne.amount).to.eq(25); // 26.03 (/w ship) - 1.03 (ship tax)",
											"    const taxTwo = Utility.getByLabel(order.order_taxes, 'plus 20% VAT');",
											"    pm.expect(taxTwo.tax_percent).to.eq(20);",
											"    pm.expect(taxTwo.amount).to.eq(2); // 2.08 (/w ship tax) - 0.08 (ship tax)",
											"    const taxThree = Utility.getByLabel(order.order_taxes, 'plus 7% VAT');",
											"    pm.expect(taxThree.tax_percent).to.eq(7);",
											"    pm.expect(taxThree.amount).to.eq(0.7); // 0.73 (/w ship tax) - 0.03",
											"});",
											"",
											"pm.test(\"Shipping Costs are gross\", function () {",
											"    pm.expect(order.extra_costs).to.be.length(1);",
											"    const costs = order.extra_costs[0];",
											"    pm.expect(costs.type).to.eq('shipping');",
											"    pm.expect(costs.tax_percent).to.eq(7);",
											"    pm.expect(costs.amount).to.eq(6.10); // base 6.10-1.03-0.08-0.03",
											"    pm.expect(costs.label).to.eq('plus shipping costs');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_orders}}",
											"type": "text"
										},
										{
											"key": "customer_token",
											"value": "{{customer_default_id}}",
											"type": "text"
										},
										{
											"key": "limit",
											"value": "1",
											"type": "text"
										},
										{
											"key": "offset",
											"value": "0",
											"type": "text"
										},
										{
											"key": "customer_language",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: add order (net)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Order added properly\", function () {",
											"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Save order id\", function () {",
											"    const order_number = Utility.getRequestVariableValue('order_number');",
											"    pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_add_order}}",
											"type": "text"
										},
										{
											"key": "order_number",
											"value": "0007",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: check last order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Not an error\", function () {",
											"    pm.expect(jsonData.error).to.eq(0);",
											"    pm.expect(jsonData.orders).to.be.length(1);",
											"});",
											"",
											"const order = jsonData.orders[0];",
											"pm.test(\"Basic order data\", function () {",
											"    /**",
											"     * 120 just items NET - 100+10+10",
											"     * 125.15 for items & shipping NET - 100+10+10+5.15",
											"     * 154.47 for item + shipping GROSS 100+25% + 10+20% + 10+13% + 5.15+25%+20%+13%",
											"     */",
											"    pm.expect(order.amount_items_net).to.eq(120);",
											"    pm.expect(order.amount_complete_gross).to.eq(154.67);",
											"    pm.expect(order.amount_complete_net).to.eq(125.15);",
											"});",
											"",
											"pm.test(\"Item check\", function () {",
											"    pm.expect(order.items).to.be.length(3);",
											"    const product = Utility.getByName(order.items, 'Main product');",
											"    pm.expect(product, 'Could not find main product').to.not.be.undefined;",
											"    pm.expect(product.item_number).to.eq(pm.environment.get('catalog_product_main_id'));",
											"    pm.expect(product.item_number_public).to.eq('SWDEMO10001');",
											"    pm.expect(product.quantity).to.eq(1);",
											"    pm.expect(product.unit_amount).to.eq(100.00);",
											"    pm.expect(product.unit_amount_with_tax).to.eq(125.00);",
											"    pm.expect(product.tax_percent).to.eq(25);",
											"    pm.expect(product.currency).to.eq('EUR');",
											"    pm.expect(product.description).to.have.string('Lorem ipsum');",
											"",
											"    const variantChild = Utility.getByName(order.items, 'API: Variant Child (Red-M)');",
											"    pm.expect(variantChild, 'Could not find variant child').to.not.be.undefined;",
											"    pm.expect(variantChild.item_number_public).to.eq('SG.DEMO.CHILD.1');",
											"    pm.expect(variantChild.item_number).to.eq(pm.environment.get('created_product_variant_child_id'));",
											"    pm.expect(variantChild.quantity).to.eq(1);",
											"    pm.expect(variantChild.unit_amount).to.eq(10.00);",
											"    pm.expect(variantChild.unit_amount_with_tax).to.eq(12.00);",
											"    pm.expect(variantChild.tax_percent).to.eq(20);",
											"    pm.expect(variantChild.currency).to.eq('EUR');",
											"    pm.expect(variantChild.description).to.have.string('Lorem ipsum');",
											"",
											"    const reducedProduct = Utility.getByName(order.items, 'API: reduced tax product');",
											"    pm.expect(reducedProduct, 'Could not find reduced price product').to.not.be.undefined;",
											"    pm.expect(reducedProduct.item_number_public).to.eq('SG.DEMO.REDUCED.TAX.PROD');",
											"    pm.expect(reducedProduct.item_number).to.eq(pm.environment.get('created_product_reducedTax_id'));",
											"    pm.expect(reducedProduct.quantity).to.eq(1);",
											"    pm.expect(reducedProduct.unit_amount).to.eq(10.00);",
											"    pm.expect(reducedProduct.unit_amount_with_tax).to.eq(11.3);",
											"    pm.expect(reducedProduct.tax_percent).to.eq(13);",
											"    pm.expect(reducedProduct.currency).to.eq('EUR');",
											"});",
											"",
											"pm.test(\"Taxes\", function () {",
											"    pm.expect(order.order_taxes).to.be.length(3);",
											"    const taxOne = Utility.getByLabel(order.order_taxes, 'plus 25% VAT');",
											"    pm.expect(taxOne.tax_percent).to.eq(25);",
											"    pm.expect(taxOne.amount).to.eq(25); // 26.07 (gross) - 1.07",
											"    const taxTwo = Utility.getByLabel(order.order_taxes, 'plus 20% VAT');",
											"    pm.expect(taxTwo.tax_percent).to.eq(20);",
											"    pm.expect(taxTwo.amount).to.eq(2); // 2.09 (gross) - 0.09",
											"    const taxThree = Utility.getByLabel(order.order_taxes, 'plus 13% VAT');",
											"    pm.expect(taxThree.tax_percent).to.eq(13);",
											"    pm.expect(taxThree.amount).to.eq(1.30); // 1.36 (gross) - 0.06",
											"});",
											"",
											"",
											"pm.test(\"Shipping Costs are gross\", function () {",
											"    pm.expect(order.extra_costs).to.be.length(1);",
											"    const costs = order.extra_costs[0];",
											"    pm.expect(costs.type).to.eq('shipping');",
											"    pm.expect(costs.tax_percent).to.eq(13);",
											"    pm.expect(costs.amount).to.eq(6.37); // 5.15 net, but we need gross",
											"    pm.expect(costs.label).to.eq('plus shipping costs');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_orders}}",
											"type": "text"
										},
										{
											"key": "customer_token",
											"value": "{{created_customer_withCustomGrp_id}}",
											"type": "text"
										},
										{
											"key": "limit",
											"value": "1",
											"type": "text"
										},
										{
											"key": "offset",
											"value": "0",
											"type": "text"
										},
										{
											"key": "customer_language",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: Disable live-shop",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully disabled Live Shopping\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"e52549984567bf14a0b94fc8e38bfa4a\",\r\n                \"configurationKey\": \"SgateShopgatePluginSW6.config.isLiveShopping\",\r\n                \"configurationValue\": false,\r\n                \"salesChannelId\": null\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8 - 11 - Cron",
					"item": [
						{
							"name": "8 - Partial & Full ship",
							"item": [
								{
									"name": "SG: add order (unshipped)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.test(\"Order added properly\", function () {",
													"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
													"    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
													"    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Save order id\", function () {",
													"    const order_number = Utility.getRequestVariableValue('order_number');",
													"    pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_add_order}}",
													"type": "text"
												},
												{
													"key": "order_number",
													"value": "0008",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: get deliveryId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Save delivery ID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.total).to.eql(1);\r",
													"    const delivery = jsonData.data[0];\r",
													"    pm.expect(delivery.trackingCodes, 'Tracking codes should be empty').to.be.a('array').to.be.length(0);\r",
													"    pm.environment.set(\"gen_order_0008_delivery_id\", delivery.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"filter\": [\r\n        { \r\n            \"type\": \"multi\", \r\n            \"operator\": \"and\",\r\n            \"queries\": [\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"orderId\",\r\n                    \"value\": \"{{gen_order_0008_id}}\"\r\n                },\r\n                {\r\n                    \"type\": \"equals\",\r\n                    \"field\": \"shippingCosts.unitPrice\",\r\n                    \"value\": 5.15\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/search/order-delivery",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"search",
												"order-delivery"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: ship partially",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status is now shipped\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.technicalName).to.eql('shipped_partially');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sendMail\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/order_delivery/{{gen_order_0008_delivery_id}}/state/ship_partially",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"order_delivery",
												"{{gen_order_0008_delivery_id}}",
												"state",
												"ship_partially"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG cron: ship",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_cron}}",
													"type": "text"
												},
												{
													"key": "jobs[0][job_name]",
													"value": "set_shipping_completed",
													"type": "text"
												},
												{
													"key": "jobs[0][job_params]",
													"value": "0",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: check not sent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"pm.test(\"Test validity of data\", function () {\r",
													"    pm.expect(jsonData.total).to.eql(1);\r",
													"    const swOrder = jsonData.data[0];\r",
													"    pm.expect(swOrder.extensions, ' Should have a Shopgate order attached').to.haveOwnProperty('shopgateOrder');\r",
													"    const order = swOrder.extensions.shopgateOrder;\r",
													"    pm.expect(order.isSent, 'Should not be sent').to.eq(false);\r",
													"    pm.expect(order.isCancelled, 'Should not be cancelled').to.eq(false);\r",
													"    pm.expect(order.isPaid, 'Should not be paid').to.eq(false);\r",
													"    pm.expect(order.isTest, 'Should not be test').to.eq(false);\r",
													"    // we do not care about this flag with crons\r",
													"    pm.expect(order.receivedData.is_shipping_blocked, 'Should be blocked').to.eq(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"filter\": [\r\n        {\r\n            \"type\": \"equals\",\r\n            \"field\": \"id\",\r\n            \"value\": \"{{gen_order_0008_id}}\"\r\n        }\r\n    ],\r\n    \"associations\": {\r\n        \"shopgateOrder\": {}\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/search/order",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"search",
												"order"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: ship fully",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status is now shipped\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.technicalName).to.eql('shipped');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sendMail\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/order_delivery/{{gen_order_0008_delivery_id}}/state/ship",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"order_delivery",
												"{{gen_order_0008_delivery_id}}",
												"state",
												"ship"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG cron: ship",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_cron}}",
													"type": "text"
												},
												{
													"key": "jobs[0][job_name]",
													"value": "set_shipping_completed",
													"type": "text"
												},
												{
													"key": "jobs[0][job_params]",
													"value": "0",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: check is sent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"pm.test(\"Test validity of data\", function () {\r",
													"    pm.expect(jsonData.total).to.eql(1);\r",
													"    const swOrder = jsonData.data[0];\r",
													"    pm.expect(swOrder.extensions, ' Should have a Shopgate order attached').to.haveOwnProperty('shopgateOrder');\r",
													"    const order = swOrder.extensions.shopgateOrder;\r",
													"    pm.expect(order.isSent, 'Should not be sent').to.eq(true);\r",
													"    pm.expect(order.isCancelled, 'Should not be cancelled').to.eq(false);\r",
													"    pm.expect(order.isPaid, 'Should not be paid').to.eq(false);\r",
													"    pm.expect(order.isTest, 'Should not be test').to.eq(false);\r",
													"    // we do not care about this flag with crons\r",
													"    pm.expect(order.receivedData.is_shipping_blocked, 'Should be blocked').to.eq(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"filter\": [\r\n        {\r\n            \"type\": \"equals\",\r\n            \"field\": \"id\",\r\n            \"value\": \"{{gen_order_0008_id}}\"\r\n        }\r\n    ],\r\n    \"associations\": {\r\n        \"shopgateOrder\": {}\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/search/order",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"search",
												"order"
											]
										}
									},
									"response": []
								}
							],
							"description": "Check if partial shipping is not honored as \"sent\".\n\nCheck is full shipping is honored as \"sent\""
						},
						{
							"name": "9 - Ship Already complete",
							"item": [
								{
									"name": "SG: add order (unshipped)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.test(\"Order added properly\", function () {",
													"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
													"    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
													"    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Save order id\", function () {",
													"    const order_number = Utility.getRequestVariableValue('order_number');",
													"    pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_add_order}}",
													"type": "text"
												},
												{
													"key": "order_number",
													"value": "0009",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: process order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status is now in process\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.technicalName).to.eql('in_progress');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sendMail\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/order/{{gen_order_0009_id}}/state/process",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"order",
												"{{gen_order_0009_id}}",
												"state",
												"process"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: complete order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status is now complete\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.technicalName).to.eql('completed');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sendMail\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/order/{{gen_order_0009_id}}/state/complete",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"order",
												"{{gen_order_0009_id}}",
												"state",
												"complete"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG cron: ship",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_cron}}",
													"type": "text"
												},
												{
													"key": "jobs[0][job_name]",
													"value": "set_shipping_completed",
													"type": "text"
												},
												{
													"key": "jobs[0][job_params]",
													"value": "0",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: check is sent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"pm.test(\"Test validity of data\", function () {\r",
													"    pm.expect(jsonData.total).to.eql(1);\r",
													"    const swOrder = jsonData.data[0];\r",
													"    pm.expect(swOrder.extensions, ' Should have a Shopgate order attached').to.haveOwnProperty('shopgateOrder');\r",
													"    const order = swOrder.extensions.shopgateOrder;\r",
													"    pm.expect(order.isSent, 'Should not be sent').to.eq(true);\r",
													"    pm.expect(order.isCancelled, 'Should not be cancelled').to.eq(false);\r",
													"    pm.expect(order.isPaid, 'Should not be paid').to.eq(false);\r",
													"    pm.expect(order.isTest, 'Should not be test').to.eq(false);\r",
													"    // we do not care about this flag with crons\r",
													"    pm.expect(order.receivedData.is_shipping_blocked, 'Should be blocked').to.eq(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"filter\": [\r\n        {\r\n            \"type\": \"equals\",\r\n            \"field\": \"id\",\r\n            \"value\": \"{{gen_order_0009_id}}\"\r\n        }\r\n    ],\r\n    \"associations\": {\r\n        \"shopgateOrder\": {}\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/search/order",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"search",
												"order"
											]
										}
									},
									"response": []
								}
							],
							"description": "Check if order is already marked as \"completed\" on SG end, and marks internally as \"sent\" to not repeat calling SG."
						},
						{
							"name": "10 - Cancel",
							"item": [
								{
									"name": "SG: add order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.test(\"Order added properly\", function () {",
													"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
													"    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
													"    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Save order id\", function () {",
													"    const order_number = Utility.getRequestVariableValue('order_number');",
													"    pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_add_order}}",
													"type": "text"
												},
												{
													"key": "order_number",
													"value": "0010",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: process order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status is now in process\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.technicalName).to.eql('in_progress');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sendMail\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/order/{{gen_order_0010_id}}/state/process",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"order",
												"{{gen_order_0010_id}}",
												"state",
												"process"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: complete order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status is now complete\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.technicalName).to.eql('completed');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sendMail\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/order/{{gen_order_0010_id}}/state/complete",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"order",
												"{{gen_order_0010_id}}",
												"state",
												"complete"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG cron: cancel",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_cron}}",
													"type": "text"
												},
												{
													"key": "jobs[0][job_name]",
													"value": "cancel_orders",
													"type": "text"
												},
												{
													"key": "jobs[0][job_params]",
													"value": "0",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: check not sent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"pm.test(\"Test validity of data\", function () {\r",
													"    pm.expect(jsonData.total).to.eql(1);\r",
													"    const swOrder = jsonData.data[0];\r",
													"    pm.expect(swOrder.extensions, ' Should have a Shopgate order attached').to.haveOwnProperty('shopgateOrder');\r",
													"    const order = swOrder.extensions.shopgateOrder;\r",
													"    pm.expect(order.isSent, 'Should not be sent').to.eq(false);\r",
													"    pm.expect(order.isCancelled, 'Should not be cancelled').to.eq(false);\r",
													"    pm.expect(order.isPaid, 'Should not be paid').to.eq(false);\r",
													"    pm.expect(order.isTest, 'Should not be test').to.eq(false);\r",
													"    // we do not care about this flag with crons\r",
													"    pm.expect(order.receivedData.is_shipping_blocked, 'Should be blocked').to.eq(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"filter\": [\r\n        {\r\n            \"type\": \"equals\",\r\n            \"field\": \"id\",\r\n            \"value\": \"{{gen_order_0010_id}}\"\r\n        }\r\n    ],\r\n    \"associations\": {\r\n        \"shopgateOrder\": {}\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/search/order",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"search",
												"order"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: open order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status is now in process\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.technicalName).to.eql('open');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sendMail\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/order/{{gen_order_0010_id}}/state/reopen",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"order",
												"{{gen_order_0010_id}}",
												"state",
												"reopen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: cancel order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status is now complete\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.technicalName).to.eql('cancelled');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sendMail\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/order/{{gen_order_0010_id}}/state/cancel",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"order",
												"{{gen_order_0010_id}}",
												"state",
												"cancel"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG cron: cancel",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_cron}}",
													"type": "text"
												},
												{
													"key": "jobs[0][job_name]",
													"value": "cancel_orders",
													"type": "text"
												},
												{
													"key": "jobs[0][job_params]",
													"value": "0",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: check is sent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"pm.test(\"Test validity of data\", function () {\r",
													"    pm.expect(jsonData.total).to.eql(1);\r",
													"    const swOrder = jsonData.data[0];\r",
													"    pm.expect(swOrder.extensions, ' Should have a Shopgate order attached').to.haveOwnProperty('shopgateOrder');\r",
													"    const order = swOrder.extensions.shopgateOrder;\r",
													"    pm.expect(order.isSent, 'Should not be sent').to.eq(false);\r",
													"    pm.expect(order.isCancelled, 'Should not be cancelled').to.eq(true);\r",
													"    pm.expect(order.isPaid, 'Should not be paid').to.eq(false);\r",
													"    pm.expect(order.isTest, 'Should not be test').to.eq(false);\r",
													"    // we do not care about this flag with crons\r",
													"    pm.expect(order.receivedData.is_shipping_blocked, 'Should be blocked').to.eq(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"filter\": [\r\n        {\r\n            \"type\": \"equals\",\r\n            \"field\": \"id\",\r\n            \"value\": \"{{gen_order_0010_id}}\"\r\n        }\r\n    ],\r\n    \"associations\": {\r\n        \"shopgateOrder\": {}\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/search/order",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"search",
												"order"
											]
										}
									},
									"response": []
								}
							],
							"description": "Check if order's complete status does not trigger cancellation\n\nCheck that \"cancelled\" status triggers cancellation"
						},
						{
							"name": "11 - Already cancelled",
							"item": [
								{
									"name": "SG: add order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.test(\"Order added properly\", function () {",
													"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
													"    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
													"    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Save order id\", function () {",
													"    const order_number = Utility.getRequestVariableValue('order_number');",
													"    pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_add_order}}",
													"type": "text"
												},
												{
													"key": "order_number",
													"value": "0011",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: cancel order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status is now complete\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.technicalName).to.eql('cancelled');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sendMail\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/_action/order/{{gen_order_0011_id}}/state/cancel",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"_action",
												"order",
												"{{gen_order_0011_id}}",
												"state",
												"cancel"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG cron: cancel",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_cron}}",
													"type": "text"
												},
												{
													"key": "jobs[0][job_name]",
													"value": "cancel_orders",
													"type": "text"
												},
												{
													"key": "jobs[0][job_params]",
													"value": "0",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: check is sent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"pm.test(\"Test validity of data\", function () {\r",
													"    pm.expect(jsonData.total).to.eql(1);\r",
													"    const swOrder = jsonData.data[0];\r",
													"    pm.expect(swOrder.extensions, ' Should have a Shopgate order attached').to.haveOwnProperty('shopgateOrder');\r",
													"    const order = swOrder.extensions.shopgateOrder;\r",
													"    pm.expect(order.isSent, 'Should not be sent').to.eq(false);\r",
													"    pm.expect(order.isCancelled, 'Should not be cancelled').to.eq(true);\r",
													"    pm.expect(order.isPaid, 'Should not be paid').to.eq(false);\r",
													"    pm.expect(order.isTest, 'Should not be test').to.eq(false);\r",
													"    // we do not care about this flag with crons\r",
													"    pm.expect(order.receivedData.is_shipping_blocked, 'Should be blocked').to.eq(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"filter\": [\r\n        {\r\n            \"type\": \"equals\",\r\n            \"field\": \"id\",\r\n            \"value\": \"{{gen_order_0011_id}}\"\r\n        }\r\n    ],\r\n    \"associations\": {\r\n        \"shopgateOrder\": {}\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/search/order",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"search",
												"order"
											]
										}
									},
									"response": []
								}
							],
							"description": "Checks that response from merchant API that order is already cancelled prevents it from sending this order again."
						}
					]
				},
				{
					"name": "13 - SG Coupon",
					"item": [
						{
							"name": "SG: addOrder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Order added properly\", function () {",
											"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Save order id\", function () {",
											"    const order_number = Utility.getRequestVariableValue('order_number');",
											"    pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_add_order}}",
											"type": "text"
										},
										{
											"key": "order_number",
											"value": "0013",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: check order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"One order found\", function () {\r",
											"    pm.expect(jsonData.total).to.eql(1);\r",
											"});\r",
											"\r",
											"const order = jsonData.data[0];\r",
											"pm.test(\"Check order data\", function () {\r",
											"    pm.expect(order.shippingTotal).to.eql(5.15);\r",
											"    pm.expect(order.amountTotal).to.eql(502.07);\r",
											"    pm.expect(order.taxStatus).to.eql('net');\r",
											"});\r",
											"\r",
											"pm.test(\"Check shopgate order has coupon item\", function () {\r",
											"    pm.expect(order.extensions.shopgateOrder).to.not.be.null;\r",
											"    const items = order.extensions.shopgateOrder.receivedData.items;\r",
											"    pm.expect(items).to.not.be.undefined;\r",
											"    const sgCoupon = Utility.getByItemNumber(items, 'COUPON');\r",
											"    pm.expect(sgCoupon).to.not.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filter\": [\r\n        {\r\n          \"type\": \"equals\",\r\n          \"field\": \"id\",\r\n          \"value\": \"{{gen_order_0013_id}}\"\r\n        }\r\n    ],\r\n    \"associations\":{\r\n        \"shopgateOrder\":{}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/search/order",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"order"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "14 - Address gender",
					"item": [
						{
							"name": "SG: addOrder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Order added properly\", function () {",
											"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
											"    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Save order id\", function () {",
											"    const order_number = Utility.getRequestVariableValue('order_number');",
											"    pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_add_order}}",
											"type": "text"
										},
										{
											"key": "order_number",
											"value": "0014",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: check gender map",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Check gender\", function () {",
											"    const addresxX = jsonData.addresses.find(address => address.city === 'City X');",
											"    pm.expect(addresxX).to.not.be.undefined;",
											"    pm.expect(addresxX.gender).to.eq('m');",
											"",
											"    const addresxY= jsonData.addresses.find(address => address.city === 'City Y');",
											"    pm.expect(addresxY).to.not.be.undefined;",
											"    pm.expect(addresxY.gender).to.eq('d');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_customer}}",
											"type": "text"
										},
										{
											"key": "user",
											"value": "{{created_customer_withCustomGrp_email}}",
											"type": "text"
										},
										{
											"key": "pass",
											"value": "{{userPass}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "100-130 Shipping",
					"item": [
						{
							"name": "Gross",
							"item": [
								{
									"name": "SG: add order (gross)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.test(\"Order added properly\", function () {",
													"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
													"    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
													"    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Save order id\", function () {",
													"    const order_number = Utility.getRequestVariableValue('order_number');",
													"    pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_add_order}}",
													"type": "text"
												},
												{
													"key": "order_number",
													"value": "0100",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: check order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"pm.test(\"One order found\", function () {\r",
													"    pm.expect(jsonData.total).to.eql(1);\r",
													"});\r",
													"\r",
													"const order = jsonData.data[0];\r",
													"pm.test(\"Check order data\", function () {\r",
													"    pm.expect(order.amountTotal).to.eql(1326.55);\r",
													"    pm.expect(order.amountNet).to.eql(1190.49);\r",
													"    pm.expect(order.taxStatus).to.eql('gross');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"filter\": [\r\n        {\r\n          \"type\": \"equals\",\r\n          \"field\": \"id\",\r\n          \"value\": \"{{gen_order_0100_id}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/search/order",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"search",
												"order"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG: get_orders cost",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"pm.test(\"Not an error\", function () {",
													"    pm.expect(jsonData.error).to.eq(0);",
													"    pm.expect(jsonData.orders).to.be.length(1);",
													"});",
													"",
													"const order = jsonData.orders[0];",
													"pm.test(\"Basic order data\", function () {",
													"    pm.expect(order.external_order_id).to.eql(pm.environment.get('gen_order_0100_id'));",
													"    pm.expect(order.status_name).to.eq('Open');",
													"});",
													"",
													"pm.test(\"Taxes\", function () {",
													"    pm.expect(order.order_taxes).to.be.length(2);",
													"    const taxOne = Utility.getByLabel(order.order_taxes, 'plus 19% VAT');",
													"    pm.expect(taxOne.tax_percent).to.eq(19);",
													"    pm.expect(taxOne.amount).to.eq(83.1); // 83.48 (gross) - 0.38 (ship tax)",
													"    const taxTwo = Utility.getByLabel(order.order_taxes, 'plus 7% VAT');",
													"    pm.expect(taxTwo.tax_percent).to.eq(7);",
													"    pm.expect(taxTwo.amount).to.eq(52.34); // 52.58 (gross) - 0.24 (ship tax)",
													"});",
													"",
													"pm.test(\"Shipping Costs are gross\", function () {",
													"    pm.expect(order.extra_costs).to.be.length(1);",
													"    const costs = order.extra_costs[0];",
													"    pm.expect(costs.type).to.eq('shipping');",
													"    pm.expect(costs.tax_percent).to.eq(7);",
													"    pm.expect(costs.amount).to.eq(6.1);",
													"    pm.expect(costs.label).to.eq('plus shipping costs');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_get_orders}}",
													"type": "text"
												},
												{
													"key": "customer_token",
													"value": "{{customer_default_id}}",
													"type": "text"
												},
												{
													"key": "limit",
													"value": "1",
													"type": "text"
												},
												{
													"key": "offset",
													"value": "0",
													"type": "text"
												},
												{
													"key": "customer_language",
													"value": "",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Net",
							"item": [
								{
									"name": "SG: add order (net)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.test(\"Order added properly\", function () {",
													"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
													"    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
													"    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Save order id\", function () {",
													"    const order_number = Utility.getRequestVariableValue('order_number');",
													"    pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_add_order}}",
													"type": "text"
												},
												{
													"key": "order_number",
													"value": "0101",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SW: check order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"pm.test(\"One order found\", function () {\r",
													"    pm.expect(jsonData.total).to.eql(1);\r",
													"});\r",
													"\r",
													"const order = jsonData.data[0];\r",
													"pm.test(\"Check order data\", function () {\r",
													"    pm.expect(order.amountTotal).to.eql(1381.16);\r",
													"    pm.expect(order.amountNet).to.eql(1241.48);\r",
													"    pm.expect(order.taxStatus).to.eql('net');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"filter\": [\r\n        {\r\n          \"type\": \"equals\",\r\n          \"field\": \"id\",\r\n          \"value\": \"{{gen_order_0101_id}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_api}}/search/order",
											"host": [
												"{{sw_endpoint_api}}"
											],
											"path": [
												"search",
												"order"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG: get_orders cost",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"pm.test(\"Not an error\", function () {",
													"    pm.expect(jsonData.error).to.eq(0);",
													"    pm.expect(jsonData.orders).to.be.length(1);",
													"});",
													"",
													"const order = jsonData.orders[0];",
													"pm.test(\"Basic order data\", function () {",
													"    pm.expect(order.external_order_id).to.eql(pm.environment.get('gen_order_0101_id'));",
													"    pm.expect(order.status_name).to.eq('Open');",
													"});",
													"",
													"pm.test(\"Taxes\", function () {",
													"    pm.expect(order.order_taxes).to.be.length(2);",
													"    const taxOne = Utility.getByLabel(order.order_taxes, 'plus 19% VAT');",
													"    pm.expect(taxOne.tax_percent).to.eq(19);",
													"    pm.expect(taxOne.amount).to.eq(83.22); // 83.57 (gross) - 0.35 (ship tax)",
													"    const taxTwo = Utility.getByLabel(order.order_taxes, 'plus 7% VAT');",
													"    pm.expect(taxTwo.tax_percent).to.eq(7);",
													"    pm.expect(taxTwo.amount).to.eq(55.88); // 56.11 (gross) - 0.23 (ship tax)",
													"});",
													"",
													"pm.test(\"Shipping Costs are gross\", function () {",
													"    pm.expect(order.extra_costs).to.be.length(1);",
													"    const costs = order.extra_costs[0];",
													"    pm.expect(costs.type).to.eq('shipping');",
													"    pm.expect(costs.tax_percent).to.eq(7);",
													"    pm.expect(costs.amount).to.eq(5.73); // 5.15 net + 0.23 (7%) + 0.35 (19%)",
													"    pm.expect(costs.label).to.eq('plus shipping costs');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_get_orders}}",
													"type": "text"
												},
												{
													"key": "customer_token",
													"value": "{{created_customer_withCustomGrp_id}}",
													"type": "text"
												},
												{
													"key": "limit",
													"value": "1",
													"type": "text"
												},
												{
													"key": "offset",
													"value": "0",
													"type": "text"
												},
												{
													"key": "customer_language",
													"value": "",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Selected shipping",
							"item": [
								{
									"name": "SG: add order (gross)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.test(\"Order added properly\", function () {",
													"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
													"    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
													"    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Save order id\", function () {",
													"    const order_number = Utility.getRequestVariableValue('order_number');",
													"    pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_add_order}}",
													"type": "text"
												},
												{
													"key": "order_number",
													"value": "0102",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG: get last order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"pm.test(\"Not an error\", function () {",
													"    pm.expect(jsonData.error).to.eq(0);",
													"    pm.expect(jsonData.orders).to.be.length(1);",
													"});",
													"",
													"const order = jsonData.orders[0];",
													"pm.test(\"Basic order data\", function () {",
													"    pm.expect(order.external_order_id).to.eql(pm.environment.get('gen_order_0102_id'));",
													"    pm.expect(order.status_name).to.eq('Open');",
													"    pm.expect(order.mail).to.eq(pm.environment.get('userEmail'));",
													"    pm.expect(order.phone).to.eq('+2-111-111-1111');",
													"    pm.expect(order.currency).to.eq('EUR');",
													"    pm.expect(order.is_paid).to.eq(0);",
													"    pm.expect(order.payment_method).to.eq('Vorkasse (Eigene Abwicklung)');",
													"    pm.expect(order.payment_time).to.eq('2022-01-20T11:14:03+00:00');",
													"    pm.expect(order.is_shipping_completed).to.eq(0);",
													"    pm.expect(order.invoice_address.id).to.eq(order.delivery_address.id, 'Address IDs should equal');",
													"});",
													"",
													"pm.test(\"Billing Address check\", function () {",
													"    const address = order.invoice_address;",
													"    pm.expect(address.first_name).to.eq('Bank');",
													"    pm.expect(address.last_name).to.eq('Payment');",
													"    pm.expect(address.gender).to.eq('m');",
													"    pm.expect(address.birthday).to.eq(null);",
													"    pm.expect(address.company).to.eq('My Company 2');",
													"    pm.expect(address.street_1).to.eq('My Street 1 B');",
													"    pm.expect(address.street_2).to.eq('My Street 2 B');",
													"    pm.expect(address.zipcode).to.eq('27404');",
													"    pm.expect(address.city).to.eq('Frankenbostel');",
													"    pm.expect(address.country).to.eq('GB');",
													"    pm.expect(address.state).to.eq('GB-ABC');",
													"    pm.expect(address.phone).to.eq('+2-111-111-1111');",
													"});",
													"",
													"pm.test(\"Shipping Address check\", function () {",
													"    const address = order.delivery_address;",
													"    pm.expect(address.first_name).to.eq('Bank');",
													"    pm.expect(address.last_name).to.eq('Payment');",
													"    pm.expect(address.gender).to.eq('m');",
													"    pm.expect(address.birthday).to.eq(null);",
													"    pm.expect(address.company).to.eq('My Company 2');",
													"    pm.expect(address.street_1).to.eq('My Street 1 B');",
													"    pm.expect(address.street_2).to.eq('My Street 2 B');",
													"    pm.expect(address.zipcode).to.eq('27404');",
													"    pm.expect(address.city).to.eq('Frankenbostel');",
													"    pm.expect(address.country).to.eq('GB');",
													"    pm.expect(address.state).to.eq('GB-ABC');",
													"    pm.expect(address.phone).to.eq('+2-111-111-1111');",
													"});",
													"",
													"pm.test(\"Delivery notes\", function () {",
													"    pm.expect(order.delivery_notes).to.be.length(1);",
													"    const note = order.delivery_notes[0];",
													"    pm.expect(note.shipping_service_id).to.eq('OTHER');",
													"    pm.expect(note.shipping_service_name).to.eq('API: shipping tax Auto');",
													"    pm.expect(note.tracking_number).to.eq('');",
													"    pm.expect(note.shipping_time).to.eq(null);",
													"});",
													"",
													"pm.test(\"Taxes\", function () {",
													"    pm.expect(order.order_taxes).to.be.length(1);",
													"    const taxOne = Utility.getByLabel(order.order_taxes, 'plus 20% VAT');",
													"    pm.expect(taxOne.tax_percent).to.eq(20);",
													"    pm.expect(taxOne.amount).to.eq(82.66); // 83.41 (gross) - 0.75 (ship tax)",
													"});",
													"    ",
													"pm.test(\"Shipping discount 1 check\", function () {",
													"    const shippingDiscount = Utility.getByName(order.external_coupons, 'discount shipping costs 1');",
													"    pm.expect(shippingDiscount, 'Could not locate shipping discount').to.not.be.undefined;",
													"    pm.expect(shippingDiscount.code).to.eq('1');",
													"    pm.expect(shippingDiscount.name).to.eq('discount shipping costs 1');",
													"    pm.expect(shippingDiscount.amount).to.eq(0.5);",
													"    pm.expect(shippingDiscount.currency).to.eq('EUR');",
													"    pm.expect(shippingDiscount.is_free_shipping).to.eq(null);",
													"    Test.checkCouponAmount(shippingDiscount);",
													"});",
													"",
													"pm.test(\"Item check\", function () {",
													"    pm.expect(order.items).to.be.length(1);",
													"    const product = Utility.getByName(order.items, 'Main product');",
													"    pm.expect(product, 'Could not find main product').to.not.be.undefined;",
													"    pm.expect(product.item_number).to.eq(pm.environment.get('catalog_product_main_id'));",
													"    pm.expect(product.item_number_public).to.eq('SWDEMO10001');",
													"    pm.expect(product.quantity).to.eq(1);",
													"    pm.expect(product.unit_amount).to.eq(413.29);",
													"    pm.expect(product.unit_amount_with_tax).to.eq(495.95);",
													"    pm.expect(product.tax_percent).to.eq(20);",
													"    pm.expect(product.currency).to.eq('EUR');",
													"    pm.expect(product.description).to.have.string('Lorem ipsum');",
													"});",
													"",
													"pm.test(\"Shipping extra cost check\", function () {",
													"    pm.expect(order.extra_costs).to.be.length(1);",
													"    const extraCost = order.extra_costs[0];",
													"    pm.expect(extraCost.type).to.eq('shipping');",
													"    pm.expect(extraCost.tax_percent).to.eq(20);",
													"    pm.expect(extraCost.amount).to.eq(5); // 5 gross, 0.75 tax included, -0.5 discount not applied",
													"    pm.expect(extraCost.label).to.eq('plus shipping costs');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_get_orders}}",
													"type": "text"
												},
												{
													"key": "customer_token",
													"value": "{{customer_default_id}}",
													"type": "text"
												},
												{
													"key": "limit",
													"value": "1",
													"type": "text"
												},
												{
													"key": "offset",
													"value": "0",
													"type": "text"
												},
												{
													"key": "customer_language",
													"value": "",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "SG-153, support for selected shipping method"
						},
						{
							"name": "Forced translation (EN)",
							"item": [
								{
									"name": "SWS: login (Main)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"get customer context token\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    if (Utility.version.isLT(pm.environment.get('gen_shopware_version'), '6.6.0.0')) {\r",
													"        pm.expect(jsonData.contextToken).to.be.a('string');\r",
													"        pm.environment.set(\"gen_customer_t1_contextToken\", jsonData.contextToken);\r",
													"    } else {\r",
													"        pm.response.to.have.header(\"Sw-Context-Token\");\r",
													"        pm.environment.set(\"gen_customer_t1_contextToken\", pm.response.headers.get('Sw-Context-Token'));\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{gen_salesChannel_access_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "sw-access-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "sw-context-token",
												"value": "test-context",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"{{userEmail}}\",\n  \"password\": \"{{userPass}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_store_api}}/account/login",
											"host": [
												"{{sw_endpoint_store_api}}"
											],
											"path": [
												"account",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "SWS: change lang to DE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{gen_salesChannel_access_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "sw-access-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "sw-context-token",
												"value": "{{gen_customer_t1_contextToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"languageId\": \"{{gen_language_german_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sw_endpoint_store_api}}/context",
											"host": [
												"{{sw_endpoint_store_api}}"
											],
											"path": [
												"context"
											]
										},
										"description": "Used for switching the context. A typical example would be changing the language or changing the currency."
									},
									"response": [
										{
											"name": "Returns the context token. Use that as your `sw-context-token` header for subsequent requests.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "sw-access-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"description": "(Required) Content type of the request"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"description": "(Required) Accepted response content types"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"currencyId\": \"2b0a109853b1a8ae77dabcf72990b431\",\n  \"languageId\": \"d811b87a5242988d8cbbd9fada308e3d\",\n  \"billingAddressId\": \"7cfcdeed98824455f2a8bc93444344dc\",\n  \"shippingAddressId\": \"1828fda1ee2b103321072849e380f363\",\n  \"paymentMethodId\": \"ae2f1299a1d9bfdea99710e8b0d5f270\",\n  \"shippingMethodId\": \"82253ccf157ef325ccdb29b042ad7dab\",\n  \"countryId\": \"2f7eff01192d8dedc8f666c2e359c3c7\",\n  \"countryStateId\": \"3c2e02453634dd61b718c64af7fae578\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/context",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"context"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"contextToken\": \"reprehenderit ad Excepteur\"\n}"
										}
									]
								},
								{
									"name": "SG: add order (EN)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.test(\"Order added properly\", function () {",
													"    pm.expect(jsonData).to.have.ownProperty('error').to.eq(0);",
													"    pm.expect(jsonData).to.have.ownProperty('external_order_id').to.not.be.empty;",
													"    pm.expect(jsonData).to.have.ownProperty('external_order_number').to.not.be.empty;",
													"});",
													"",
													"pm.test(\"Save order id\", function () {",
													"    const order_number = Utility.getRequestVariableValue('order_number');",
													"    pm.environment.set(\"gen_order_\" + order_number + \"_id\", jsonData.external_order_id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_add_order}}",
													"type": "text"
												},
												{
													"key": "order_number",
													"value": "0103",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SG: check ship lang EN",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"pm.test(\"Not an error\", function () {",
													"    pm.expect(jsonData.error).to.eq(0);",
													"    pm.expect(jsonData.orders).to.be.length(1);",
													"});",
													"",
													"const order = jsonData.orders[0];",
													"pm.test(\"Shipping extra cost check\", function () {",
													"    pm.expect(order.extra_costs).to.be.length(1);",
													"    const extraCost = order.extra_costs[0];",
													"    pm.expect(extraCost.type).to.eq('shipping');",
													"    pm.expect(extraCost.tax_percent).to.eq(20);",
													"    pm.expect(extraCost.amount).to.eq(6.1);",
													"    pm.expect(extraCost.label).to.eq('plus shipping costs');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "X-Shopgate-Auth-User",
												"value": "{{gen_sg_header_auth_user}}"
											},
											{
												"key": "X-Shopgate-Auth-Token",
												"value": "{{gen_sg_header_auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "shop_number",
													"value": "{{shop_number}}",
													"type": "text"
												},
												{
													"key": "action",
													"value": "{{framework_action_get_orders}}",
													"type": "text"
												},
												{
													"key": "customer_token",
													"value": "{{customer_default_id}}",
													"type": "text"
												},
												{
													"key": "limit",
													"value": "1",
													"type": "text"
												},
												{
													"key": "offset",
													"value": "0",
													"type": "text"
												},
												{
													"key": "customer_language",
													"value": "",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{domain}}",
											"host": [
												"{{domain}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "SG-153, support for selected shipping method"
						}
					]
				}
			]
		},
		{
			"name": "Customer",
			"item": [
				{
					"name": "SG Salutations",
					"item": [
						{
							"name": "SWA: get salutations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Check DB auto-setter\", function () {\r",
											"    expectMapping('not_specified', 'd');\r",
											"    expectMapping('mr', 'm');\r",
											"    expectMapping('mrs', 'f');\r",
											"});\r",
											"\r",
											"function expectMapping(swMap, sgMap) {\r",
											"    const entity = getItem(swMap);\r",
											"    pm.expect(entity).to.not.be.undefined;\r",
											"    pm.expect(entity.extensions).to.haveOwnProperty('shopgateSalutation').to.haveOwnProperty('value').to.eql(sgMap);\r",
											"}\r",
											"\r",
											"function getItem(search) {\r",
											"    return jsonData.data.find((item) => item.salutationKey === search);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{sw_endpoint_api}}/search/salutation",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"search",
										"salutation"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Address Duplicate",
					"item": [
						{
							"name": "SG: no custom fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Should create a single address\", function () {",
											"    pm.expect(jsonData.addresses).to.be.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"temp-email\", pm.variables.replaceIn('{{$randomEmail}}'));",
											"pm.variables.set(\"temp-first-name\", pm.variables.replaceIn('{{$randomFirstName}}'));",
											"pm.variables.set(\"temp-last-name\", pm.variables.replaceIn('{{$randomLastName}}'));",
											"pm.variables.set(\"temp-address\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
											"pm.variables.set(\"temp-city\", pm.variables.replaceIn('{{$randomCity}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_register_customer}}",
											"type": "text"
										},
										{
											"key": "user",
											"value": "{{temp-email}}",
											"type": "text"
										},
										{
											"key": "pass",
											"value": "{{userPass}}",
											"type": "text"
										},
										{
											"key": "user_data[registration_date]",
											"value": "2021-01-27T13:07:38+0000",
											"type": "text"
										},
										{
											"key": "user_data[first_name]",
											"value": "{{temp-first-name}}",
											"type": "text"
										},
										{
											"key": "user_data[last_name]",
											"value": "{{temp-last-name}}",
											"type": "text"
										},
										{
											"key": "user_data[gender]",
											"value": "f",
											"type": "text"
										},
										{
											"key": "user_data[mail]",
											"value": "{{temp-email}}",
											"type": "text"
										},
										{
											"key": "user_data[birthday]",
											"value": "1987-05-19",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][is_invoice_address]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][is_delivery_address]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][first_name]",
											"value": "{{temp-first-name}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][last_name]",
											"value": "{{temp-last-name}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][gender]",
											"value": "m",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][street_1]",
											"value": "{{temp-address}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][zipcode]",
											"value": "12340",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][city]",
											"value": "{{temp-city}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][country]",
											"value": "DE",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][state]",
											"value": "DE-SH",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][phone]",
											"value": "12345",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][company]",
											"value": "My Company",
											"description": "Seems like this field get rewritten no matter what we set",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][street_2]",
											"value": "Street2",
											"description": "Seems like this field get rewritten no matter what we set",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][is_invoice_address]",
											"value": "1",
											"description": "Seems like this field get rewritten no matter what we set",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][is_delivery_address]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][first_name]",
											"value": "{{temp-first-name}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][last_name]",
											"value": "{{temp-last-name}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][gender]",
											"value": "m",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][street_1]",
											"value": "{{temp-address}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][zipcode]",
											"value": "12340",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][city]",
											"value": "{{temp-city}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][country]",
											"value": "DE",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][state]",
											"value": "DE-SH",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][phone]",
											"value": "12345",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][company]",
											"value": "My Company",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][street_2]",
											"value": "Street2",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][0][name]",
											"value": "VAT IDs",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][0][internal_field_name]",
											"value": "vat_ids",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][0][value]",
											"value": "1234,12345",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][1][internal_field_name]",
											"value": "affiliate_code",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][1][value]",
											"value": "AFFILIATE_CODE",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][2][internal_field_name]",
											"value": "title",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][2][value]",
											"value": "Big Boss",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][3][internal_field_name]",
											"value": "account_type",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][3][value]",
											"value": "business",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][4][internal_field_name]",
											"value": "cannotMap",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][4][value]",
											"value": "not mapped",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								},
								"description": "Tests basic data being identical will create only one address in DB"
							},
							"response": []
						},
						{
							"name": "SG: zip diffs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Should create two addresses\", function () {",
											"    pm.expect(jsonData.addresses).to.be.lengthOf(2);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"temp-email\", pm.variables.replaceIn('{{$randomEmail}}'));",
											"pm.variables.set(\"temp-first-name\", pm.variables.replaceIn('{{$randomFirstName}}'));",
											"pm.variables.set(\"temp-last-name\", pm.variables.replaceIn('{{$randomLastName}}'));",
											"pm.variables.set(\"temp-address\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
											"pm.variables.set(\"temp-city\", pm.variables.replaceIn('{{$randomCity}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_register_customer}}",
											"type": "text"
										},
										{
											"key": "user",
											"value": "{{temp-email}}",
											"type": "text"
										},
										{
											"key": "pass",
											"value": "{{userPass}}",
											"type": "text"
										},
										{
											"key": "user_data[registration_date]",
											"value": "2021-01-27T13:07:38+0000",
											"type": "text"
										},
										{
											"key": "user_data[first_name]",
											"value": "{{temp-first-name}}",
											"type": "text"
										},
										{
											"key": "user_data[last_name]",
											"value": "{{temp-last-name}}",
											"type": "text"
										},
										{
											"key": "user_data[gender]",
											"value": "f",
											"type": "text"
										},
										{
											"key": "user_data[mail]",
											"value": "{{temp-email}}",
											"type": "text"
										},
										{
											"key": "user_data[birthday]",
											"value": "1987-05-19",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][is_invoice_address]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][is_delivery_address]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][first_name]",
											"value": "{{temp-first-name}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][last_name]",
											"value": "{{temp-last-name}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][gender]",
											"value": "m",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][street_1]",
											"value": "{{temp-address}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][zipcode]",
											"value": "12341",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][city]",
											"value": "{{temp-city}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][country]",
											"value": "DE",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][state]",
											"value": "DE-SH",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][phone]",
											"value": "12345",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][company]",
											"value": "My Company",
											"description": "Seems like this field get rewritten no matter what we set",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][street_2]",
											"value": "Street2",
											"description": "Seems like this field get rewritten no matter what we set",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][is_invoice_address]",
											"value": "1",
											"description": "Seems like this field get rewritten no matter what we set",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][is_delivery_address]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][first_name]",
											"value": "{{temp-first-name}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][last_name]",
											"value": "{{temp-last-name}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][gender]",
											"value": "m",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][street_1]",
											"value": "{{temp-address}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][zipcode]",
											"value": "12340",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][city]",
											"value": "{{temp-city}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][country]",
											"value": "DE",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][state]",
											"value": "DE-SH",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][phone]",
											"value": "12345",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][company]",
											"value": "My Company",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][street_2]",
											"value": "Street2",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][0][name]",
											"value": "VAT IDs",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][0][internal_field_name]",
											"value": "vat_ids",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][0][value]",
											"value": "1234,12345",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][1][internal_field_name]",
											"value": "affiliate_code",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][1][value]",
											"value": "AFFILIATE_CODE",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][2][internal_field_name]",
											"value": "title",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][2][value]",
											"value": "Big Boss",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][3][internal_field_name]",
											"value": "account_type",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][3][value]",
											"value": "business",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][4][internal_field_name]",
											"value": "cannotMap",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][4][value]",
											"value": "not mapped",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								},
								"description": "Tests that zip code difference will create two addresses"
							},
							"response": []
						},
						{
							"name": "SG: phone diffs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Should create two addresses\", function () {",
											"    pm.expect(jsonData.addresses).to.be.lengthOf(2);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"temp-email\", pm.variables.replaceIn('{{$randomEmail}}'));",
											"pm.variables.set(\"temp-first-name\", pm.variables.replaceIn('{{$randomFirstName}}'));",
											"pm.variables.set(\"temp-last-name\", pm.variables.replaceIn('{{$randomLastName}}'));",
											"pm.variables.set(\"temp-address\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
											"pm.variables.set(\"temp-city\", pm.variables.replaceIn('{{$randomCity}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_register_customer}}",
											"type": "text"
										},
										{
											"key": "user",
											"value": "{{temp-email}}",
											"type": "text"
										},
										{
											"key": "pass",
											"value": "{{userPass}}",
											"type": "text"
										},
										{
											"key": "user_data[registration_date]",
											"value": "2021-01-27T13:07:38+0000",
											"type": "text"
										},
										{
											"key": "user_data[first_name]",
											"value": "{{temp-first-name}}",
											"type": "text"
										},
										{
											"key": "user_data[last_name]",
											"value": "{{temp-last-name}}",
											"type": "text"
										},
										{
											"key": "user_data[gender]",
											"value": "f",
											"type": "text"
										},
										{
											"key": "user_data[mail]",
											"value": "{{temp-email}}",
											"type": "text"
										},
										{
											"key": "user_data[birthday]",
											"value": "1987-05-19",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][is_invoice_address]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][is_delivery_address]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][first_name]",
											"value": "{{temp-first-name}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][last_name]",
											"value": "{{temp-last-name}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][gender]",
											"value": "m",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][street_1]",
											"value": "{{temp-address}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][zipcode]",
											"value": "12341",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][city]",
											"value": "{{temp-city}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][country]",
											"value": "DE",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][state]",
											"value": "DE-SH",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][phone]",
											"value": "12345",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][company]",
											"value": "My Company",
											"description": "Seems like this field get rewritten no matter what we set",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][street_2]",
											"value": "Street2",
											"description": "Seems like this field get rewritten no matter what we set",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][is_invoice_address]",
											"value": "1",
											"description": "Seems like this field get rewritten no matter what we set",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][is_delivery_address]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][first_name]",
											"value": "{{temp-first-name}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][last_name]",
											"value": "{{temp-last-name}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][gender]",
											"value": "m",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][street_1]",
											"value": "{{temp-address}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][zipcode]",
											"value": "12341",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][city]",
											"value": "{{temp-city}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][country]",
											"value": "DE",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][state]",
											"value": "DE-SH",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][phone]",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][company]",
											"value": "My Company",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][street_2]",
											"value": "Street2",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][0][name]",
											"value": "VAT IDs",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][0][internal_field_name]",
											"value": "vat_ids",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][0][value]",
											"value": "1234,12345",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][1][internal_field_name]",
											"value": "affiliate_code",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][1][value]",
											"value": "AFFILIATE_CODE",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][2][internal_field_name]",
											"value": "title",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][2][value]",
											"value": "Big Boss",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][3][internal_field_name]",
											"value": "account_type",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][3][value]",
											"value": "business",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][4][internal_field_name]",
											"value": "cannotMap",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][4][value]",
											"value": "not mapped",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								},
								"description": "Tests that phone difference will create two addresses"
							},
							"response": []
						},
						{
							"name": "SG: custom field diffs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Should create two address because of CustomField differences\", function () {",
											"    pm.expect(jsonData.addresses).to.be.lengthOf(2);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"temp-email\", pm.variables.replaceIn('{{$randomEmail}}'));",
											"pm.variables.set(\"temp-first-name\", pm.variables.replaceIn('{{$randomFirstName}}'));",
											"pm.variables.set(\"temp-last-name\", pm.variables.replaceIn('{{$randomLastName}}'));",
											"pm.variables.set(\"temp-address\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
											"pm.variables.set(\"temp-city\", pm.variables.replaceIn('{{$randomCity}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_register_customer}}",
											"type": "text"
										},
										{
											"key": "user",
											"value": "{{temp-email}}",
											"type": "text"
										},
										{
											"key": "pass",
											"value": "{{userPass}}",
											"type": "text"
										},
										{
											"key": "user_data[registration_date]",
											"value": "2021-01-27T13:07:38+0000",
											"type": "text"
										},
										{
											"key": "user_data[first_name]",
											"value": "{{temp-first-name}}",
											"type": "text"
										},
										{
											"key": "user_data[last_name]",
											"value": "{{temp-last-name}}",
											"type": "text"
										},
										{
											"key": "user_data[gender]",
											"value": "f",
											"type": "text"
										},
										{
											"key": "user_data[mail]",
											"value": "{{temp-email}}",
											"type": "text"
										},
										{
											"key": "user_data[birthday]",
											"value": "1987-05-19",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][is_invoice_address]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][is_delivery_address]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][first_name]",
											"value": "{{temp-first-name}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][last_name]",
											"value": "{{temp-last-name}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][gender]",
											"value": "m",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][street_1]",
											"value": "{{temp-address}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][zipcode]",
											"value": "12340",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][city]",
											"value": "{{temp-city}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][country]",
											"value": "DE",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][state]",
											"value": "DE-SH",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][phone]",
											"value": "12345",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][company]",
											"value": "My Company",
											"description": "Seems like this field get rewritten no matter what we set",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][street_2]",
											"value": "Street2",
											"description": "Seems like this field get rewritten no matter what we set",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][is_invoice_address]",
											"value": "1",
											"description": "Seems like this field get rewritten no matter what we set",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][is_delivery_address]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][first_name]",
											"value": "{{temp-first-name}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][last_name]",
											"value": "{{temp-last-name}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][gender]",
											"value": "m",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][street_1]",
											"value": "{{temp-address}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][zipcode]",
											"value": "12340",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][city]",
											"value": "{{temp-city}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][country]",
											"value": "DE",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][state]",
											"value": "DE-SH",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][phone]",
											"value": "12345",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][company]",
											"value": "My Company",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][street_2]",
											"value": "Street2",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][0][name]",
											"value": "VAT IDs",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][0][internal_field_name]",
											"value": "vat_ids",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][0][value]",
											"value": "1234,12345",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][1][internal_field_name]",
											"value": "affiliate_code",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][1][value]",
											"value": "AFFILIATE_CODE",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][2][internal_field_name]",
											"value": "title",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][2][value]",
											"value": "Big Boss",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][3][internal_field_name]",
											"value": "account_type",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][3][value]",
											"value": "business",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][4][internal_field_name]",
											"value": "cannotMap",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][4][value]",
											"value": "not mapped",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][0][internal_field_name]",
											"value": "title",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][0][value]",
											"value": "Mr.",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][1][internal_field_name]",
											"value": "notMapped",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][1][value]",
											"value": "not mapped either",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][2][internal_field_name]",
											"value": "department",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][2][value]",
											"value": "Some department",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][3][internal_field_name]",
											"value": "phone_number",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][3][value]",
											"value": "112233445",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][custom_fields][0][internal_field_name]",
											"value": "title",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][custom_fields][0][value]",
											"value": "Mrs.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								},
								"description": "Checks that due to custom field diferences it will create 2 addresses"
							},
							"response": []
						}
					]
				},
				{
					"name": "Register",
					"item": [
						{
							"name": "SG: no address gender",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"let saultation = 'd'",
											"if (Utility.version.isLT(pm.environment.get('gen_shopware_version'), '6.5.4.0')){",
											"    saultation = null",
											"}",
											"",
											"const jsonData = pm.response.json();",
											"",
											"// Salutation has a fallback after 6.5.4.0+",
											"pm.test(\"Check customer data\", function () {",
											"    pm.expect(jsonData.user_data.gender).to.eql(saultation);",
											"});",
											"",
											"// Shopware rewrites billing address name, last name & salutation with customer's",
											"pm.test(\"Billing check\", function () {",
											"    const billing = jsonData.addresses.find(element => element.is_invoice_address === 1);",
											"    pm.expect(billing.gender).to.eql(saultation);",
											"});",
											"",
											"pm.test(\"shipping check\", function () {",
											"    const shipping = jsonData.addresses.find(element => element.is_delivery_address === 1)",
											"    pm.expect(shipping.gender).to.eql(null);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"temp-email\", pm.variables.replaceIn('{{$randomEmail}}'));",
											"pm.variables.set(\"temp-first-name\", pm.variables.replaceIn('{{$randomFirstName}}'));",
											"pm.variables.set(\"temp-last-name\", pm.variables.replaceIn('{{$randomLastName}}'));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_register_customer}}",
											"type": "text"
										},
										{
											"key": "user",
											"value": "{{temp-email}}",
											"type": "text"
										},
										{
											"key": "pass",
											"value": "{{userPass}}",
											"type": "text"
										},
										{
											"key": "user_data[registration_date]",
											"value": "2021-01-27T13:07:38+0000",
											"type": "text"
										},
										{
											"key": "user_data[first_name]",
											"value": "{{temp-first-name}}",
											"type": "text"
										},
										{
											"key": "user_data[last_name]",
											"value": "{{temp-last-name}}",
											"type": "text"
										},
										{
											"key": "user_data[gender]",
											"value": "d",
											"type": "text",
											"disabled": true
										},
										{
											"key": "user_data[mail]",
											"value": "{{temp-email}}",
											"type": "text"
										},
										{
											"key": "user_data[birthday]",
											"value": "1987-05-19",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][is_invoice_address]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][is_delivery_address]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][first_name]",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][last_name]",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][gender]",
											"value": "f",
											"type": "text",
											"disabled": true
										},
										{
											"key": "user_data[addresses][0][street_1]",
											"value": "{{$randomStreetAddress}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][zipcode]",
											"value": "12340",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][city]",
											"value": "{{$randomCity}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][country]",
											"value": "DE",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][phone]",
											"value": "12345",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][is_invoice_address]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][is_delivery_address]",
											"value": "0",
											"description": "Seems like this field get rewritten no matter what we set",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][first_name]",
											"value": "rewritten_first_name",
											"description": "Seems like this field get rewritten no matter what we set",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][last_name]",
											"value": "rewritten_last_name",
											"description": "Seems like this field get rewritten no matter what we set",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][gender]",
											"value": "f",
											"description": "Seems like this field get rewritten no matter what we set",
											"type": "text",
											"disabled": true
										},
										{
											"key": "user_data[addresses][1][street_1]",
											"value": "{{$randomStreetAddress}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][zipcode]",
											"value": "54321",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][city]",
											"value": "{{$randomCity}}",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][country]",
											"value": "DE",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][state]",
											"value": "DE-SH",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][company]",
											"value": "My Company",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][street_2]",
											"value": "Street2",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][0][name]",
											"value": "VAT IDs",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][0][internal_field_name]",
											"value": "vat_ids",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][0][value]",
											"value": "1234,12345",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][1][internal_field_name]",
											"value": "affiliate_code",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][1][value]",
											"value": "AFFILIATE_CODE",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][2][internal_field_name]",
											"value": "title",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][2][value]",
											"value": "Big Boss",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][3][internal_field_name]",
											"value": "account_type",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][3][value]",
											"value": "business",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][4][internal_field_name]",
											"value": "cannotMap",
											"type": "text"
										},
										{
											"key": "user_data[custom_fields][4][value]",
											"value": "not mapped",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][0][internal_field_name]",
											"value": "title",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][0][value]",
											"value": "Mr.",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][1][internal_field_name]",
											"value": "notMapped",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][1][value]",
											"value": "not mapped either",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][2][internal_field_name]",
											"value": "department",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][2][value]",
											"value": "Some department",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][3][internal_field_name]",
											"value": "phone_number",
											"type": "text"
										},
										{
											"key": "user_data[addresses][1][custom_fields][3][value]",
											"value": "112233445",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][custom_fields][0][internal_field_name]",
											"value": "title",
											"type": "text"
										},
										{
											"key": "user_data[addresses][0][custom_fields][0][value]",
											"value": "Mrs.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Different scenarios for registration payload"
				},
				{
					"name": "SW: set req. phone cfg",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successfully enabled configs\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{gen_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"98b54d4b87b74abca0afc59c95312dd2\",\r\n                \"configurationKey\": \"core.loginRegistration.phoneNumberFieldRequired\",\r\n                \"configurationValue\": true,\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\"\r\n            },\r\n            {\r\n                \"id\": \"53c783b675e2a6398f5fc30e37daf103\",\r\n                \"configurationKey\": \"core.loginRegistration.showPhoneNumberField\",\r\n                \"configurationValue\": true,\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sw_endpoint_api}}/_action/sync",
							"host": [
								"{{sw_endpoint_api}}"
							],
							"path": [
								"_action",
								"sync"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: error check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check customer data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(220);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_register_customer}}",
									"type": "text"
								},
								{
									"key": "user",
									"value": "{{$randomEmail}}",
									"type": "text"
								},
								{
									"key": "pass",
									"value": "{{userPass}}",
									"type": "text"
								},
								{
									"key": "user_data[registration_date]",
									"value": "2021-01-27T13:07:38+0000",
									"type": "text"
								},
								{
									"key": "user_data[first_name]",
									"value": "{{$randomFirstName}}",
									"type": "text"
								},
								{
									"key": "user_data[last_name]",
									"value": "{{$randomLastName}}",
									"type": "text"
								},
								{
									"key": "user_data[gender]",
									"value": "f",
									"type": "text"
								},
								{
									"key": "user_data[mail]",
									"value": "{{$randomEmail}}",
									"type": "text"
								},
								{
									"key": "user_data[birthday]",
									"value": "1987-05-19",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][is_invoice_address]",
									"value": "0",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][is_delivery_address]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][first_name]",
									"value": "{{$randomFirstName}}",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][last_name]",
									"value": "{{$randomLastName}}",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][gender]",
									"value": "m",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][street_1]",
									"value": "{{$randomStreetAddress}}",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][zipcode]",
									"value": "12340",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][city]",
									"value": "{{$randomCity}}",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][country]",
									"value": "DE",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][is_invoice_address]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][is_delivery_address]",
									"value": "0",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][first_name]",
									"value": "rewritten_first_name",
									"description": "Seems like this field get rewritten no matter what we set",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][last_name]",
									"value": "rewritten_last_name",
									"description": "Seems like this field get rewritten no matter what we set",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][gender]",
									"value": "m",
									"description": "Seems like this field get rewritten no matter what we set",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][street_1]",
									"value": "{{$randomStreetAddress}}",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][zipcode]",
									"value": "54321",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][city]",
									"value": "{{$randomCity}}",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][country]",
									"value": "DE",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][state]",
									"value": "DE-SH",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][company]",
									"value": "My Company",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][street_2]",
									"value": "Street2",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][phone]",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][0][name]",
									"value": "VAT IDs",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][0][internal_field_name]",
									"value": "vat_ids",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][0][value]",
									"value": "1234,12345",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][1][internal_field_name]",
									"value": "affiliate_code",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][1][value]",
									"value": "AFFILIATE_CODE",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][2][internal_field_name]",
									"value": "title",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][2][value]",
									"value": "Big Boss",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][3][internal_field_name]",
									"value": "account_type",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][3][value]",
									"value": "business",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][4][internal_field_name]",
									"value": "cannotMap",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][4][value]",
									"value": "not mapped",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][custom_fields][0][internal_field_name]",
									"value": "title",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][custom_fields][0][value]",
									"value": "Mr.",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][custom_fields][1][internal_field_name]",
									"value": "notMapped",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][custom_fields][1][value]",
									"value": "not mapped either",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][custom_fields][2][internal_field_name]",
									"value": "department",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][custom_fields][2][value]",
									"value": "Some department",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][custom_fields][0][internal_field_name]",
									"value": "title",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][custom_fields][0][value]",
									"value": "Mrs.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: register_customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"const firstName = pm.variables.get('temp-first-name');",
									"const lastName = pm.variables.get('temp-last-name');",
									"pm.test(\"Check customer data\", function () {",
									"    pm.expect(jsonData.user_data.mail).to.eql(pm.variables.get('temp-email'));",
									"    pm.expect(jsonData.user_data.gender).to.eql('d');",
									"    pm.expect(jsonData.user_data.first_name).to.eql(firstName);",
									"    pm.expect(jsonData.user_data.last_name).to.eql(lastName);",
									"    pm.expect(jsonData.user_data.birthday).to.eql('1987-05-19');",
									"    pm.expect(jsonData.user_data.custom_fields).length(4, 'Expected 4 elements because account type is now exported');",
									"    pm.expect(jsonData.user_data.custom_fields[3].internal_field_name).to.eq('account_type');",
									"    pm.expect(jsonData.user_data.custom_fields[3].value).to.eq('business');",
									"    pm.expect(jsonData.user_data.custom_fields[2].internal_field_name).to.eq('vat_ids');",
									"    pm.expect(jsonData.user_data.custom_fields[2].value).to.eq('1234,12345');",
									"    pm.expect(jsonData.user_data.custom_fields[1].internal_field_name).to.eq('affiliate_code');",
									"    pm.expect(jsonData.user_data.custom_fields[1].value).to.eq('AFFILIATE_CODE');",
									"    pm.expect(jsonData.user_data.custom_fields[0].internal_field_name).to.eq('title');",
									"    pm.expect(jsonData.user_data.custom_fields[0].value).to.eq('Big Boss');",
									"});",
									"pm.test(\"Billing check\", function () {",
									"    const billing = jsonData.addresses.find(element => element.is_invoice_address === 1);",
									"    pm.expect(billing.is_invoice_address).to.eql(1);",
									"    pm.expect(billing.is_delivery_address).to.eql(0);",
									"    pm.expect(billing.country).to.eql('DE');",
									"    pm.expect(billing.zipcode).to.eql('54321');",
									"    pm.expect(billing.state).to.eql('DE-SH');",
									"    pm.expect(billing.first_name).to.eql(firstName);",
									"    pm.expect(billing.last_name).to.eql(lastName);",
									"    pm.expect(billing.company).to.eql('My Company');",
									"    pm.expect(billing.street_2).to.eql('Street2');",
									"    pm.expect(billing.gender).to.eql('d');",
									"    pm.expect(billing.custom_fields).length(2, 'Billing 1 custom field')",
									"    pm.expect(billing.custom_fields[0].internal_field_name).to.eq('department');",
									"    pm.expect(billing.custom_fields[0].value).to.eq('Some department');",
									"    pm.expect(billing.custom_fields[1].internal_field_name).to.eq('phone_number');",
									"    pm.expect(billing.custom_fields[1].value).to.eq('112233445');",
									"});",
									"",
									"pm.test(\"shipping check\", function () {",
									"    const shipping = jsonData.addresses.find(element => element.is_delivery_address === 1)",
									"    pm.expect(shipping.country).to.eql('DE');",
									"    pm.expect(shipping.zipcode).to.eql('12340');",
									"    pm.expect(shipping.state).to.be.null;",
									"    pm.expect(shipping.first_name).to.not.eql(firstName);",
									"    pm.expect(shipping.last_name).to.not.eql(lastName);",
									"    pm.expect(shipping.gender).to.eql('f');",
									"    pm.expect(shipping.custom_fields).length(1, 'Should have phone number');",
									"    pm.expect(shipping.phone).to.eql('12345');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"temp-email\", pm.variables.replaceIn('{{$randomEmail}}'));",
									"pm.variables.set(\"temp-first-name\", pm.variables.replaceIn('{{$randomFirstName}}'));",
									"pm.variables.set(\"temp-last-name\", pm.variables.replaceIn('{{$randomLastName}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_register_customer}}",
									"type": "text"
								},
								{
									"key": "user",
									"value": "{{temp-email}}",
									"type": "text"
								},
								{
									"key": "pass",
									"value": "{{userPass}}",
									"type": "text"
								},
								{
									"key": "user_data[registration_date]",
									"value": "2021-01-27T13:07:38+0000",
									"type": "text"
								},
								{
									"key": "user_data[first_name]",
									"value": "{{temp-first-name}}",
									"type": "text"
								},
								{
									"key": "user_data[last_name]",
									"value": "{{temp-last-name}}",
									"type": "text"
								},
								{
									"key": "user_data[gender]",
									"value": "d",
									"type": "text"
								},
								{
									"key": "user_data[mail]",
									"value": "{{temp-email}}",
									"type": "text"
								},
								{
									"key": "user_data[birthday]",
									"value": "1987-05-19",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][is_invoice_address]",
									"value": "0",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][is_delivery_address]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][first_name]",
									"value": "{{$randomFirstName}}",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][last_name]",
									"value": "{{$randomLastName}}",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][gender]",
									"value": "f",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][street_1]",
									"value": "{{$randomStreetAddress}}",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][zipcode]",
									"value": "12340",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][city]",
									"value": "{{$randomCity}}",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][country]",
									"value": "DE",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][phone]",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][is_invoice_address]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][is_delivery_address]",
									"value": "0",
									"description": "Seems like this field get rewritten no matter what we set",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][first_name]",
									"value": "rewritten_first_name",
									"description": "Seems like this field get rewritten no matter what we set",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][last_name]",
									"value": "rewritten_last_name",
									"description": "Seems like this field get rewritten no matter what we set",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][gender]",
									"value": "f",
									"description": "Seems like this field get rewritten no matter what we set",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][street_1]",
									"value": "{{$randomStreetAddress}}",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][zipcode]",
									"value": "54321",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][city]",
									"value": "{{$randomCity}}",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][country]",
									"value": "DE",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][state]",
									"value": "DE-SH",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][company]",
									"value": "My Company",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][street_2]",
									"value": "Street2",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][0][name]",
									"value": "VAT IDs",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][0][internal_field_name]",
									"value": "vat_ids",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][0][value]",
									"value": "1234,12345",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][1][internal_field_name]",
									"value": "affiliate_code",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][1][value]",
									"value": "AFFILIATE_CODE",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][2][internal_field_name]",
									"value": "title",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][2][value]",
									"value": "Big Boss",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][3][internal_field_name]",
									"value": "account_type",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][3][value]",
									"value": "business",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][4][internal_field_name]",
									"value": "cannotMap",
									"type": "text"
								},
								{
									"key": "user_data[custom_fields][4][value]",
									"value": "not mapped",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][custom_fields][0][internal_field_name]",
									"value": "title",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][custom_fields][0][value]",
									"value": "Mr.",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][custom_fields][1][internal_field_name]",
									"value": "notMapped",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][custom_fields][1][value]",
									"value": "not mapped either",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][custom_fields][2][internal_field_name]",
									"value": "department",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][custom_fields][2][value]",
									"value": "Some department",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][custom_fields][3][internal_field_name]",
									"value": "phone_number",
									"type": "text"
								},
								{
									"key": "user_data[addresses][1][custom_fields][3][value]",
									"value": "112233445",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][custom_fields][0][internal_field_name]",
									"value": "title",
									"type": "text"
								},
								{
									"key": "user_data[addresses][0][custom_fields][0][value]",
									"value": "Mrs.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: get_customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"pm.test(\"Check customer data\", function () {",
									"    pm.expect(jsonData.user_data.mail).to.eql(pm.environment.get('userEmail'));",
									"    pm.expect(jsonData.user_data.gender).to.eql('m');",
									"    pm.expect(jsonData.user_data.first_name).to.eql('Max');",
									"    pm.expect(jsonData.user_data.last_name).to.eql('Mustermann');",
									"    pm.expect(jsonData.user_data.customer_number).to.eql('SWDEMO10000');",
									"    pm.expect(jsonData.user_data.birthday).to.eql('1996-06-06');",
									"    pm.expect(jsonData.user_data.customer_groups[0]).to.not.be.empty;",
									"    pm.expect(jsonData.user_data.customer_groups[0]).to.have.ownProperty('id').to.eq(pm.environment.get('gen_customer_group_main_id'));",
									"    pm.expect(jsonData.user_data.customer_groups[0]).to.have.ownProperty('name').to.eq('Standard customer group');",
									"    pm.expect(jsonData.user_data.custom_fields).to.be.an('array');",
									"    const accountType = jsonData.user_data.custom_fields[0];",
									"    pm.expect(accountType.label).to.eq('account_type');",
									"    pm.expect(accountType.value).to.eq('private');",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_get_customer}}",
									"type": "text"
								},
								{
									"key": "user",
									"value": "{{userEmail}}",
									"type": "text"
								},
								{
									"key": "pass",
									"value": "{{userPass}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SW: unset req. phone cfg",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successfully enabled configs\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{gen_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"write-system-config\": {\r\n        \"entity\": \"system_config\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"id\": \"98b54d4b87b74abca0afc59c95312dd2\",\r\n                \"configurationKey\": \"core.loginRegistration.phoneNumberFieldRequired\",\r\n                \"configurationValue\": false,\r\n                \"salesChannelId\": \"{{gen_salesChannel_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sw_endpoint_api}}/_action/sync",
							"host": [
								"{{sw_endpoint_api}}"
							],
							"path": [
								"_action",
								"sync"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Settings",
			"item": [
				{
					"name": "SG: get_settings (EN)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Check issues with payload\", function () {",
									"    pm.expect(jsonData.error, 'SDK Error').to.eql(0);",
									"    pm.expect(jsonData.customer_groups).to.be.a('array').to.be.length(2);",
									"});",
									"",
									"pm.test(\"Check custom gross group\", function () {",
									"    const nonDefaultGroup = findByName('API: A custom NET group');",
									"    pm.expect(nonDefaultGroup).to.haveOwnProperty('id').to.eq(pm.environment.get('created_customerGroup_net_id'));",
									"    pm.expect(nonDefaultGroup).to.haveOwnProperty('is_default').to.eq('0');",
									"});",
									"pm.test(\"Check default group\", function () {",
									"    const defaultGroup = findByName('Standard customer group');",
									"    pm.expect(defaultGroup).to.haveOwnProperty('id').to.eq(pm.environment.get('gen_customer_group_main_id'));",
									"    pm.expect(defaultGroup).to.haveOwnProperty('is_default').to.eq('1');",
									"});",
									"",
									"function findByName(name) {",
									"    return jsonData.customer_groups.find(group => group.name === name);",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_get_settings}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: set inactive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"activation via plugin is not implemented\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error_text).to.be.eq('invalid value in configuration');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_set_settings}}",
									"type": "text"
								},
								{
									"key": "shopgate_settings[0][name]",
									"value": "active",
									"type": "text"
								},
								{
									"key": "shopgate_settings[0][value]",
									"value": "0",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						},
						"description": "Should no longer be able to disable plugin via settings"
					},
					"response": []
				}
			]
		},
		{
			"name": "Misc",
			"item": [
				{
					"name": "SG: ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"pm.test(\"Ping Pong\", function () {",
									"    pm.expect(jsonData.pong).to.eql('OK');",
									"});",
									"",
									"pm.test('Plugin check', function () {",
									"    pm.expect(jsonData.plugin_version).to.be.a('string').to.not.be.empty.to.not.eq('not installed');",
									"    pm.expect(jsonData.shopgate_library_version).to.be.a('string').to.be.not.empty;",
									"    pm.expect(jsonData.plugin_info['Shopware core version']).to.be.a('string').to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Check log paths\", function () {",
									"    const shopNumber = pm.environment.get('shop_number');",
									"    pm.expect(jsonData.configuration.export_folder_path).to.have.string('shopgate/' + shopNumber);",
									"    pm.expect(jsonData.configuration.log_folder_path).to.have.string('shopgate/' + shopNumber);",
									"    pm.expect(jsonData.configuration.cache_folder_path).to.have.string('shopgate/' + shopNumber);",
									"});",
									"",
									"pm.test(\"payment methods\", function () {",
									"    const payment_methods = jsonData.shop_info.payment_methods;",
									"    pm.expect(payment_methods).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_ping}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: log (debug)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Successful call', function(){",
									"    pm.response.to.be.success;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Finished Product Export\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "get_log_file",
									"type": "text"
								},
								{
									"key": "lines",
									"value": "100",
									"type": "text"
								},
								{
									"key": "log_type",
									"value": "debug",
									"description": "access, error, debug, request",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: log (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Successful call', function(){",
									"    pm.response.to.be.success;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Delivery status is already complete\");",
									"    pm.expect(pm.response.text()).to.include(\"Order already cancelled.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_number}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "get_log_file",
									"type": "text"
								},
								{
									"key": "lines",
									"value": "100",
									"type": "text"
								},
								{
									"key": "log_type",
									"value": "error",
									"description": "access, error, debug, request",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Main DE",
			"item": [
				{
					"name": "Sort Update",
					"item": [
						{
							"name": "SW: create manual cat 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created single entity\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{created_category_manual_three_id}}\",\r\n    \"displayNestedProducts\": true,\r\n    \"parentId\": \"{{category_freeTime_id}}\",\r\n    \"afterCategoryId\": null,\r\n    \"type\": \"page\",\r\n    \"productAssignmentType\": \"product\",\r\n    \"name\": \"API: Manual products category 3\",\r\n    \"translations\": {\r\n        \"de-DE\": {\r\n            \"name\": \"API: Manual products category 3 (DE)\"\r\n        }\r\n    },\r\n    \"cmsPageId\": \"{{gen_cms_page_default_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/category",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"category"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: create prod map",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully created all SG system config entities\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"write-product-category\": {\r\n        \"entity\": \"product_category\",\r\n        \"action\": \"upsert\",\r\n        \"payload\": [\r\n            {\r\n                \"productId\": \"{{catalog_product_disabled}}\",\r\n                \"categoryId\": \"{{created_category_manual_three_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_freeShip}}\",\r\n                \"categoryId\": \"{{created_category_manual_three_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_variant}}\",\r\n                \"categoryId\": \"{{created_category_manual_three_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_props}}\",\r\n                \"categoryId\": \"{{created_category_manual_three_id}}\"\r\n            },\r\n            {\r\n                \"productId\": \"{{catalog_product_advPrices_id}}\",\r\n                \"categoryId\": \"{{created_category_manual_three_id}}\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/_action/sync",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"_action",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "SWA: update category sort (DE)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully activated/deactivated payment method\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const body = {",
											"    \"slotConfig\": {",
											"        \"#slotId#\": {",
											"            \"boxLayout\": {",
											"                \"source\": \"static\",",
											"                \"value\": \"standard\"",
											"            },",
											"            \"showSorting\": {",
											"                \"source\": \"static\",",
											"                \"value\": true",
											"            },",
											"            \"useCustomSorting\": {",
											"                \"source\": \"static\",",
											"                \"value\": true",
											"            },",
											"            \"availableSortings\": {",
											"                \"source\": \"static\",",
											"                \"value\": {",
											"                    \"#nameDescId#\": 1,",
											"                    \"#priceDesc#\": 3",
											"                }",
											"            },",
											"            \"defaultSorting\": {",
											"                \"source\": \"static\",",
											"                \"value\": \"#nameDescId#\"",
											"            }",
											"        }",
											"    }",
											"}",
											"let requestBody = JSON.stringify(body);",
											"",
											"// sort is changed in 6.6",
											"if (Utility.version.isLT(pm.environment.get('gen_shopware_version'), '6.6.0.0')){",
											"    requestBody = requestBody.replaceAll('#nameDescId#', 'name-desc');",
											"    requestBody = requestBody.replaceAll('#priceDesc#', 'price-desc');",
											"} else {",
											"    requestBody = requestBody.replaceAll('#nameDescId#', pm.environment.get('gen_product_sort_nameDesc_id'));",
											"    requestBody = requestBody.replaceAll('#priceDesc#', pm.environment.get('gen_product_sort_priceDesc_id'));",
											"}",
											"",
											"requestBody = requestBody.replaceAll('#slotId#', pm.environment.get('gen_cms_slot_productListing_id'));",
											"pm.environment.set(\"requestBody\", requestBody);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "sw-language-id",
										"value": "{{gen_language_german_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{sw_endpoint_api}}/category/:catId",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"category",
										":catId"
									],
									"variable": [
										{
											"key": "catId",
											"value": "{{created_category_manual_three_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: check Z-A name sort (DE)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"const jsonObject = xml2Json(responseBody);",
											"pm.test(\"General check\", function () {",
											"    pm.expect(jsonObject.items.item).to.be.a('array').length.to.be.gte(4, 'Should have certain number of products');",
											"});",
											"",
											"// seems like sort is not working on 6.5 CI container well",
											"if (Utility.version.isLT(pm.environment.get('gen_shopware_version'), '6.6.0.0')){",
											"    return;",
											"}",
											"",
											"pm.test(\"Check `adv price` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_advPrices_id'), '2');",
											"});",
											"pm.test(\"Check `free ship` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_freeShip'), '3');",
											"});",
											"pm.test(\"Check `variant` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_variant'), '4');",
											"});",
											"pm.test(\"Check `prod props` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_props'), '1');",
											"});",
											"",
											"function checkManualCategoryExistence(productId, positionNumber) {",
											"    const product = Utility.getXmlByUid(jsonObject.items.item, productId);",
											"    pm.expect(product, 'Could not locate product by id: ' + productId).to.haveOwnProperty('categories');",
											"    let category;",
											"    if (Array.isArray()) {",
											"        category = Utility.getXmlByUid(product.categories.category, pm.environment.get('created_category_manual_id'));",
											"    } else {",
											"        category = product.categories.category;",
											"    }",
											"    pm.expect(category, 'Could not locate manual category for prod id: ' + productId).to.haveOwnProperty('$').to.haveOwnProperty('sort_order').to.eq(positionNumber);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_main_DE}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "limit",
											"value": "100",
											"type": "text"
										},
										{
											"key": "offset",
											"value": "0",
											"type": "text"
										},
										{
											"key": "debug_log",
											"value": "1",
											"type": "text"
										},
										{
											"key": "use_errorhandler",
											"value": "1",
											"type": "text"
										},
										{
											"key": "use_shutdown_handler",
											"value": "1",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{catalog_product_advPrices_id}}",
											"description": "1",
											"type": "text"
										},
										{
											"key": "uids[1]",
											"value": "{{catalog_product_props}}",
											"description": "2",
											"type": "text"
										},
										{
											"key": "uids[2]",
											"value": "{{catalog_product_freeShip}}",
											"description": "3",
											"type": "text"
										},
										{
											"key": "uids[3]",
											"value": "{{catalog_product_variant}}",
											"description": "4",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SG: check original map sort (EN)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not an error\", function () {",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"const jsonObject = xml2Json(responseBody);",
											"pm.test(\"General check\", function () {",
											"    pm.expect(jsonObject.items.item).to.be.a('array').length.to.be.gte(4, 'Should have certain number of products');",
											"});",
											"",
											"// seems like sort is not working on 6.5 CI container well",
											"if (Utility.version.isLT(pm.environment.get('gen_shopware_version'), '6.6.0.0')){",
											"    return;",
											"}",
											"",
											"pm.test(\"Check `adv price` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_advPrices_id'), '3');",
											"});",
											"pm.test(\"Check `free ship` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_freeShip'), '1');",
											"});",
											"pm.test(\"Check `variant` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_variant'), '4');",
											"});",
											"pm.test(\"Check `prod props` product category sort\", function () {",
											"    checkManualCategoryExistence(pm.environment.get('catalog_product_props'), '2');",
											"});",
											"",
											"function checkManualCategoryExistence(productId, positionNumber) {",
											"    const product = Utility.getXmlByUid(jsonObject.items.item, productId);",
											"    pm.expect(product, 'Could not locate product by id: ' + productId).to.haveOwnProperty('categories');",
											"    pm.expect(product.categories.category, 'Product \"' + productId +'\" appears only in one category').to.be.an('array');",
											"",
											"    const category = Utility.getXmlByUid(product.categories.category, pm.environment.get('created_category_manual_three_id'));",
											"    pm.expect(category, 'Could not locate manual category for prod id: ' + productId).to.haveOwnProperty('$').to.haveOwnProperty('sort_order').to.eq(positionNumber);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" *  SG Token generation",
											" */",
											"var tstamp = Math.floor(Date.now() / 1000);",
											"",
											"const customerNumber = pm.environment.get('customer_number');",
											"const apiKey = pm.environment.get('api_key');",
											"",
											"// Use the CryptoJS",
											"var authUser = customerNumber + \"-\" + tstamp;",
											"var tokenData = \"SPA-\" + customerNumber + \"-\" + tstamp + \"-\" + apiKey;",
											"",
											"var authToken = CryptoJS.SHA1(tokenData).toString();",
											"",
											"// Set the new header values",
											"pm.environment.set(\"gen_sg_header_auth_user\", authUser);",
											"pm.environment.set(\"gen_sg_header_auth_token\", authToken);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "X-Shopgate-Auth-User",
										"value": "{{gen_sg_header_auth_user}}"
									},
									{
										"key": "X-Shopgate-Auth-Token",
										"value": "{{gen_sg_header_auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "shop_number",
											"value": "{{shop_number}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "{{framework_action_get_items}}",
											"type": "text"
										},
										{
											"key": "limit",
											"value": "100",
											"type": "text"
										},
										{
											"key": "offset",
											"value": "0",
											"type": "text"
										},
										{
											"key": "debug_log",
											"value": "1",
											"type": "text"
										},
										{
											"key": "use_errorhandler",
											"value": "1",
											"type": "text"
										},
										{
											"key": "use_shutdown_handler",
											"value": "1",
											"type": "text"
										},
										{
											"key": "uids[0]",
											"value": "{{catalog_product_advPrices_id}}",
											"description": "3",
											"type": "text"
										},
										{
											"key": "uids[1]",
											"value": "{{catalog_product_props}}",
											"description": "2",
											"type": "text"
										},
										{
											"key": "uids[2]",
											"value": "{{catalog_product_freeShip}}",
											"description": "1",
											"type": "text"
										},
										{
											"key": "uids[3]",
											"value": "{{catalog_product_variant}}",
											"description": "4",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{domain}}",
									"host": [
										"{{domain}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SW: delete manual cat 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Created single entity\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{sw_endpoint_api}}/category/:catId",
									"host": [
										"{{sw_endpoint_api}}"
									],
									"path": [
										"category",
										":catId"
									],
									"variable": [
										{
											"key": "catId",
											"value": "{{created_category_manual_three_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Testing sort by setting secondary language. The primary language (EN) does not inherit the DE sort order that we set, but uses original sort mapping that was set during original category product map."
				},
				{
					"name": "SG: get_settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"pm.test(\"Check issues with payload\", function () {",
									"    pm.expect(jsonData.error, 'SDK Error').to.eql(0);",
									"    pm.expect(jsonData.customer_groups).to.be.a('array').to.be.length(2);",
									"});",
									"",
									"pm.test(\"Check custom NET group\", function () {",
									"    const nonDefaultGroup = findByName('API: A custom NET group');",
									"    pm.expect(nonDefaultGroup).to.haveOwnProperty('id').to.eq(pm.environment.get('created_customerGroup_net_id'));",
									"    pm.expect(nonDefaultGroup).to.haveOwnProperty('is_default').to.eq('0');",
									"});",
									"",
									"pm.test(\"Check other group\", function () {",
									"    const defaultGroup = findByName('Standard-Kundengruppe');",
									"    pm.expect(defaultGroup).to.haveOwnProperty('id').to.eq(pm.environment.get('gen_customer_group_main_id'));",
									"    pm.expect(defaultGroup).to.haveOwnProperty('is_default').to.eq('1');",
									"});",
									"",
									"function findByName(name) {",
									"    return jsonData.customer_groups.find(group => group.name === name);",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_main_DE}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_get_settings}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SG: ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"pm.test(\"Ping Pong\", function () {",
									"    pm.expect(jsonData.pong).to.eql('OK');",
									"});",
									"",
									"pm.test('Plugin check', function () {",
									"    pm.expect(jsonData.plugin_version).to.be.a('string').to.not.be.empty.to.not.eq('not installed');",
									"    pm.expect(jsonData.shopgate_library_version).to.be.a('string').to.be.not.empty;",
									"    pm.expect(jsonData.plugin_info['Shopware core version']).to.be.a('string').to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Check log paths\", function () {",
									"    const shopNumber = pm.environment.get('shop_main_DE');",
									"    pm.expect(jsonData.configuration.export_folder_path).to.have.string('shopgate/' + shopNumber);",
									"    pm.expect(jsonData.configuration.log_folder_path).to.have.string('shopgate/' + shopNumber);",
									"    pm.expect(jsonData.configuration.cache_folder_path).to.have.string('shopgate/' + shopNumber);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Shopgate-Auth-User",
								"value": "{{gen_sg_header_auth_user}}"
							},
							{
								"key": "X-Shopgate-Auth-Token",
								"value": "{{gen_sg_header_auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shop_number",
									"value": "{{shop_main_DE}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "{{framework_action_ping}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{domain}}",
							"host": [
								"{{domain}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"/**",
							" *  SG Token generation",
							" */",
							"var tstamp = Math.floor(Date.now() / 1000);",
							"",
							"const deShopCreds = pm.environment.get('shop_main_DE');",
							"",
							"// Use the CryptoJS",
							"var authUser = deShopCreds + \"-\" + tstamp;",
							"var tokenData = \"SPA-\" + deShopCreds + \"-\" + tstamp + \"-\" + deShopCreds;",
							"",
							"var authToken = CryptoJS.SHA1(tokenData).toString();",
							"",
							"// Set the new header values",
							"pm.environment.set(\"gen_sg_header_auth_user\", authUser);",
							"pm.environment.set(\"gen_sg_header_auth_token\", authToken);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/**",
					" *  SG Token generation",
					" */",
					"var tstamp = Math.floor(Date.now() / 1000);",
					"",
					"const customerNumber = pm.environment.get('customer_number');",
					"const apiKey = pm.environment.get('api_key');",
					"",
					"// Use the CryptoJS",
					"var authUser = customerNumber + \"-\" + tstamp;",
					"var tokenData = \"SPA-\" + customerNumber + \"-\" + tstamp + \"-\" + apiKey;",
					"",
					"var crypto = require(\"crypto-js\");",
					"var authToken = crypto.SHA1(tokenData).toString();",
					"",
					"// Set the new header values",
					"pm.environment.set(\"gen_sg_header_auth_user\", authUser);",
					"pm.environment.set(\"gen_sg_header_auth_token\", authToken);",
					"",
					"/**",
					" * SW Token generation",
					" */",
					"var getToken = true;",
					"if (!pm.environment.get('gen_token_expires') || !pm.environment.get('gen_access_token')) {",
					"    console.log('Token or expiry date are missing');",
					"} else if (pm.environment.get('gen_token_expires') <= (new Date()).getTime()) {",
					"    console.log('Token is expired');",
					"} else {",
					"    getToken = false;",
					"}",
					"",
					"if (getToken === true) {",
					"    const createRequest = {",
					"        \"client_id\": pm.environment.get(\"sw_client_id\"),",
					"        \"grant_type\": \"password\",",
					"        \"scopes\": \"write\",",
					"        \"username\": pm.environment.get(\"sw_admin\"),",
					"        \"password\": pm.environment.get(\"sw_pass\")",
					"    };",
					"    const refreshRequest = {",
					"        \"grant_type\": \"refresh_token\",",
					"        \"client_id\": pm.environment.get(\"sw_client_id\"),",
					"        \"refresh_token\": pm.environment.get(\"gen_refresh_token\")",
					"    };",
					"    // SW Auth",
					"    const authRequest = {",
					"        url: pm.globals.replaceIn(pm.environment.replaceIn(pm.environment.get(\"sw_endpoint_auth\"))),",
					"        method: 'POST',",
					"        header: 'Accept: application/json\\nContent-Type: application/json; charset=utf-8',",
					"        body: {",
					"            mode: 'application/json'",
					"        }",
					"    };",
					"    // set body depending on type of request needed",
					"    authRequest.body.raw = JSON.stringify(pm.environment.get(\"gen_refresh_token\") ? refreshRequest : createRequest);",
					"    pm.sendRequest(authRequest, function (err, res) {",
					"        if (res.code !== 200) {",
					"            pm.environment.unset('gen_access_token');",
					"            pm.environment.unset('gen_token_expires');",
					"            pm.environment.unset('gen_refresh_token');",
					"            console.log('Invalidated refresh token');",
					"            return;",
					"        }",
					"        ",
					"        var responseJson = res.json();",
					"        pm.environment.set('gen_access_token', responseJson.access_token)",
					"",
					"        var expiryDate = new Date();",
					"        expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);",
					"        pm.environment.set('gen_token_expires', expiryDate.getTime());",
					"        pm.environment.set('gen_refresh_token', responseJson.refresh_token);",
					"        console.log('Saved the token and expiry date');",
					"    });",
					"}",
					"",
					"/**",
					" * Global utility functions",
					" */",
					"Utility = {};",
					"Utility.getMachineStateName = function(machineState) {",
					"    pm.expect(machineState, 'Object should have StateMachineState').to.haveOwnProperty('stateMachineState');",
					"    return machineState.stateMachineState.technicalName;",
					"};",
					"// some times request values are calculated, this is how we get them",
					"Utility.getRequestVariableValue = function(incomingKey) {",
					"    const found = pm.request.body.formdata.find(function({key}) {",
					"        return key === incomingKey;",
					"    });",
					"    return found && found.hasOwnProperty('value') ? found.value : null;",
					"}",
					"// JSON handlers",
					"Utility.getByLabel = (list, value) => getItemByKey(list, 'label', value);",
					"Utility.getByName = (list, value) => getItemByKey(list, 'name', value);",
					"Utility.getByCode = (list, value) => getItemByKey(list, 'code', value);",
					"Utility.getById = (list, value, strict = true) => getItemByKey(list, 'id', value, strict);",
					"Utility.getByItemNumber = (list, value) => getItemByKey(list, 'item_number', value);",
					"function getItemByKey(list, key, value, strict = true) {",
					"    return list.find(item => strict ? item[key] === value : item[key].includes(value));",
					"};",
					"// XML handlers",
					"const getXmlByAttributeKey = (list, key, value) => list.find(item => item.$[key] === value);",
					"const getXmlByAttributeProp = (list, key, value) => list.find(item => item[key] === value);",
					"Utility.getXmlByUid = (list, value) => getXmlByAttributeKey(list, 'uid', value);",
					"Utility.getXmlByLabel = (list, value) => getXmlByAttributeProp(list, 'label', value);",
					"// don't foget to AWAIT for it",
					"Utility.getJson = async response => convertXmlToJson(response)",
					"",
					"// Version functionality",
					"Utility.version = {};",
					"const versionCompare = (a, b) => a.localeCompare(b, undefined, { numeric: true, sensitivity: 'base' });",
					"Utility.version.isLT = (a, b) => versionCompare(a, b) < 0;",
					"",
					"/**",
					" * Helps running additional tests",
					" */",
					"Test = {};",
					"Test.checkCouponAmount = function(coupon) {",
					"    if (coupon.amount_gross && coupon.amount_net) {",
					"        pm.expect(true).to.eq(false, 'Coupon should not have Gross & NET values');",
					"    }",
					"};",
					"",
					"// helper functions",
					"const xml2js = require('xml2js');",
					"function convertXmlToJson(xml) {",
					"    return new Promise((resolve, reject) => {",
					"        xml2js.parseString(xml, { explicitArray: false }, (err, result) => {",
					"            if (err) {",
					"                reject(err);",
					"            } else {",
					"                resolve(result);",
					"            }",
					"        });",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// remove generated token data if not authorized",
					"if (pm.response.code === 401) {",
					"    console.log('Removing tokens due to 401 response. Please try again.');",
					"    pm.environment.unset('gen_access_token');",
					"    pm.environment.unset('gen_token_expires');",
					"    pm.environment.unset('gen_refresh_token');",
					"}"
				]
			}
		}
	]
}
